<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ComponentSpace.SAML2</name>
    </assembly>
    <members>
        <member name="T:ComponentSpace.SAML2.Assertions.Action">
            <summary>
            Represents an action.
            </summary>
            <remarks>
            Refer to the Assertions and Protocol for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.Action.IsValid(System.Xml.XmlElement)">
            <summary>
            Indicates whether the XML is an action.
            </summary>
            <param name="xmlElement">The XML to test.</param>
            <returns><c>true</c> if the XML is an action; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.Action.#ctor">
            <summary>
            Initializes a new instance of the <c>Action</c> class.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.Action.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <c>Action</c> class.
            </summary>
            <param name="actionNamespace">The action namespace.</param>
            <param name="actionValue">The action value.</param>
            <seealso cref="T:ComponentSpace.SAML2.SAMLIdentifiers.ActionNamespaces"/>
            <seealso cref="T:ComponentSpace.SAML2.SAMLIdentifiers.Actions"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.Action.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <c>Action</c> class from XML.
            </summary>
            <param name="xmlElement">The action XML.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentSpace.SAML2.Assertions.Action.ActionNamespace">
            <summary>
            Gets or sets the action namespace. 
            </summary>
            <value>
            The action namespace.
            </value>
            <seealso cref="T:ComponentSpace.SAML2.SAMLIdentifiers.ActionNamespaces"/>
        </member>
        <member name="P:ComponentSpace.SAML2.Assertions.Action.ActionValue">
            <summary>
            Gets or sets the action value. 
            </summary>
            <value>
            The action value.
            </value>
            <seealso cref="T:ComponentSpace.SAML2.SAMLIdentifiers.Actions"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.Action.ToXml(System.Xml.XmlDocument)">
            <summary>
            Serializes the action to XML.
            </summary>
            <param name="xmlDocument">The owning XML document.</param>
            <returns>The action as XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="T:ComponentSpace.SAML2.Assertions.Advice">
            <summary>
            Represents advice.
            </summary>
            <remarks>
            Refer to the Assertions and Protocol for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.Advice.IsValid(System.Xml.XmlElement)">
            <summary>
            Indicates whether the XML is advice.
            </summary>
            <param name="xmlElement">The XML to test.</param>
            <returns><c>true</c> if the XML is advice; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.Advice.#ctor">
            <summary>
            Initializes a new instance of the <c>Advice</c> class.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.Advice.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <c>Advice</c> class from XML.
            </summary>
            <param name="xmlElement">The advice XML.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentSpace.SAML2.Assertions.Advice.AdviceList">
            <summary>
            Gets or sets the list of advice. 
            </summary>
            <value>
            The list of advice.
            </value>
            <seealso cref="T:ComponentSpace.SAML2.Assertions.AssertionIDRef"/>
            <seealso cref="T:ComponentSpace.SAML2.Assertions.AssertionURIRef"/>
            <seealso cref="T:ComponentSpace.SAML2.Assertions.SAMLAssertion"/>
            <seealso cref="T:ComponentSpace.SAML2.Assertions.EncryptedAssertion"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.Advice.ToXml(System.Xml.XmlDocument)">
            <summary>
            Serializes the advice to XML.
            </summary>
            <param name="xmlDocument">The owning XML document.</param>
            <returns>The advice as XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="T:ComponentSpace.SAML2.Assertions.AssertionIDCache">
            <summary>
            Provides a cache for recording previously used <c>SAMLAssertion</c> identifiers.
            The cache may be used when enforcing single use of SAML assertions.
            </summary>
            <remarks>
            The cache is implemented using the <c>System.Web.Caching.Cache</c>.
            Use of this cache is entirely optional. 
            Refer to the <c>System.Web.Caching.Cache</c> documentation for usage restrictions.
            </remarks>
        </member>
        <member name="P:ComponentSpace.SAML2.Assertions.AssertionIDCache.Expiration">
            <summary>
            Gets or sets the expiration time span for cached assertion identifier entries. 
            </summary>
            <value>
            The expiration time span for cached assertion identifier entries.
            </value>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.AssertionIDCache.Add(System.String)">
            <summary>
            Adds an assertion identifier to the cache. 
            The assertion identifier cannot already exist in the cache.
            </summary>
            <param name="id">The SAML assertion identifier.</param>
            <returns><c>true</c> if the assertion identifier was added to the cache; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.AssertionIDCache.Add(ComponentSpace.SAML2.Assertions.SAMLAssertion)">
            <summary>
            Adds an assertion identifier to the cache.
            The assertion identifier cannot already exist in the cache.
            </summary>
            <remarks>
            If the SAML assertion includes a Conditions element with a NotOnOrAfter time then that value is used
            as the expiration time for the cache entry. Otherwise the default expiration time is used.
            </remarks>
            <param name="samlAssertion">The SAML assertion whose identifier is to be cached.</param>
            <returns><c>true</c> if the entry was added in the cache; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.AssertionIDCache.Contains(System.String)">
            <summary>
            Indicates whether the assertion identifier is contained in the cache.
            </summary>
            <param name="id">The SAML assertion identifier.</param>
            <returns><c>true</c> if the assertion identifier is contained in the cache; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.AssertionIDCache.Remove(System.String)">
            <summary>
            Removes an assertion identifier from the cache.
            </summary>
            <param name="id">The SAML assertion identifier.</param>
        </member>
        <member name="T:ComponentSpace.SAML2.Assertions.AssertionIDRef">
            <summary>
            Represents an assertion ID reference.
            </summary>
            <remarks>
            Refer to the Assertions and Protocol for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.AssertionIDRef.IsValid(System.Xml.XmlElement)">
            <summary>
            Indicates whether the XML is an assertion ID reference.
            </summary>
            <param name="xmlElement">The XML to test.</param>
            <returns><c>true</c> if the XML is an assertion ID reference; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.AssertionIDRef.#ctor">
            <summary>
            Initializes a new instance of the <c>AssertionIDRef</c> class.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.AssertionIDRef.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>AssertionIDRef</c> class.
            </summary>
            <param name="reference">The reference.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.AssertionIDRef.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <c>AssertionIDRef</c> class from XML.
            </summary>
            <param name="xmlElement">The AssertionIDRef XML.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentSpace.SAML2.Assertions.AssertionIDRef.Reference">
            <summary>
            Gets or sets the reference. 
            </summary>
            <value>
            The reference.
            </value>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.AssertionIDRef.ToXml(System.Xml.XmlDocument)">
            <summary>
            Serializes the assertion ID reference to XML.
            </summary>
            <param name="xmlDocument">The owning XML document.</param>
            <returns>The assertion ID reference as XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="T:ComponentSpace.SAML2.Assertions.AssertionURIRef">
            <summary>
            Represents an assertion URI reference.
            </summary>
            <remarks>
            Refer to the Assertions and Protocol for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.AssertionURIRef.IsValid(System.Xml.XmlElement)">
            <summary>
            Indicates whether the XML is an assertion URI reference.
            </summary>
            <param name="xmlElement">The XML to test.</param>
            <returns><c>true</c> if the XML is an assertion URI reference; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.AssertionURIRef.#ctor">
            <summary>
            Initializes a new instance of the <c>AssertionURIRef</c> class.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.AssertionURIRef.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>AssertionURIRef</c> class.
            </summary>
            <param name="reference">The reference.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.AssertionURIRef.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <c>AssertionURIRef</c> class from XML.
            </summary>
            <param name="xmlElement">The AssertionURIRef XML.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentSpace.SAML2.Assertions.AssertionURIRef.Reference">
            <summary>
            Gets or sets the reference. 
            </summary>
            <value>
            The reference.
            </value>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.AssertionURIRef.ToXml(System.Xml.XmlDocument)">
            <summary>
            Serializes the assertion URI reference to XML.
            </summary>
            <param name="xmlDocument">The owning XML document.</param>
            <returns>The assertion URI reference as XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="T:ComponentSpace.SAML2.Assertions.AttributeStatement">
            <summary>
            Represents an attribute statement.
            </summary>
            <remarks>
            Refer to the Assertions and Protocol for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.AttributeStatement.IsValid(System.Xml.XmlElement)">
            <summary>
            Indicates whether the XML is an attribute statement.
            </summary>
            <param name="xmlElement">The XML to test.</param>
            <returns><c>true</c> if the XML is an attribute statement; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.AttributeStatement.#ctor">
            <summary>
            Initializes a new instance of the <c>AttributeStatement</c> class.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.AttributeStatement.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <c>AttributeStatement</c> class from XML.
            </summary>
            <param name="xmlElement">The attribute statement XML.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentSpace.SAML2.Assertions.AttributeStatement.Attributes">
            <summary>
            Gets or sets the attributes. 
            </summary>
            <value>
            The attributes.
            </value>
            <seealso cref="T:ComponentSpace.SAML2.Assertions.SAMLAttribute"/>
            <seealso cref="T:ComponentSpace.SAML2.Assertions.EncryptedAttribute"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.AttributeStatement.GetUnencryptedAttributes">
            <summary>
            Returns all unencrypted attributes. 
            </summary>
            <returns>The unencrypted attributes.</returns>
            <seealso cref="P:ComponentSpace.SAML2.Assertions.AttributeStatement.Attributes"/>
            <seealso cref="T:System.Attribute"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.AttributeStatement.GetEncryptedAttributes">
            <summary>
            Returns all encrypted attributes. 
            </summary>
            <returns>The encrypted attributes.</returns>
            <seealso cref="P:ComponentSpace.SAML2.Assertions.AttributeStatement.Attributes"/>
            <seealso cref="T:ComponentSpace.SAML2.Assertions.EncryptedAttribute"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.AttributeStatement.ToXml(System.Xml.XmlDocument)">
            <summary>
            Serializes the attribute statement to XML.
            </summary>
            <param name="xmlDocument">The owning XML document.</param>
            <returns>The attribute statement as XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="T:ComponentSpace.SAML2.Assertions.AttributeType">
            <summary>
            Represents the attribute type.
            </summary>
            <remarks>
            Refer to the Assertions and Protocol for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.AttributeType.RegisterAttributeValueSerializer(System.String,System.String,ComponentSpace.SAML2.Assertions.IAttributeValueSerializer)">
            <summary>
            Registers an attribute value serializer for serializing attribute values to XML.
            Attribute value serializers are identified by attribute name and name format, both of which are optional.
            <para>
            If an attribute name and name format are specified then the serializer matches on both. 
            If an attribute name is not specified then the serializer matches on attribute name format. 
            If an attribute name format is not specified then the serializer matches on attribute name. 
            If neither an attribute name nor name format are specified then the serializer matches all.
            </para>
            <para>
            If there's no registered attribute value serializer then the default serializer is used
            and the attribute value is assumed to be a string.
            </para>
            </summary>
            <param name="name">The attribute name.</param>
            <param name="nameFormat">The attribute name format.</param>
            <param name="attributeValueSerializer">The attribute value serializer.</param>
            <seealso cref="M:ComponentSpace.SAML2.Assertions.AttributeType.DeregisterAttributeValueSerializer(System.String,System.String)"/>
            <seealso cref="T:ComponentSpace.SAML2.Assertions.StringAttributeValueSerializer"/>
            <seealso cref="T:ComponentSpace.SAML2.Assertions.XmlAttributeValueSerializer"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.AttributeType.DeregisterAttributeValueSerializer(System.String,System.String)">
            <summary>
            Deregisters an attribute value serializer.
            </summary>
            <param name="name">The attribute name.</param>
            <param name="nameFormat">The attribute name format.</param>
            <seealso cref="M:ComponentSpace.SAML2.Assertions.AttributeType.RegisterAttributeValueSerializer(System.String,System.String,ComponentSpace.SAML2.Assertions.IAttributeValueSerializer)"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.AttributeType.IsAttributeValueSerializerRegistered(System.String,System.String)">
            <summary>
            Indicates whether the attribute value serializer is registered.
            </summary>
            <param name="name">The attribute name.</param>
            <param name="nameFormat">The attribute name format.</param>
            <returns><c>true</c> if the attribute value serializer is registered; otherwise <c>false</c>.</returns>
            <seealso cref="M:ComponentSpace.SAML2.Assertions.AttributeType.RegisterAttributeValueSerializer(System.String,System.String,ComponentSpace.SAML2.Assertions.IAttributeValueSerializer)"/>
            <seealso cref="M:ComponentSpace.SAML2.Assertions.AttributeType.DeregisterAttributeValueSerializer(System.String,System.String)"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.AttributeType.GetAttributeValueSerializer(System.String,System.String)">
            <summary>
            Gets the attribute value serializer for the specified attribute name and name format.
            </summary>
            <para>
            A match is first tried using both the attribute name and name format.
            If that fails then a match is tried on attribute name only.
            If that fails then a match is tried on attribute name format only.
            If no matches are found then the default serializer is returned.
            </para>
            <param name="name">The attribute name.</param>
            <param name="nameFormat">The attribute name format.</param>
            <returns>The attribute value serializer.</returns>
            <seealso cref="M:ComponentSpace.SAML2.Assertions.AttributeType.RegisterAttributeValueSerializer(System.String,System.String,ComponentSpace.SAML2.Assertions.IAttributeValueSerializer)"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.AttributeType.#ctor">
            <summary>
            Initializes a new instance of the <c>AttributeType</c> class.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.AttributeType.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <c>AttributeType</c> class.
            </summary>
            <param name="name">The attribute name.</param>
            <param name="nameFormat">The name format.</param>
            <param name="friendlyName">The friendly name.</param>
            <seealso cref="T:ComponentSpace.SAML2.SAMLIdentifiers.AttributeNameFormats"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.AttributeType.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <c>AttributeType</c> class.
            </summary>
            <param name="name">The attribute name.</param>
            <param name="nameFormat">The name format.</param>
            <param name="friendlyName">The friendly name.</param>
            <param name="attributeValue">The attribute value.</param>
            <seealso cref="T:ComponentSpace.SAML2.SAMLIdentifiers.AttributeNameFormats"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.AttributeType.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <c>AttributeType</c> class.
            </summary>
            <param name="name">The attribute name.</param>
            <param name="nameFormat">The name format.</param>
            <param name="friendlyName">The friendly name.</param>
            <param name="attributeType">The attribute type.</param>
            <param name="attributeValue">The attribute value.</param>
            <seealso cref="T:ComponentSpace.SAML2.SAMLIdentifiers.AttributeNameFormats"/>
            <seealso cref="T:ComponentSpace.SAML2.Utility.XmlSchema.SimpleTypes"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.AttributeType.#ctor(System.String,System.String,System.String,System.String,System.Object)">
            <summary>
            Initializes a new instance of the <c>AttributeType</c> class.
            </summary>
            <param name="name">The attribute name.</param>
            <param name="nameFormat">The name format.</param>
            <param name="friendlyName">The friendly name.</param>
            <param name="attributeType">The attribute type.</param>
            <param name="attributeValue">The attribute value.</param>
            <seealso cref="T:ComponentSpace.SAML2.SAMLIdentifiers.AttributeNameFormats"/>
            <seealso cref="T:ComponentSpace.SAML2.Utility.XmlSchema.SimpleTypes"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.AttributeType.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <c>AttributeType</c> class from XML.
            </summary>
            <param name="xmlElement">The attribute type XML.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentSpace.SAML2.Assertions.AttributeType.Name">
            <summary>
            Gets or sets the attribute's name. 
            </summary>
            <value>
            The attribute's name.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Assertions.AttributeType.NameFormat">
            <summary>
            Gets or sets the attribute's name format. 
            </summary>
            <value>
            The attribute's name format.
            </value>
            <seealso cref="T:ComponentSpace.SAML2.SAMLIdentifiers.AttributeNameFormats"/>
        </member>
        <member name="P:ComponentSpace.SAML2.Assertions.AttributeType.FriendlyName">
            <summary>
            Gets or sets the attribute's friendly name. 
            </summary>
            <value>
            The attribute's friendly name.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Assertions.AttributeType.Values">
            <summary>
            Gets or sets the attribute values. 
            </summary>
            <value>
            The attribute values.
            </value>
            <seealso cref="T:ComponentSpace.SAML2.Assertions.AttributeValue"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.AttributeType.ToXml(System.Xml.XmlElement)">
            <summary>
            Serializes the attribute type to XML.
            </summary>
            <param name="xmlElement">The owning XML element.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="T:ComponentSpace.SAML2.Assertions.AttributeValue">
            <summary>
            Represents a SAML attribute value.
            </summary>
            <remarks>
            Refer to the Assertions and Protocol for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.AttributeValue.IsValid(System.Xml.XmlElement)">
            <summary>
            Indicates whether the XML is an attribute value.
            </summary>
            <param name="xmlElement">The XML to test.</param>
            <returns><c>true</c> if the XML is an attribute value; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.AttributeValue.#ctor">
            <summary>
            Initializes a new instance of the <c>AttributeValue</c> class.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.AttributeValue.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <c>AttributeValue</c> class.
            </summary>
            <param name="data">The attribute value data.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.AttributeValue.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <c>AttributeValue</c> class.
            </summary>
            <param name="type">The attribute value type.</param>
            <param name="data">The attribute value data.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.AttributeValue.#ctor(System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.Object)">
            <summary>
            Initializes a new instance of the <c>AttributeValue</c> class.
            </summary>
            <param name="xmlAttributes">The XML attributes keyed by named and containing the XML attribute values.</param>
            <param name="type">The attribute value type.</param>
            <param name="data">The attribute value data.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.AttributeValue.#ctor(System.Xml.XmlElement,ComponentSpace.SAML2.Assertions.IAttributeValueSerializer)">
            <summary>
            Initializes a new instance of the <c>AttributeValue</c> class from XML.
            </summary>
            <param name="xmlElement">The attribute value XML.</param>
            <param name="attributeValueSerializer">The attribute value serializer.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
            <seealso cref="M:ComponentSpace.SAML2.Assertions.AttributeType.RegisterAttributeValueSerializer(System.String,System.String,ComponentSpace.SAML2.Assertions.IAttributeValueSerializer)"/>
            <seealso cref="T:ComponentSpace.SAML2.Assertions.StringAttributeValueSerializer"/>
            <seealso cref="T:ComponentSpace.SAML2.Assertions.XmlAttributeValueSerializer"/>
        </member>
        <member name="P:ComponentSpace.SAML2.Assertions.AttributeValue.XmlAttributes">
            <summary>
            Gets or sets the XML attributes keyed by named and containing the XML attribute values. 
            </summary>
            <value>
            The XML attributes keyed by named and containing the XML attribute values.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Assertions.AttributeValue.Type">
            <summary>
            Gets or sets the attribute value type. 
            </summary>
            <value>
            The attribute value type.
            </value>
            <seealso cref="T:ComponentSpace.SAML2.Utility.XmlSchema.SimpleTypes"/>
        </member>
        <member name="P:ComponentSpace.SAML2.Assertions.AttributeValue.Data">
            <summary>
            Gets or sets the attribute value data. 
            </summary>
            <value>
            The attribute value data.
            </value>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.AttributeValue.ToXml(System.Xml.XmlDocument,ComponentSpace.SAML2.Assertions.IAttributeValueSerializer)">
            <summary>
            Serializes the attribute value to XML.
            </summary>
            <param name="xmlDocument">The owning XML document.</param>
            <param name="attributeValueSerializer">The attribute value serializer.</param>
            <returns>The attribute value as XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
            <seealso cref="M:ComponentSpace.SAML2.Assertions.AttributeType.RegisterAttributeValueSerializer(System.String,System.String,ComponentSpace.SAML2.Assertions.IAttributeValueSerializer)"/>
            <seealso cref="T:ComponentSpace.SAML2.Assertions.StringAttributeValueSerializer"/>
            <seealso cref="T:ComponentSpace.SAML2.Assertions.XmlAttributeValueSerializer"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.AttributeValue.ToString">
            <summary>
            Returns the attribute value.
            </summary>
            <returns>The attribute value</returns>
        </member>
        <member name="T:ComponentSpace.SAML2.Assertions.Audience">
            <summary>
            Represents an audience.
            </summary>
            <remarks>
            Refer to the Assertions and Protocol for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.Audience.IsValid(System.Xml.XmlElement)">
            <summary>
            Indicates whether the XML is an audience.
            </summary>
            <param name="xmlElement">The XML to test.</param>
            <returns><c>true</c> if the XML is an Audience; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.Audience.#ctor">
            <summary>
            Initializes a new instance of the <c>Audience</c> class.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.Audience.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>Audience</c> class.
            </summary>
            <param name="uri">The URI.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.Audience.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <c>Audience</c> class from XML.
            </summary>
            <param name="xmlElement">The audience XML.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentSpace.SAML2.Assertions.Audience.URI">
            <summary>
            Gets or sets the URI. 
            </summary>
            <value>
            The URI.
            </value>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.Audience.ToXml(System.Xml.XmlDocument)">
            <summary>
            Serializes the audience to XML.
            </summary>
            <param name="xmlDocument">The owning XML document.</param>
            <returns>The audience as XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="T:ComponentSpace.SAML2.Assertions.AudienceRestriction">
            <summary>
            Represents an audience restriction.
            </summary>
            <remarks>
            Refer to the Assertions and Protocol for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.AudienceRestriction.IsValid(System.Xml.XmlElement)">
            <summary>
            Indicates whether the XML is an audience restriction.
            </summary>
            <param name="xmlElement">The XML to test.</param>
            <returns><c>true</c> if the XML is an audience restriction; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.AudienceRestriction.#ctor">
            <summary>
            Initializes a new instance of the <c>AudienceRestriction</c> class.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.AudienceRestriction.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <c>AudienceRestriction</c> class from XML.
            </summary>
            <param name="xmlElement">The audience restriction XML.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentSpace.SAML2.Assertions.AudienceRestriction.Audiences">
            <summary>
            Gets or sets the audiences. 
            </summary>
            <value>
            The audiences.
            </value>
            <seealso cref="T:ComponentSpace.SAML2.Assertions.Audience"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.AudienceRestriction.ToXml(System.Xml.XmlDocument)">
            <summary>
            Serializes the audience restriction to XML.
            </summary>
            <param name="xmlDocument">The owning XML document.</param>
            <returns>The audience restriction as XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="T:ComponentSpace.SAML2.Assertions.AuthenticatingAuthority">
            <summary>
            Represents an authenticating authority.
            </summary>
            <remarks>
            Refer to the Assertions and Protocol for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.AuthenticatingAuthority.IsValid(System.Xml.XmlElement)">
            <summary>
            Indicates whether the XML is an authenticating authority.
            </summary>
            <param name="xmlElement">The XML to test.</param>
            <returns><c>true</c> if the XML is an AuthenticatingAuthority; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.AuthenticatingAuthority.#ctor">
            <summary>
            Initializes a new instance of the <c>AuthenticatingAuthority</c> class.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.AuthenticatingAuthority.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>AuthenticatingAuthority</c> class.
            </summary>
            <param name="uri">The URI.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.AuthenticatingAuthority.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <c>AuthenticatingAuthority</c> class from XML.
            </summary>
            <param name="xmlElement">The authenticating authority XML.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentSpace.SAML2.Assertions.AuthenticatingAuthority.URI">
            <summary>
            Gets or sets the URI. 
            </summary>
            <value>
            The URI.
            </value>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.AuthenticatingAuthority.ToXml(System.Xml.XmlDocument)">
            <summary>
            Serializes the authenticating authority to XML.
            </summary>
            <param name="xmlDocument">The owning XML document.</param>
            <returns>The authenticating authority as XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="T:ComponentSpace.SAML2.Assertions.AuthnContext">
            <summary>
            Represents an authentication context.
            </summary>
            <remarks>
            Refer to the Assertions and Protocol for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.AuthnContext.IsValid(System.Xml.XmlElement)">
            <summary>
            Indicates whether the XML is an authentication context.
            </summary>
            <param name="xmlElement">The XML to test.</param>
            <returns><c>true</c> if the XML is an authentication context; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.AuthnContext.#ctor">
            <summary>
            Initializes a new instance of the <c>AuthnContext</c> class.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.AuthnContext.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <c>AuthnContext</c> class from XML.
            </summary>
            <param name="xmlElement">The authentication context XML.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentSpace.SAML2.Assertions.AuthnContext.AuthnContextClassRef">
            <summary>
            Gets or sets the authentication context class reference. 
            </summary>
            <value>
            The authentication context class reference.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Assertions.AuthnContext.AuthnContextDecl">
            <summary>
            Gets or sets the authentication context declaration. 
            </summary>
            <value>
            The authentication context class declaration.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Assertions.AuthnContext.AuthnContextDeclRef">
            <summary>
            Gets or sets the authentication context declaration reference. 
            </summary>
            <value>
            The authentication context declaration reference.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Assertions.AuthnContext.AuthenticatingAuthorities">
            <summary>
            Gets or sets the authenticating authorities. 
            </summary>
            <value>
            The authenticating authorities.
            </value>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.AuthnContext.ToXml(System.Xml.XmlDocument)">
            <summary>
            Serializes the authentication context to XML.
            </summary>
            <param name="xmlDocument">The owning XML document.</param>
            <returns>The authentication context as XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="T:ComponentSpace.SAML2.Assertions.AuthnContextClassRef">
            <summary>
            Represents an authentication context class reference.
            </summary>
            <remarks>
            Refer to the Assertions and Protocol for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.AuthnContextClassRef.IsValid(System.Xml.XmlElement)">
            <summary>
            Indicates whether the XML is an authentication context class reference.
            </summary>
            <param name="xmlElement">The XML to test.</param>
            <returns><c>true</c> if the XML is an AuthnContextClassRef; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.AuthnContextClassRef.#ctor">
            <summary>
            Initializes a new instance of the <c>AuthnContextClassRef</c> class.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.AuthnContextClassRef.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>AuthnContextClassRef</c> class.
            </summary>
            <param name="uri">The URI.</param>
            <seealso cref="T:ComponentSpace.SAML2.SAMLIdentifiers.AuthnContextClasses"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.AuthnContextClassRef.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <c>AuthnContextClassRef</c> class from XML.
            </summary>
            <param name="xmlElement">The authentication context class reference XML.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentSpace.SAML2.Assertions.AuthnContextClassRef.URI">
            <summary>
            Gets or sets the URI. 
            </summary>
            <value>
            The URI.
            </value>
            <seealso cref="T:ComponentSpace.SAML2.SAMLIdentifiers.AuthnContextClasses"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.AuthnContextClassRef.ToXml(System.Xml.XmlDocument)">
            <summary>
            Serializes the authentication context class reference to XML.
            </summary>
            <param name="xmlDocument">The owning XML document.</param>
            <returns>The authentication context class reference as XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="T:ComponentSpace.SAML2.Assertions.AuthnContextDecl">
            <summary>
            Represents an authentication context declaration.
            </summary>
            <remarks>
            Refer to the Assertions and Protocol for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.AuthnContextDecl.IsValid(System.Xml.XmlElement)">
            <summary>
            Indicates whether the XML is an authentication context declaration.
            </summary>
            <param name="xmlElement">The XML to test.</param>
            <returns><c>true</c> if the XML is an authentication context declaration; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.AuthnContextDecl.#ctor">
            <summary>
            Initializes a new instance of the <c>AuthnContextDecl</c> class.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.AuthnContextDecl.#ctor(System.Xml.XmlNodeList)">
            <summary>
            Initializes a new instance of the <c>AuthnContextDecl</c> class.
            </summary>
            <param name="declaration">The authentication context declaration.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.AuthnContextDecl.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <c>AuthnContextDecl</c> class from XML.
            </summary>
            <param name="xmlElement">The authentication context declaration XML.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentSpace.SAML2.Assertions.AuthnContextDecl.Declaration">
            <summary>
            Gets or sets the declaration. 
            </summary>
            <value>
            The declaration.
            </value>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.AuthnContextDecl.ToXml(System.Xml.XmlDocument)">
            <summary>
            Serializes the authentication context declaration to XML.
            </summary>
            <param name="xmlDocument">The owning XML document.</param>
            <returns>The authentication context declaration as XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="T:ComponentSpace.SAML2.Assertions.AuthnContextDeclRef">
            <summary>
            Represents an authentication context declaration reference.
            </summary>
            <remarks>
            Refer to the Assertions and Protocol for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.AuthnContextDeclRef.IsValid(System.Xml.XmlElement)">
            <summary>
            Indicates whether the XML is an authentication context declaration reference.
            </summary>
            <param name="xmlElement">The XML to test.</param>
            <returns><c>true</c> if the XML is an AuthnContextDeclRef; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.AuthnContextDeclRef.#ctor">
            <summary>
            Initializes a new instance of the <c>AuthnContextDeclRef</c> class.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.AuthnContextDeclRef.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>AuthnContextDeclRef</c> class.
            </summary>
            <param name="uri">The URI.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.AuthnContextDeclRef.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <c>AuthnContextDeclRef</c> class from XML.
            </summary>
            <param name="xmlElement">The authentication context declaration reference XML.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentSpace.SAML2.Assertions.AuthnContextDeclRef.URI">
            <summary>
            Gets or sets the URI. 
            </summary>
            <value>
            The URI.
            </value>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.AuthnContextDeclRef.ToXml(System.Xml.XmlDocument)">
            <summary>
            Serializes the authentication context declaration reference to XML.
            </summary>
            <param name="xmlDocument">The owning XML document.</param>
            <returns>The authentication context declaration reference as XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="T:ComponentSpace.SAML2.Assertions.AuthnStatement">
            <summary>
            Represents an authentication statement.
            </summary>
            <remarks>
            Refer to the Assertions and Protocol for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.AuthnStatement.IsValid(System.Xml.XmlElement)">
            <summary>
            Indicates whether the XML is an authentication statement.
            </summary>
            <param name="xmlElement">The XML to test.</param>
            <returns><c>true</c> if the XML is an authentication statement; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.AuthnStatement.#ctor">
            <summary>
            Initializes a new instance of the <c>AuthnStatement</c> class.
            </summary>
            <remarks>
            The authentication statement is initialized with an authentication instant of now.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.AuthnStatement.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <c>AuthnStatement</c> class from XML.
            </summary>
            <param name="xmlElement">The authentication statement XML.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentSpace.SAML2.Assertions.AuthnStatement.AuthnInstant">
            <summary>
            Gets or sets the authentication instant. 
            </summary>
            <value>
            The authentication instant as coordinated universal time (UTC).
            A value of DateTime.MinValue indicates the value has not been set.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Assertions.AuthnStatement.SessionIndex">
            <summary>
            Gets or sets the session index. 
            </summary>
            <value>
            The session index.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Assertions.AuthnStatement.SessionNotOnOrAfter">
            <summary>
            Gets or sets the session not on or after time. 
            </summary>
            <value>
            The session not on or after time as coordinated universal time (UTC).
            A value of DateTime.MaxValue indicates the value has not been set.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Assertions.AuthnStatement.SubjectLocality">
            <summary>
            Gets or sets the subject locality. 
            </summary>
            <value>
            The subject locality.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Assertions.AuthnStatement.AuthnContext">
            <summary>
            Gets or sets the authentication context. 
            </summary>
            <value>
            The authentication context.
            </value>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.AuthnStatement.ToXml(System.Xml.XmlDocument)">
            <summary>
            Serializes the authentication statement to XML.
            </summary>
            <param name="xmlDocument">The owning XML document.</param>
            <returns>The authentication statement as XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="T:ComponentSpace.SAML2.Assertions.AuthzDecisionStatement">
            <summary>
            Represents an authorization decision statement.
            </summary>
            <remarks>
            Refer to the Assertions and Protocol for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.AuthzDecisionStatement.IsValid(System.Xml.XmlElement)">
            <summary>
            Indicates whether the XML is an authorization decision statement.
            </summary>
            <param name="xmlElement">The XML to test.</param>
            <returns><c>true</c> if the XML is an authorization decision statement; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.AuthzDecisionStatement.#ctor">
            <summary>
            Initializes a new instance of the <c>AuthzDecisionStatement</c> class.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.AuthzDecisionStatement.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <c>AuthzDecisionStatement</c> class from XML.
            </summary>
            <param name="xmlElement">The authorization decision statement XML.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentSpace.SAML2.Assertions.AuthzDecisionStatement.Resource">
            <summary>
            Gets or sets the resource. 
            </summary>
            <value>
            The resource.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Assertions.AuthzDecisionStatement.Decision">
            <summary>
            Gets or sets the decision. 
            </summary>
            <value>
            The decision.
            </value>
            <seealso cref="T:ComponentSpace.SAML2.SAMLIdentifiers.AuthzDecision"/>
        </member>
        <member name="P:ComponentSpace.SAML2.Assertions.AuthzDecisionStatement.Actions">
            <summary>
            Gets or sets the actions. 
            </summary>
            <value>
            The actions.
            </value>
            <seealso cref="T:ComponentSpace.SAML2.Assertions.Action"/>
        </member>
        <member name="P:ComponentSpace.SAML2.Assertions.AuthzDecisionStatement.Evidence">
            <summary>
            Gets or sets the evidence. 
            </summary>
            <value>
            The evidence.
            </value>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.AuthzDecisionStatement.ToXml(System.Xml.XmlDocument)">
            <summary>
            Serializes the authorization decision statement to XML.
            </summary>
            <param name="xmlDocument">The owning XML document.</param>
            <returns>The authorization decision statement as XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="T:ComponentSpace.SAML2.Assertions.BaseID">
            <summary>
            Represents a base identifier.
            </summary>
            <remarks>
            Refer to the Assertions and Protocol for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.BaseID.IsValid(System.Xml.XmlElement)">
            <summary>
            Indicates whether the XML is a base identifier.
            </summary>
            <param name="xmlElement">The XML to test.</param>
            <returns><c>true</c> if the XML is a base identifier; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.BaseID.#ctor">
            <summary>
            Initializes a new instance of the <c>BaseID</c> class.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.BaseID.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <c>BaseID</c> class.
            </summary>
            <param name="nameQualifier">The name qualifier.</param>
            <param name="spNameQualifier">The SP name qualifier.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.BaseID.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <c>BaseID</c> class from XML.
            </summary>
            <param name="xmlElement">The base identifier XML.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.BaseID.ToXml(System.Xml.XmlDocument)">
            <summary>
            Serializes the base identifier to XML.
            </summary>
            <param name="xmlDocument">The owning XML document.</param>
            <returns>The base identifier as XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="T:ComponentSpace.SAML2.Assertions.BaseIDAbstractType">
            <summary>
            Represents the base identifier abstract type.
            </summary>
            <remarks>
            Refer to the Assertions and Protocol for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.BaseIDAbstractType.#ctor">
            <summary>
            Initializes a new instance of the <c>BaseIDAbstractType</c> class.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.BaseIDAbstractType.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <c>BaseIDAbstractType</c> class.
            </summary>
            <param name="nameQualifier">The name qualifier.</param>
            <param name="spNameQualifier">The SP name qualifier.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.BaseIDAbstractType.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <c>BaseIDAbstractType</c> class from XML.
            </summary>
            <param name="xmlElement">The base identifier XML.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentSpace.SAML2.Assertions.BaseIDAbstractType.NameQualifier">
            <summary>
            Gets or sets the name qualifier. 
            </summary>
            <value>
            The name qualifier.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Assertions.BaseIDAbstractType.SPNameQualifier">
            <summary>
            Gets or sets the SP name qualifier. 
            </summary>
            <value>
            The SP name qualifier.
            </value>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.BaseIDAbstractType.ToXml(System.Xml.XmlElement)">
            <summary>
            Serializes the base identifier to XML.
            </summary>
            <param name="xmlElement">The owning XML element.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="T:ComponentSpace.SAML2.Assertions.Conditions">
            <summary>
            Represents conditions.
            </summary>
            <remarks>
            Refer to the Assertions and Protocol for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.Conditions.IsValid(System.Xml.XmlElement)">
            <summary>
            Indicates whether the XML is conditions.
            </summary>
            <param name="xmlElement">The XML to test.</param>
            <returns><c>true</c> if the XML is conditions; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.Conditions.#ctor">
            <summary>
            Initializes a new instance of the <c>Conditions</c> class.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.Conditions.#ctor(System.DateTime,System.DateTime)">
            <summary>
            Initializes a new instance of the <c>Conditions</c> class.
            </summary>
            <param name="notBefore">The not before time as coordinated universal time (UTC).</param>
            <param name="notOnOrAfter">The not on or after time as coordinated universal time (UTC).</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.Conditions.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new instance of the <c>Conditions</c> class.
            </summary>
            <remarks>
            The not before time is calculated as the current UTC time less the time span.
            The not on or after time is calculated as the current UTC time plus the time span.
            </remarks>
            <param name="timeSpan">The timespan before and after now.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.Conditions.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <c>Conditions</c> class from XML.
            </summary>
            <param name="xmlElement">The conditions XML.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentSpace.SAML2.Assertions.Conditions.NotBefore">
            <summary>
            Gets or sets the not before time. 
            </summary>
            <value>
            The not before time as coordinated universal time (UTC).
            A value of DateTime.MinValue indicates the value has not been set.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Assertions.Conditions.NotOnOrAfter">
            <summary>
            Gets or sets the not on or after time. 
            </summary>
            <value>
            The not on or after time as coordinated universal time (UTC). 
            A value of DateTime.MaxValue indicates the value has not been set.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Assertions.Conditions.ConditionsList">
            <summary>
            Gets or sets the list of conditions. 
            </summary>
            <value>
            The list of conditions.
            </value>
            <seealso cref="T:ComponentSpace.SAML2.Assertions.AudienceRestriction"/>
            <seealso cref="T:ComponentSpace.SAML2.Assertions.OneTimeUse"/>
            <seealso cref="T:ComponentSpace.SAML2.Assertions.ProxyRestriction"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.Conditions.IsWithinTimePeriod">
            <summary>
            Indicates whether the current UTC time is within the not before 
            and not on or after period, if specified.
            </summary>
            <remarks>
            To be within the time period, not before &lt; UTC now &lt;= not on or after
            </remarks>
            <returns><c>true</c> if within the time period; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.Conditions.IsWithinTimePeriod(System.TimeSpan)">
            <summary>
            Indicates whether the current UTC time is within the not before 
            and not on or after period, if specified. The supplied time span is to
            allow for clock skew.
            </summary>
            <remarks>
            To be within the time period, 
            not before - clock skew &lt; UTC now &lt;= not on or after + clock skew
            </remarks>
            <param name="clockSkew">The time span to allow for clock skew.</param>
            <returns><c>true</c> if within the time period; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.Conditions.ToXml(System.Xml.XmlDocument)">
            <summary>
            Serializes the conditions to XML.
            </summary>
            <param name="xmlDocument">The owning XML document.</param>
            <returns>The conditions as XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="T:ComponentSpace.SAML2.Assertions.EncryptedAssertion">
            <summary>
            Represents an encrypted assertion.
            </summary>
            <remarks>
            Refer to the Assertions and Protocol for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.EncryptedAssertion.IsValid(System.Xml.XmlElement)">
            <summary>
            Indicates whether the XML is an encrypted assertion.
            </summary>
            <param name="xmlElement">The XML to test.</param>
            <returns><c>true</c> if the XML is an encrypted assertion; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.EncryptedAssertion.#ctor">
            <summary>
            Initializes a new instance of the <c>EncryptedAssertion</c> class.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.EncryptedAssertion.#ctor(System.Xml.XmlElement,System.Xml.XmlNodeList)">
            <summary>
            Initializes a new instance of the <c>EncryptedAssertion</c> class.
            </summary>
            <param name="encryptedData">The encrypted data.</param>
            <param name="encryptedKeys">The encrypted keys.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.EncryptedAssertion.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <c>EncryptedAssertion</c> class from XML.
            </summary>
            <param name="xmlElement">The encrypted assertion XML.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.EncryptedAssertion.#ctor(System.Xml.XmlElement,System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.Xml.KeyInfo)">
            <summary>
            Initializes a new instance of the <c>EncryptedAssertion</c> class from a SAML assertion XML.
            </summary>
            <remarks>
            A random symmetric session key is generated from the public asymmetric key.
            The symmetric key is used to encrypt the data.
            <para>
            The encryption method for the encrypted symmetric key is http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p.
            </para>
            <para>
            The encryption method for the data is http://www.w3.org/2001/04/xmlenc#aes256-cbc.
            </para>
            </remarks>
            <param name="samlAssertion">The SAML assertion XML.</param>
            <param name="keyEncryptingKey">The asymmetric key encrypting key.</param>
            <param name="keyInfo">The key info to include with the encrypted data.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLEncryptionException">
            Thrown when the encryption fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.EncryptedAssertion.#ctor(System.Xml.XmlElement,System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.KeyInfo)">
            <summary>
            Initializes a new instance of the <c>EncryptedAssertion</c> class from a SAML assertion XML.
            </summary>
            <remarks>
            A random symmetric session key is generated from the public asymmetric key.
            The symmetric key is used to encrypt the data.
            <para>
            The encryption method for the encrypted symmetric key is http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p.
            </para>
            <para>
            The specified data encryption method is used. For example, http://www.w3.org/2001/04/xmlenc#aes256-cbc.
            </para>
            <para>
            The supported data encryption methods are: 
            <list type="bullet">
            <item>http://www.w3.org/2001/04/xmlenc#tripledes-cbc</item>
            <item>http://www.w3.org/2001/04/xmlenc#kw-tripledes</item>
            <item>http://www.w3.org/2001/04/xmlenc#aes128-cbc</item>
            <item>http://www.w3.org/2001/04/xmlenc#kw-aes128</item>
            <item>http://www.w3.org/2001/04/xmlenc#aes192-cbc</item>
            <item>http://www.w3.org/2001/04/xmlenc#kw-aes192</item>
            <item>http://www.w3.org/2001/04/xmlenc#aes256-cbc</item>
            <item>http://www.w3.org/2001/04/xmlenc#kw-aes256</item>
            </list>
            </para>
            </remarks>
            <param name="samlAssertion">The SAML assertion XML.</param>
            <param name="keyEncryptingKey">The asymmetric key encrypting key.</param>
            <param name="dataEncryptionMethod">The method for encrypting the data.</param>
            <param name="keyInfo">The key info to include with the encrypted data.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLEncryptionException">
            Thrown when the encryption fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.EncryptedAssertion.#ctor(System.Xml.XmlElement,System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.KeyInfo)">
            <summary>
            Initializes a new instance of the <c>EncryptedAssertion</c> class from a SAML assertion XML.
            </summary>
            <remarks>
            A random symmetric session key is generated from the public asymmetric key.
            The symmetric key is used to encrypt the data.
            <para>
            The specified key encryption method is used. For example, http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p.
            </para>
            <para>
            The specified data encryption method is used. For example, http://www.w3.org/2001/04/xmlenc#aes256-cbc.
            </para>
            <para>
            The supported key encryption methods are: 
            <list type="bullet">
            <item>http://www.w3.org/2001/04/xmlenc#rsa-1_5</item>
            <item>http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p</item>
            </list>
            </para>
            <para>
            The supported data encryption methods are: 
            <list type="bullet">
            <item>http://www.w3.org/2001/04/xmlenc#tripledes-cbc</item>
            <item>http://www.w3.org/2001/04/xmlenc#kw-tripledes</item>
            <item>http://www.w3.org/2001/04/xmlenc#aes128-cbc</item>
            <item>http://www.w3.org/2001/04/xmlenc#kw-aes128</item>
            <item>http://www.w3.org/2001/04/xmlenc#aes192-cbc</item>
            <item>http://www.w3.org/2001/04/xmlenc#kw-aes192</item>
            <item>http://www.w3.org/2001/04/xmlenc#aes256-cbc</item>
            <item>http://www.w3.org/2001/04/xmlenc#kw-aes256</item>
            </list>
            </para>
            </remarks>
            <param name="samlAssertion">The SAML assertion XML.</param>
            <param name="keyEncryptingKey">The asymmetric key encrypting key.</param>
            <param name="keyEncryptionMethod">The method for encrypting the symmetric key (http://www.w3.org/2001/04/xmlenc#rsa-1_5 or http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p).</param>
            <param name="dataEncryptionMethod">The method for encrypting the data.</param>
            <param name="keyInfo">The key info to include with the encrypted data.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLEncryptionException">
            Thrown when the encryption fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.EncryptedAssertion.#ctor(System.Xml.XmlElement,System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Initializes a new instance of the <c>EncryptedAssertion</c> class from a SAML assertion XML.
            </summary>
            <remarks>
            A random symmetric session key is generated from the public key contained within the X.509 certificate.
            The symmetric key is used to encrypt the data.
            <para>
            The encryption method for the encrypted symmetric key is http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p.
            </para>
            <para>
            The encryption method for the data is http://www.w3.org/2001/04/xmlenc#aes256-cbc.
            </para>
            </remarks>
            <param name="samlAssertion">The SAML assertion XML.</param>
            <param name="x509Certificate">The X.509 certificate used when encrypting the data.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLEncryptionException">
            Thrown when the encryption fails.
            </exception>
            <seealso cref="M:ComponentSpace.SAML2.Assertions.EncryptedAssertion.Decrypt(System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.EncryptionMethod)"/>
            <seealso cref="M:ComponentSpace.SAML2.Assertions.EncryptedAssertion.Decrypt(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.EncryptionMethod)"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.EncryptedAssertion.#ctor(System.Xml.XmlElement,System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.Xml.EncryptionMethod)">
            <summary>
            Initializes a new instance of the <c>EncryptedAssertion</c> class from a SAML assertion XML.
            </summary>
            <remarks>
            A random symmetric session key is generated from the public key contained within the X.509 certificate.
            The symmetric key is used to encrypt the data.
            <para>
            The encryption method for the encrypted symmetric key is http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p.
            </para>
            <para>
            The specified data encryption method is used. For example, http://www.w3.org/2001/04/xmlenc#aes256-cbc.
            </para>
            <para>
            The supported data encryption methods are: 
            <list type="bullet">
            <item>http://www.w3.org/2001/04/xmlenc#tripledes-cbc</item>
            <item>http://www.w3.org/2001/04/xmlenc#kw-tripledes</item>
            <item>http://www.w3.org/2001/04/xmlenc#aes128-cbc</item>
            <item>http://www.w3.org/2001/04/xmlenc#kw-aes128</item>
            <item>http://www.w3.org/2001/04/xmlenc#aes192-cbc</item>
            <item>http://www.w3.org/2001/04/xmlenc#kw-aes192</item>
            <item>http://www.w3.org/2001/04/xmlenc#aes256-cbc</item>
            <item>http://www.w3.org/2001/04/xmlenc#kw-aes256</item>
            </list>
            </para>
            </remarks>
            <param name="samlAssertion">The SAML assertion XML.</param>
            <param name="x509Certificate">The X.509 certificate used when encrypting the data.</param>
            <param name="dataEncryptionMethod">The method for encrypting the data.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLEncryptionException">
            Thrown when the encryption fails.
            </exception>
            <seealso cref="M:ComponentSpace.SAML2.Assertions.EncryptedAssertion.Decrypt(System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.EncryptionMethod)"/>
            <seealso cref="M:ComponentSpace.SAML2.Assertions.EncryptedAssertion.Decrypt(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.EncryptionMethod)"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.EncryptedAssertion.#ctor(System.Xml.XmlElement,System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.EncryptionMethod)">
            <summary>
            Initializes a new instance of the <c>EncryptedAssertion</c> class from a SAML assertion XML.
            </summary>
            <remarks>
            A random symmetric session key is generated from the public key contained within the X.509 certificate.
            The symmetric key is used to encrypt the data.
            <para>
            The specified key encryption method is used. For example, http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p.
            </para>
            <para>
            The specified data encryption method is used. For example, http://www.w3.org/2001/04/xmlenc#aes256-cbc.
            </para>
            <para>
            The supported key encryption methods are: 
            <list type="bullet">
            <item>http://www.w3.org/2001/04/xmlenc#rsa-1_5</item>
            <item>http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p</item>
            </list>
            </para>
            <para>
            The supported data encryption methods are: 
            <list type="bullet">
            <item>http://www.w3.org/2001/04/xmlenc#tripledes-cbc</item>
            <item>http://www.w3.org/2001/04/xmlenc#kw-tripledes</item>
            <item>http://www.w3.org/2001/04/xmlenc#aes128-cbc</item>
            <item>http://www.w3.org/2001/04/xmlenc#kw-aes128</item>
            <item>http://www.w3.org/2001/04/xmlenc#aes192-cbc</item>
            <item>http://www.w3.org/2001/04/xmlenc#kw-aes192</item>
            <item>http://www.w3.org/2001/04/xmlenc#aes256-cbc</item>
            <item>http://www.w3.org/2001/04/xmlenc#kw-aes256</item>
            </list>
            </para>
            </remarks>
            <param name="samlAssertion">The SAML assertion XML.</param>
            <param name="x509Certificate">The X.509 certificate used when encrypting the data.</param>
            <param name="keyEncryptionMethod">The method for encrypting the symmetric key (http://www.w3.org/2001/04/xmlenc#rsa-1_5 or http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p).</param>
            <param name="dataEncryptionMethod">The method for encrypting the data.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLEncryptionException">
            Thrown when the encryption fails.
            </exception>
            <seealso cref="M:ComponentSpace.SAML2.Assertions.EncryptedAssertion.Decrypt(System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.EncryptionMethod)"/>
            <seealso cref="M:ComponentSpace.SAML2.Assertions.EncryptedAssertion.Decrypt(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.EncryptionMethod)"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.EncryptedAssertion.#ctor(ComponentSpace.SAML2.Assertions.SAMLAssertion,System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.Xml.KeyInfo)">
            <summary>
            Initializes a new instance of the <c>EncryptedAssertion</c> class from a SAML assertion.
            </summary>
            <remarks>
            A random symmetric session key is generated from the public asymmetric key.
            The symmetric key is used to encrypt the data.
            <para>
            The encryption method for the encrypted symmetric key is http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p.
            </para>
            <para>
            The encryption method for the data is http://www.w3.org/2001/04/xmlenc#aes256-cbc.
            </para>
            </remarks>
            <param name="samlAssertion">The SAML assertion.</param>
            <param name="keyEncryptingKey">The asymmetric key encrypting key.</param>
            <param name="keyInfo">The key info to include with the encrypted data.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLEncryptionException">
            Thrown when the encryption fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.EncryptedAssertion.#ctor(ComponentSpace.SAML2.Assertions.SAMLAssertion,System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.KeyInfo)">
            <summary>
            Initializes a new instance of the <c>EncryptedAssertion</c> class from a SAML assertion.
            </summary>
            <remarks>
            A random symmetric session key is generated from the public asymmetric key.
            The symmetric key is used to encrypt the data.
            <para>
            The encryption method for the encrypted symmetric key is http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p.
            </para>
            <para>
            The specified data encryption method is used. For example, http://www.w3.org/2001/04/xmlenc#aes256-cbc.
            </para>
            <para>
            The supported data encryption methods are: 
            <list type="bullet">
            <item>http://www.w3.org/2001/04/xmlenc#tripledes-cbc</item>
            <item>http://www.w3.org/2001/04/xmlenc#kw-tripledes</item>
            <item>http://www.w3.org/2001/04/xmlenc#aes128-cbc</item>
            <item>http://www.w3.org/2001/04/xmlenc#kw-aes128</item>
            <item>http://www.w3.org/2001/04/xmlenc#aes192-cbc</item>
            <item>http://www.w3.org/2001/04/xmlenc#kw-aes192</item>
            <item>http://www.w3.org/2001/04/xmlenc#aes256-cbc</item>
            <item>http://www.w3.org/2001/04/xmlenc#kw-aes256</item>
            </list>
            </para>
            </remarks>
            <param name="samlAssertion">The SAML assertion.</param>
            <param name="keyEncryptingKey">The asymmetric key encrypting key.</param>
            <param name="dataEncryptionMethod">The method for encrypting the data.</param>
            <param name="keyInfo">The key info to include with the encrypted data.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLEncryptionException">
            Thrown when the encryption fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.EncryptedAssertion.#ctor(ComponentSpace.SAML2.Assertions.SAMLAssertion,System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.KeyInfo)">
            <summary>
            Initializes a new instance of the <c>EncryptedAssertion</c> class from a SAML assertion.
            </summary>
            <remarks>
            A random symmetric session key is generated from the public asymmetric key.
            The symmetric key is used to encrypt the data.
            <para>
            The specified key encryption method is used. For example, http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p.
            </para>
            <para>
            The specified data encryption method is used. For example, http://www.w3.org/2001/04/xmlenc#aes256-cbc.
            </para>
            <para>
            The supported key encryption methods are: 
            <list type="bullet">
            <item>http://www.w3.org/2001/04/xmlenc#rsa-1_5</item>
            <item>http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p</item>
            </list>
            </para>
            <para>
            The supported data encryption methods are: 
            <list type="bullet">
            <item>http://www.w3.org/2001/04/xmlenc#tripledes-cbc</item>
            <item>http://www.w3.org/2001/04/xmlenc#kw-tripledes</item>
            <item>http://www.w3.org/2001/04/xmlenc#aes128-cbc</item>
            <item>http://www.w3.org/2001/04/xmlenc#kw-aes128</item>
            <item>http://www.w3.org/2001/04/xmlenc#aes192-cbc</item>
            <item>http://www.w3.org/2001/04/xmlenc#kw-aes192</item>
            <item>http://www.w3.org/2001/04/xmlenc#aes256-cbc</item>
            <item>http://www.w3.org/2001/04/xmlenc#kw-aes256</item>
            </list>
            </para>
            </remarks>
            <param name="samlAssertion">The SAML assertion.</param>
            <param name="keyEncryptingKey">The asymmetric key encrypting key.</param>
            <param name="keyEncryptionMethod">The method for encrypting the symmetric key (http://www.w3.org/2001/04/xmlenc#rsa-1_5 or http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p).</param>
            <param name="dataEncryptionMethod">The method for encrypting the data.</param>
            <param name="keyInfo">The key info to include with the encrypted data.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLEncryptionException">
            Thrown when the encryption fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.EncryptedAssertion.#ctor(ComponentSpace.SAML2.Assertions.SAMLAssertion,System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Initializes a new instance of the <c>EncryptedAssertion</c> class from a SAML assertion.
            </summary>
            <remarks>
            A random symmetric session key is generated from the public key contained within the X.509 certificate.
            The symmetric key is used to encrypt the data.
            <para>
            The encryption method for the encrypted symmetric key is http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p.
            </para>
            <para>
            The encryption method for the data is http://www.w3.org/2001/04/xmlenc#aes256-cbc.
            </para>
            </remarks>
            <param name="samlAssertion">The SAML assertion.</param>
            <param name="x509Certificate">The X.509 certificate used when encrypting the data.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLEncryptionException">
            Thrown when the encryption fails.
            </exception>
            <seealso cref="M:ComponentSpace.SAML2.Assertions.EncryptedAssertion.Decrypt(System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.EncryptionMethod)"/>
            <seealso cref="M:ComponentSpace.SAML2.Assertions.EncryptedAssertion.Decrypt(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.EncryptionMethod)"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.EncryptedAssertion.#ctor(ComponentSpace.SAML2.Assertions.SAMLAssertion,System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.Xml.EncryptionMethod)">
            <summary>
            Initializes a new instance of the <c>EncryptedAssertion</c> class from a SAML assertion.
            </summary>
            <remarks>
            A random symmetric session key is generated from the public key contained within the X.509 certificate.
            The symmetric key is used to encrypt the data.
            <para>
            The encryption method for the encrypted symmetric key is http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p.
            </para>
            <para>
            The specified data encryption method is used. For example, http://www.w3.org/2001/04/xmlenc#aes256-cbc.
            </para>
            <para>
            The supported data encryption methods are: 
            <list type="bullet">
            <item>http://www.w3.org/2001/04/xmlenc#tripledes-cbc</item>
            <item>http://www.w3.org/2001/04/xmlenc#kw-tripledes</item>
            <item>http://www.w3.org/2001/04/xmlenc#aes128-cbc</item>
            <item>http://www.w3.org/2001/04/xmlenc#kw-aes128</item>
            <item>http://www.w3.org/2001/04/xmlenc#aes192-cbc</item>
            <item>http://www.w3.org/2001/04/xmlenc#kw-aes192</item>
            <item>http://www.w3.org/2001/04/xmlenc#aes256-cbc</item>
            <item>http://www.w3.org/2001/04/xmlenc#kw-aes256</item>
            </list>
            </para>
            </remarks>
            <param name="samlAssertion">The SAML assertion.</param>
            <param name="x509Certificate">The X.509 certificate used when encrypting the data.</param>
            <param name="dataEncryptionMethod">The method for encrypting the data.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLEncryptionException">
            Thrown when the encryption fails.
            </exception>
            <seealso cref="M:ComponentSpace.SAML2.Assertions.EncryptedAssertion.Decrypt(System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.EncryptionMethod)"/>
            <seealso cref="M:ComponentSpace.SAML2.Assertions.EncryptedAssertion.Decrypt(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.EncryptionMethod)"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.EncryptedAssertion.#ctor(ComponentSpace.SAML2.Assertions.SAMLAssertion,System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.EncryptionMethod)">
            <summary>
            Initializes a new instance of the <c>EncryptedAssertion</c> class from a SAML assertion.
            </summary>
            <remarks>
            A random symmetric session key is generated from the public key contained within the X.509 certificate.
            The symmetric key is used to encrypt the data.
            <para>
            The specified key encryption method is used. For example, http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p.
            </para>
            <para>
            The specified data encryption method is used. For example, http://www.w3.org/2001/04/xmlenc#aes256-cbc.
            </para>
            <para>
            The supported key encryption methods are: 
            <list type="bullet">
            <item>http://www.w3.org/2001/04/xmlenc#rsa-1_5</item>
            <item>http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p</item>
            </list>
            </para>
            <para>
            The supported data encryption methods are: 
            <list type="bullet">
            <item>http://www.w3.org/2001/04/xmlenc#tripledes-cbc</item>
            <item>http://www.w3.org/2001/04/xmlenc#kw-tripledes</item>
            <item>http://www.w3.org/2001/04/xmlenc#aes128-cbc</item>
            <item>http://www.w3.org/2001/04/xmlenc#kw-aes128</item>
            <item>http://www.w3.org/2001/04/xmlenc#aes192-cbc</item>
            <item>http://www.w3.org/2001/04/xmlenc#kw-aes192</item>
            <item>http://www.w3.org/2001/04/xmlenc#aes256-cbc</item>
            <item>http://www.w3.org/2001/04/xmlenc#kw-aes256</item>
            </list>
            </para>
            </remarks>
            <param name="samlAssertion">The SAML assertion.</param>
            <param name="x509Certificate">The X.509 certificate used when encrypting the data.</param>
            <param name="keyEncryptionMethod">The method for encrypting the symmetric key (http://www.w3.org/2001/04/xmlenc#rsa-1_5 or http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p).</param>
            <param name="dataEncryptionMethod">The method for encrypting the data.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLEncryptionException">
            Thrown when the encryption fails.
            </exception>
            <seealso cref="M:ComponentSpace.SAML2.Assertions.EncryptedAssertion.Decrypt(System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.EncryptionMethod)"/>
            <seealso cref="M:ComponentSpace.SAML2.Assertions.EncryptedAssertion.Decrypt(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.EncryptionMethod)"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.EncryptedAssertion.ToXml">
            <summary>
            Serializes the encrypted assertion to XML.
            </summary>
            <remarks>
            An XML document is created.
            </remarks>
            <returns>The encrypted assertion as XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.EncryptedAssertion.ToXml(System.Xml.XmlDocument)">
            <summary>
            Serializes the encrypted assertion to XML.
            </summary>
            <param name="xmlDocument">The owning XML document.</param>
            <returns>The encrypted assertion as XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.EncryptedAssertion.DecryptToXml(System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>
            Decrypts an encrypted assertion to XML.
            </summary>
            <remarks>
            The asymmetric key is used to decrypt the symmetric key contained within the encrypted data. The symmetric key is used
            to decrypt the data.
            <para>
            The encryption method for the encrypted symmetric key is expected to be 
            http://www.w3.org/2001/04/xmlenc#rsa-1_5 or http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p.
            </para>
            <para>
            The encryption method for the data is specified in the encrypted data.
            </para>
            <para>
            This method should be used if the assertion includes a signature to be verified.
            </para>
            <para>
            The supported key encryption methods are: 
            <list type="bullet">
            <item>http://www.w3.org/2001/04/xmlenc#rsa-1_5</item>
            <item>http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p</item>
            </list>
            </para>
            <para>
            The supported data encryption methods are: 
            <list type="bullet">
            <item>http://www.w3.org/2001/04/xmlenc#tripledes-cbc</item>
            <item>http://www.w3.org/2001/04/xmlenc#kw-tripledes</item>
            <item>http://www.w3.org/2001/04/xmlenc#aes128-cbc</item>
            <item>http://www.w3.org/2001/04/xmlenc#kw-aes128</item>
            <item>http://www.w3.org/2001/04/xmlenc#aes192-cbc</item>
            <item>http://www.w3.org/2001/04/xmlenc#kw-aes192</item>
            <item>http://www.w3.org/2001/04/xmlenc#aes256-cbc</item>
            <item>http://www.w3.org/2001/04/xmlenc#kw-aes256</item>
            </list>
            </para>
            </remarks>
            <param name="keyDecryptingKey">The asymmetric key decrypting key.</param>
            <returns>The SAML assertion XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLEncryptionException">
            Thrown when the decryption fails.
            </exception>
            <seealso cref="M:ComponentSpace.SAML2.Assertions.EncryptedAssertion.#ctor(ComponentSpace.SAML2.Assertions.SAMLAssertion,System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.EncryptionMethod)"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.EncryptedAssertion.DecryptToXml(System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.Xml.EncryptionMethod)">
            <summary>
            Decrypts an encrypted assertion to XML.
            </summary>
            <remarks>
            The asymmetric key is used to decrypt the symmetric key contained within the encrypted data. The symmetric key is used
            to decrypt the data.
            <para>
            The encryption method for the encrypted symmetric key is expected to be 
            http://www.w3.org/2001/04/xmlenc#rsa-1_5 or http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p.
            </para>
            <para>
            The encryption method for the data is specified in the encrypted data or may be explicitly specified.
            </para>
            <para>
            This method should be used if the assertion includes a signature to be verified.
            </para>
            <para>
            The supported key encryption methods are: 
            <list type="bullet">
            <item>http://www.w3.org/2001/04/xmlenc#rsa-1_5</item>
            <item>http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p</item>
            </list>
            </para>
            <para>
            The supported data encryption methods are: 
            <list type="bullet">
            <item>http://www.w3.org/2001/04/xmlenc#tripledes-cbc</item>
            <item>http://www.w3.org/2001/04/xmlenc#kw-tripledes</item>
            <item>http://www.w3.org/2001/04/xmlenc#aes128-cbc</item>
            <item>http://www.w3.org/2001/04/xmlenc#kw-aes128</item>
            <item>http://www.w3.org/2001/04/xmlenc#aes192-cbc</item>
            <item>http://www.w3.org/2001/04/xmlenc#kw-aes192</item>
            <item>http://www.w3.org/2001/04/xmlenc#aes256-cbc</item>
            <item>http://www.w3.org/2001/04/xmlenc#kw-aes256</item>
            </list>
            </para>
            </remarks>
            <param name="keyDecryptingKey">The asymmetric key decrypting key.</param>
            <param name="dataEncryptionMethod">The method for decrypting the data or <c>null</c> if specified in the encrypted data.</param>
            <returns>The SAML assertion XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLEncryptionException">
            Thrown when the decryption fails.
            </exception>
            <seealso cref="M:ComponentSpace.SAML2.Assertions.EncryptedAssertion.#ctor(ComponentSpace.SAML2.Assertions.SAMLAssertion,System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.EncryptionMethod)"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.EncryptedAssertion.DecryptToXml(System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.EncryptionMethod)">
            <summary>
            Decrypts an encrypted assertion to XML.
            </summary>
            <remarks>
            The asymmetric key is used to decrypt the symmetric key contained within the encrypted data. The symmetric key is used
            to decrypt the data.
            <para>
            The encryption method for the encrypted symmetric key is expected to be 
            http://www.w3.org/2001/04/xmlenc#rsa-1_5 or http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p.
            </para>
            <para>
            The encryption method for the key is specified in the encrypted data or may be explicitly specified.
            </para>
            <para>
            The encryption method for the data is specified in the encrypted data or may be explicitly specified.
            </para>
            <para>
            This method should be used if the assertion includes a signature to be verified.
            </para>
            <para>
            The supported key encryption methods are: 
            <list type="bullet">
            <item>http://www.w3.org/2001/04/xmlenc#rsa-1_5</item>
            <item>http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p</item>
            </list>
            </para>
            <para>
            The supported data encryption methods are: 
            <list type="bullet">
            <item>http://www.w3.org/2001/04/xmlenc#tripledes-cbc</item>
            <item>http://www.w3.org/2001/04/xmlenc#kw-tripledes</item>
            <item>http://www.w3.org/2001/04/xmlenc#aes128-cbc</item>
            <item>http://www.w3.org/2001/04/xmlenc#kw-aes128</item>
            <item>http://www.w3.org/2001/04/xmlenc#aes192-cbc</item>
            <item>http://www.w3.org/2001/04/xmlenc#kw-aes192</item>
            <item>http://www.w3.org/2001/04/xmlenc#aes256-cbc</item>
            <item>http://www.w3.org/2001/04/xmlenc#kw-aes256</item>
            </list>
            </para>
            </remarks>
            <param name="keyDecryptingKey">The asymmetric key decrypting key.</param>
            <param name="keyEncryptionMethod">The method for decrypting the symmetric key or <c>null</c> if specified in the encrypted key.</param>
            <param name="dataEncryptionMethod">The method for decrypting the data or <c>null</c> if specified in the encrypted data.</param>
            <returns>The SAML assertion XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLEncryptionException">
            Thrown when the decryption fails.
            </exception>
            <seealso cref="M:ComponentSpace.SAML2.Assertions.EncryptedAssertion.#ctor(ComponentSpace.SAML2.Assertions.SAMLAssertion,System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.EncryptionMethod)"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.EncryptedAssertion.DecryptToXml(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Decrypts an encrypted assertion to XML.
            </summary>
            <remarks>
            The X.509 certificate's private key is used to decrypt the symmetric key contained within the encrypted data. The symmetric key is used
            to decrypt the data.
            <para>
            The encryption method for the encrypted symmetric key is expected to be 
            http://www.w3.org/2001/04/xmlenc#rsa-1_5 or http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p.
            </para>
            <para>
            The encryption method for the data is specified in the encrypted data.
            </para>
            <para>
            This method should be used if the assertion includes a signature to be verified.
            </para>
            <para>
            The supported key encryption methods are: 
            <list type="bullet">
            <item>http://www.w3.org/2001/04/xmlenc#rsa-1_5</item>
            <item>http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p</item>
            </list>
            </para>
            <para>
            The supported data encryption methods are: 
            <list type="bullet">
            <item>http://www.w3.org/2001/04/xmlenc#tripledes-cbc</item>
            <item>http://www.w3.org/2001/04/xmlenc#kw-tripledes</item>
            <item>http://www.w3.org/2001/04/xmlenc#aes128-cbc</item>
            <item>http://www.w3.org/2001/04/xmlenc#kw-aes128</item>
            <item>http://www.w3.org/2001/04/xmlenc#aes192-cbc</item>
            <item>http://www.w3.org/2001/04/xmlenc#kw-aes192</item>
            <item>http://www.w3.org/2001/04/xmlenc#aes256-cbc</item>
            <item>http://www.w3.org/2001/04/xmlenc#kw-aes256</item>
            </list>
            </para>
            </remarks>
            <param name="x509Certificate">The X.509 certificate containing a private key.</param>
            <returns>The SAML assertion XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLEncryptionException">
            Thrown when the decryption fails.
            </exception>
            <seealso cref="M:ComponentSpace.SAML2.Assertions.EncryptedAssertion.#ctor(ComponentSpace.SAML2.Assertions.SAMLAssertion,System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.EncryptionMethod)"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.EncryptedAssertion.DecryptToXml(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.Xml.EncryptionMethod)">
            <summary>
            Decrypts an encrypted assertion to XML.
            </summary>
            <remarks>
            The X.509 certificate's private key is used to decrypt the symmetric key contained within the encrypted data. The symmetric key is used
            to decrypt the data.
            <para>
            The encryption method for the encrypted symmetric key is expected to be 
            http://www.w3.org/2001/04/xmlenc#rsa-1_5 or http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p.
            </para>
            <para>
            The encryption method for the data is specified in the encrypted data or may be explicitly specified.
            </para>
            <para>
            This method should be used if the assertion includes a signature to be verified.
            </para>
            <para>
            The supported key encryption methods are: 
            <list type="bullet">
            <item>http://www.w3.org/2001/04/xmlenc#rsa-1_5</item>
            <item>http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p</item>
            </list>
            </para>
            <para>
            The supported data encryption methods are: 
            <list type="bullet">
            <item>http://www.w3.org/2001/04/xmlenc#tripledes-cbc</item>
            <item>http://www.w3.org/2001/04/xmlenc#kw-tripledes</item>
            <item>http://www.w3.org/2001/04/xmlenc#aes128-cbc</item>
            <item>http://www.w3.org/2001/04/xmlenc#kw-aes128</item>
            <item>http://www.w3.org/2001/04/xmlenc#aes192-cbc</item>
            <item>http://www.w3.org/2001/04/xmlenc#kw-aes192</item>
            <item>http://www.w3.org/2001/04/xmlenc#aes256-cbc</item>
            <item>http://www.w3.org/2001/04/xmlenc#kw-aes256</item>
            </list>
            </para>
            </remarks>
            <param name="x509Certificate">The X.509 certificate containing a private key.</param>
            <param name="dataEncryptionMethod">The method for decrypting the data or <c>null</c> if specified in the encrypted data.</param>
            <returns>The SAML assertion XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLEncryptionException">
            Thrown when the decryption fails.
            </exception>
            <seealso cref="M:ComponentSpace.SAML2.Assertions.EncryptedAssertion.#ctor(ComponentSpace.SAML2.Assertions.SAMLAssertion,System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.EncryptionMethod)"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.EncryptedAssertion.DecryptToXml(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.EncryptionMethod)">
            <summary>
            Decrypts an encrypted assertion to XML.
            </summary>
            <remarks>
            The X.509 certificate's private key is used to decrypt the symmetric key contained within the encrypted data. The symmetric key is used
            to decrypt the data.
            <para>
            The encryption method for the encrypted symmetric key is expected to be 
            http://www.w3.org/2001/04/xmlenc#rsa-1_5 or http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p.
            </para>
            <para>
            The encryption method for the key is specified in the encrypted data or may be explicitly specified.
            </para>
            <para>
            The encryption method for the data is specified in the encrypted data or may be explicitly specified.
            </para>
            <para>
            This method should be used if the assertion includes a signature to be verified.
            </para>
            <para>
            The supported key encryption methods are: 
            <list type="bullet">
            <item>http://www.w3.org/2001/04/xmlenc#rsa-1_5</item>
            <item>http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p</item>
            </list>
            </para>
            <para>
            The supported data encryption methods are: 
            <list type="bullet">
            <item>http://www.w3.org/2001/04/xmlenc#tripledes-cbc</item>
            <item>http://www.w3.org/2001/04/xmlenc#kw-tripledes</item>
            <item>http://www.w3.org/2001/04/xmlenc#aes128-cbc</item>
            <item>http://www.w3.org/2001/04/xmlenc#kw-aes128</item>
            <item>http://www.w3.org/2001/04/xmlenc#aes192-cbc</item>
            <item>http://www.w3.org/2001/04/xmlenc#kw-aes192</item>
            <item>http://www.w3.org/2001/04/xmlenc#aes256-cbc</item>
            <item>http://www.w3.org/2001/04/xmlenc#kw-aes256</item>
            </list>
            </para>
            </remarks>
            <param name="x509Certificate">The X.509 certificate containing a private key.</param>
            <param name="keyEncryptionMethod">The method for decrypting the symmetric key or <c>null</c> if specified in the encrypted key.</param>
            <param name="dataEncryptionMethod">The method for decrypting the data or <c>null</c> if specified in the encrypted data.</param>
            <returns>The SAML assertion XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLEncryptionException">
            Thrown when the decryption fails.
            </exception>
            <seealso cref="M:ComponentSpace.SAML2.Assertions.EncryptedAssertion.#ctor(ComponentSpace.SAML2.Assertions.SAMLAssertion,System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.EncryptionMethod)"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.EncryptedAssertion.Decrypt(System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>
            Decrypts an encrypted assertion.
            </summary>
            <remarks>
            The asymmetric key is used to decrypt the symmetric key contained within the encrypted data. The symmetric key is used
            to decrypt the data.
            <para>
            The encryption method for the encrypted symmetric key is expected to be 
            http://www.w3.org/2001/04/xmlenc#rsa-1_5 or http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p.
            </para>
            <para>
            The encryption method for the data is specified in the encrypted data.
            </para>
            <para>
            <c>DecryptToXml</c> should be used if the assertion includes a signature to be verified.
            </para>
            <para>
            The supported key encryption methods are: 
            <list type="bullet">
            <item>http://www.w3.org/2001/04/xmlenc#rsa-1_5</item>
            <item>http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p</item>
            </list>
            </para>
            <para>
            The supported data encryption methods are: 
            <list type="bullet">
            <item>http://www.w3.org/2001/04/xmlenc#tripledes-cbc</item>
            <item>http://www.w3.org/2001/04/xmlenc#kw-tripledes</item>
            <item>http://www.w3.org/2001/04/xmlenc#aes128-cbc</item>
            <item>http://www.w3.org/2001/04/xmlenc#kw-aes128</item>
            <item>http://www.w3.org/2001/04/xmlenc#aes192-cbc</item>
            <item>http://www.w3.org/2001/04/xmlenc#kw-aes192</item>
            <item>http://www.w3.org/2001/04/xmlenc#aes256-cbc</item>
            <item>http://www.w3.org/2001/04/xmlenc#kw-aes256</item>
            </list>
            </para>
            </remarks>
            <param name="keyDecryptingKey">The asymmetric key decrypting key.</param>
            <returns>The SAML assertion.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLEncryptionException">
            Thrown when the decryption fails.
            </exception>
            <seealso cref="M:ComponentSpace.SAML2.Assertions.EncryptedAssertion.#ctor(ComponentSpace.SAML2.Assertions.SAMLAssertion,System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.EncryptionMethod)"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.EncryptedAssertion.Decrypt(System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.Xml.EncryptionMethod)">
            <summary>
            Decrypts an encrypted assertion.
            </summary>
            <remarks>
            The asymmetric key is used to decrypt the symmetric key contained within the encrypted data. The symmetric key is used
            to decrypt the data.
            <para>
            The encryption method for the encrypted symmetric key is expected to be 
            http://www.w3.org/2001/04/xmlenc#rsa-1_5 or http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p.
            </para>
            <para>
            The encryption method for the data is specified in the encrypted data or may be explicitly specified.
            </para>
            <para>
            <c>DecryptToXml</c> should be used if the assertion includes a signature to be verified.
            </para>
            <para>
            The supported key encryption methods are: 
            <list type="bullet">
            <item>http://www.w3.org/2001/04/xmlenc#rsa-1_5</item>
            <item>http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p</item>
            </list>
            </para>
            <para>
            The supported data encryption methods are: 
            <list type="bullet">
            <item>http://www.w3.org/2001/04/xmlenc#tripledes-cbc</item>
            <item>http://www.w3.org/2001/04/xmlenc#kw-tripledes</item>
            <item>http://www.w3.org/2001/04/xmlenc#aes128-cbc</item>
            <item>http://www.w3.org/2001/04/xmlenc#kw-aes128</item>
            <item>http://www.w3.org/2001/04/xmlenc#aes192-cbc</item>
            <item>http://www.w3.org/2001/04/xmlenc#kw-aes192</item>
            <item>http://www.w3.org/2001/04/xmlenc#aes256-cbc</item>
            <item>http://www.w3.org/2001/04/xmlenc#kw-aes256</item>
            </list>
            </para>
            </remarks>
            <param name="keyDecryptingKey">The asymmetric key decrypting key.</param>
            <param name="dataEncryptionMethod">The method for decrypting the data or <c>null</c> if specified in the encrypted data.</param>
            <returns>The SAML assertion.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLEncryptionException">
            Thrown when the decryption fails.
            </exception>
            <seealso cref="M:ComponentSpace.SAML2.Assertions.EncryptedAssertion.#ctor(ComponentSpace.SAML2.Assertions.SAMLAssertion,System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.EncryptionMethod)"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.EncryptedAssertion.Decrypt(System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.EncryptionMethod)">
            <summary>
            Decrypts an encrypted assertion.
            </summary>
            <remarks>
            The asymmetric key is used to decrypt the symmetric key contained within the encrypted data. The symmetric key is used
            to decrypt the data.
            <para>
            The encryption method for the encrypted symmetric key is expected to be 
            http://www.w3.org/2001/04/xmlenc#rsa-1_5 or http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p.
            </para>
            <para>
            The encryption method for the key is specified in the encrypted data or may be explicitly specified.
            </para>
            <para>
            The encryption method for the data is specified in the encrypted data or may be explicitly specified.
            </para>
            <para>
            <c>DecryptToXml</c> should be used if the assertion includes a signature to be verified.
            </para>
            <para>
            The supported key encryption methods are: 
            <list type="bullet">
            <item>http://www.w3.org/2001/04/xmlenc#rsa-1_5</item>
            <item>http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p</item>
            </list>
            </para>
            <para>
            The supported data encryption methods are: 
            <list type="bullet">
            <item>http://www.w3.org/2001/04/xmlenc#tripledes-cbc</item>
            <item>http://www.w3.org/2001/04/xmlenc#kw-tripledes</item>
            <item>http://www.w3.org/2001/04/xmlenc#aes128-cbc</item>
            <item>http://www.w3.org/2001/04/xmlenc#kw-aes128</item>
            <item>http://www.w3.org/2001/04/xmlenc#aes192-cbc</item>
            <item>http://www.w3.org/2001/04/xmlenc#kw-aes192</item>
            <item>http://www.w3.org/2001/04/xmlenc#aes256-cbc</item>
            <item>http://www.w3.org/2001/04/xmlenc#kw-aes256</item>
            </list>
            </para>
            </remarks>
            <param name="keyDecryptingKey">The asymmetric key decrypting key.</param>
            <param name="keyEncryptionMethod">The method for decrypting the symmetric key or <c>null</c> if specified in the encrypted key.</param>
            <param name="dataEncryptionMethod">The method for decrypting the data or <c>null</c> if specified in the encrypted data.</param>
            <returns>The SAML assertion.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLEncryptionException">
            Thrown when the decryption fails.
            </exception>
            <seealso cref="M:ComponentSpace.SAML2.Assertions.EncryptedAssertion.#ctor(ComponentSpace.SAML2.Assertions.SAMLAssertion,System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.EncryptionMethod)"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.EncryptedAssertion.Decrypt(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Decrypts an encrypted assertion.
            </summary>
            <remarks>
            The X.509 certificate's private key is used to decrypt the symmetric key contained within the encrypted data. The symmetric key is used
            to decrypt the data.
            <para>
            The encryption method for the encrypted symmetric key is expected to be 
            http://www.w3.org/2001/04/xmlenc#rsa-1_5 or http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p.
            </para>
            <para>
            The encryption method for the data is specified in the encrypted data.
            </para>
            <para>
            <c>DecryptToXml</c> should be used if the assertion includes a signature to be verified.
            </para>
            <para>
            The supported key encryption methods are: 
            <list type="bullet">
            <item>http://www.w3.org/2001/04/xmlenc#rsa-1_5</item>
            <item>http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p</item>
            </list>
            </para>
            <para>
            The supported data encryption methods are: 
            <list type="bullet">
            <item>http://www.w3.org/2001/04/xmlenc#tripledes-cbc</item>
            <item>http://www.w3.org/2001/04/xmlenc#kw-tripledes</item>
            <item>http://www.w3.org/2001/04/xmlenc#aes128-cbc</item>
            <item>http://www.w3.org/2001/04/xmlenc#kw-aes128</item>
            <item>http://www.w3.org/2001/04/xmlenc#aes192-cbc</item>
            <item>http://www.w3.org/2001/04/xmlenc#kw-aes192</item>
            <item>http://www.w3.org/2001/04/xmlenc#aes256-cbc</item>
            <item>http://www.w3.org/2001/04/xmlenc#kw-aes256</item>
            </list>
            </para>
            </remarks>
            <param name="x509Certificate">The X.509 certificate containing a private key.</param>
            <returns>The SAML assertion.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLEncryptionException">
            Thrown when the decryption fails.
            </exception>
            <seealso cref="M:ComponentSpace.SAML2.Assertions.EncryptedAssertion.#ctor(ComponentSpace.SAML2.Assertions.SAMLAssertion,System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.Xml.EncryptionMethod)"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.EncryptedAssertion.Decrypt(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.Xml.EncryptionMethod)">
            <summary>
            Decrypts an encrypted assertion.
            </summary>
            <remarks>
            The X.509 certificate's private key is used to decrypt the symmetric key contained within the encrypted data. The symmetric key is used
            to decrypt the data.
            <para>
            The encryption method for the encrypted symmetric key is expected to be 
            http://www.w3.org/2001/04/xmlenc#rsa-1_5 or http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p.
            </para>
            <para>
            The encryption method for the data is specified in the encrypted data or may be explicitly specified.
            </para>
            <para>
            <c>DecryptToXml</c> should be used if the assertion includes a signature to be verified.
            </para>
            <para>
            The supported key encryption methods are: 
            <list type="bullet">
            <item>http://www.w3.org/2001/04/xmlenc#rsa-1_5</item>
            <item>http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p</item>
            </list>
            </para>
            <para>
            The supported data encryption methods are: 
            <list type="bullet">
            <item>http://www.w3.org/2001/04/xmlenc#tripledes-cbc</item>
            <item>http://www.w3.org/2001/04/xmlenc#kw-tripledes</item>
            <item>http://www.w3.org/2001/04/xmlenc#aes128-cbc</item>
            <item>http://www.w3.org/2001/04/xmlenc#kw-aes128</item>
            <item>http://www.w3.org/2001/04/xmlenc#aes192-cbc</item>
            <item>http://www.w3.org/2001/04/xmlenc#kw-aes192</item>
            <item>http://www.w3.org/2001/04/xmlenc#aes256-cbc</item>
            <item>http://www.w3.org/2001/04/xmlenc#kw-aes256</item>
            </list>
            </para>
            </remarks>
            <param name="x509Certificate">The X.509 certificate containing a private key.</param>
            <param name="dataEncryptionMethod">The method for decrypting the data or <c>null</c> if specified in the encrypted data.</param>
            <returns>The SAML assertion.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLEncryptionException">
            Thrown when the decryption fails.
            </exception>
            <seealso cref="M:ComponentSpace.SAML2.Assertions.EncryptedAssertion.#ctor(ComponentSpace.SAML2.Assertions.SAMLAssertion,System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.Xml.EncryptionMethod)"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.EncryptedAssertion.Decrypt(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.EncryptionMethod)">
            <summary>
            Decrypts an encrypted assertion.
            </summary>
            <remarks>
            The X.509 certificate's private key is used to decrypt the symmetric key contained within the encrypted data. The symmetric key is used
            to decrypt the data.
            <para>
            The encryption method for the encrypted symmetric key is expected to be 
            http://www.w3.org/2001/04/xmlenc#rsa-1_5 or http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p.
            </para>
            <para>
            The encryption method for the key is specified in the encrypted data or may be explicitly specified.
            </para>
            <para>
            The encryption method for the data is specified in the encrypted data or may be explicitly specified.
            </para>
            <para>
            <c>DecryptToXml</c> should be used if the assertion includes a signature to be verified.
            </para>
            <para>
            The supported key encryption methods are: 
            <list type="bullet">
            <item>http://www.w3.org/2001/04/xmlenc#rsa-1_5</item>
            <item>http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p</item>
            </list>
            </para>
            <para>
            The supported data encryption methods are: 
            <list type="bullet">
            <item>http://www.w3.org/2001/04/xmlenc#tripledes-cbc</item>
            <item>http://www.w3.org/2001/04/xmlenc#kw-tripledes</item>
            <item>http://www.w3.org/2001/04/xmlenc#aes128-cbc</item>
            <item>http://www.w3.org/2001/04/xmlenc#kw-aes128</item>
            <item>http://www.w3.org/2001/04/xmlenc#aes192-cbc</item>
            <item>http://www.w3.org/2001/04/xmlenc#kw-aes192</item>
            <item>http://www.w3.org/2001/04/xmlenc#aes256-cbc</item>
            <item>http://www.w3.org/2001/04/xmlenc#kw-aes256</item>
            </list>
            </para>
            </remarks>
            <param name="x509Certificate">The X.509 certificate containing a private key.</param>
            <param name="keyEncryptionMethod">The method for decrypting the symmetric key or <c>null</c> if specified in the encrypted key.</param>
            <param name="dataEncryptionMethod">The method for decrypting the data or <c>null</c> if specified in the encrypted data.</param>
            <returns>The SAML assertion.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLEncryptionException">
            Thrown when the decryption fails.
            </exception>
            <seealso cref="M:ComponentSpace.SAML2.Assertions.EncryptedAssertion.#ctor(ComponentSpace.SAML2.Assertions.SAMLAssertion,System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.Xml.EncryptionMethod)"/>
        </member>
        <member name="T:ComponentSpace.SAML2.Assertions.EncryptedAttribute">
            <summary>
            Represents an encrypted attribute.
            </summary>
            <remarks>
            Refer to the Assertions and Protocol for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.EncryptedAttribute.IsValid(System.Xml.XmlElement)">
            <summary>
            Indicates whether the XML is an encrypted attribute.
            </summary>
            <param name="xmlElement">The XML to test.</param>
            <returns><c>true</c> if the XML is an encrypted attribute; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.EncryptedAttribute.#ctor">
            <summary>
            Initializes a new instance of the <c>EncryptedAttribute</c> class.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.EncryptedAttribute.#ctor(System.Xml.XmlElement,System.Xml.XmlNodeList)">
            <summary>
            Initializes a new instance of the <c>EncryptedAttribute</c> class.
            </summary>
            <param name="encryptedData">The encrypted data.</param>
            <param name="encryptedKeys">The encrypted keys.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.EncryptedAttribute.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <c>EncryptedAttribute</c> class from XML.
            </summary>
            <param name="xmlElement">The encrypted attribute XML.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.EncryptedAttribute.#ctor(ComponentSpace.SAML2.Assertions.SAMLAttribute,System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.KeyInfo)">
            <summary>
            Initializes a new instance of the <c>EncryptedAttribute</c> class from a SAML attribute.
            </summary>
            <remarks>
            A random symmetric session key is generated from the public asymmetric key.
            The symmetric key is used to encrypt the data.
            <para>
            The encryption method for the encrypted symmetric key is http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p.
            </para>
            <para>
            The specified data encryption method is used. For example, http://www.w3.org/2001/04/xmlenc#aes256-cbc.
            </para>
            </remarks>
            <param name="samlAttribute">The SAML attribute.</param>
            <param name="keyEncryptingKey">The asymmetric key encrypting key.</param>
            <param name="dataEncryptionMethod">The method for encrypting the data.</param>
            <param name="keyInfo">The key info to include with the encrypted data.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLEncryptionException">
            Thrown when the encryption fails.
            </exception>
            <seealso cref="M:ComponentSpace.SAML2.Assertions.EncryptedAttribute.Decrypt(System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.EncryptionMethod)"/>
            <seealso cref="M:ComponentSpace.SAML2.Assertions.EncryptedAttribute.Decrypt(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.EncryptionMethod)"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.EncryptedAttribute.#ctor(ComponentSpace.SAML2.Assertions.SAMLAttribute,System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.KeyInfo)">
            <summary>
            Initializes a new instance of the <c>EncryptedAttribute</c> class from a SAML attribute.
            </summary>
            <remarks>
            A random symmetric session key is generated from the public asymmetric key.
            The symmetric key is used to encrypt the data.
            <para>
            The specified key encryption method is used. For example, http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p.
            </para>
            <para>
            The specified data encryption method is used. For example, http://www.w3.org/2001/04/xmlenc#aes256-cbc.
            </para>
            </remarks>
            <param name="samlAttribute">The SAML attribute.</param>
            <param name="keyEncryptingKey">The asymmetric key encrypting key.</param>
            <param name="keyEncryptionMethod">The method for encrypting the symmetric key (http://www.w3.org/2001/04/xmlenc#rsa-1_5 or http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p).</param>
            <param name="dataEncryptionMethod">The method for encrypting the data.</param>
            <param name="keyInfo">The key info to include with the encrypted data.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLEncryptionException">
            Thrown when the encryption fails.
            </exception>
            <seealso cref="M:ComponentSpace.SAML2.Assertions.EncryptedAttribute.Decrypt(System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.EncryptionMethod)"/>
            <seealso cref="M:ComponentSpace.SAML2.Assertions.EncryptedAttribute.Decrypt(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.EncryptionMethod)"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.EncryptedAttribute.#ctor(ComponentSpace.SAML2.Assertions.SAMLAttribute,System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.Xml.EncryptionMethod)">
            <summary>
            Initializes a new instance of the <c>EncryptedAttribute</c> class from a SAML attribute.
            </summary>
            <remarks>
            A random symmetric session key is generated from the public key contained within the X.509 certificate.
            The symmetric key is used to encrypt the data.
            <para>
            The encryption method for the encrypted symmetric key is http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p.
            </para>
            <para>
            The specified data encryption method is used. For example, http://www.w3.org/2001/04/xmlenc#aes256-cbc.
            </para>
            </remarks>
            <param name="samlAttribute">The SAML attribute.</param>
            <param name="x509Certificate">The X.509 certificate used when encrypting the data.</param>
            <param name="dataEncryptionMethod">The method for encrypting the data.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLEncryptionException">
            Thrown when the encryption fails.
            </exception>
            <seealso cref="M:ComponentSpace.SAML2.Assertions.EncryptedAttribute.Decrypt(System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.EncryptionMethod)"/>
            <seealso cref="M:ComponentSpace.SAML2.Assertions.EncryptedAttribute.Decrypt(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.EncryptionMethod)"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.EncryptedAttribute.#ctor(ComponentSpace.SAML2.Assertions.SAMLAttribute,System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.EncryptionMethod)">
            <summary>
            Initializes a new instance of the <c>EncryptedAttribute</c> class from a SAML attribute.
            </summary>
            <remarks>
            A random symmetric session key is generated from the public key contained within the X.509 certificate.
            The symmetric key is used to encrypt the data.
            <para>
            The specified key encryption method is used. For example, http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p.
            </para>
            <para>
            The specified data encryption method is used. For example, http://www.w3.org/2001/04/xmlenc#aes256-cbc.
            </para>
            </remarks>
            <param name="samlAttribute">The SAML attribute.</param>
            <param name="x509Certificate">The X.509 certificate used when encrypting the data.</param>
            <param name="keyEncryptionMethod">The method for encrypting the symmetric key (http://www.w3.org/2001/04/xmlenc#rsa-1_5 or http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p).</param>
            <param name="dataEncryptionMethod">The method for encrypting the data.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLEncryptionException">
            Thrown when the encryption fails.
            </exception>
            <seealso cref="M:ComponentSpace.SAML2.Assertions.EncryptedAttribute.Decrypt(System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.EncryptionMethod)"/>
            <seealso cref="M:ComponentSpace.SAML2.Assertions.EncryptedAttribute.Decrypt(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.EncryptionMethod)"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.EncryptedAttribute.ToXml(System.Xml.XmlDocument)">
            <summary>
            Serializes the encrypted attribute to XML.
            </summary>
            <param name="xmlDocument">The owning XML document.</param>
            <returns>The encrypted attribute as XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.EncryptedAttribute.Decrypt(System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.Xml.EncryptionMethod)">
            <summary>
            Decrypts an encrypted attribute.
            </summary>
            <remarks>
            The asymmetric key is used to decrypt the symmetric key contained within the encrypted data. The symmetric key is used
            to decrypt the data.
            <para>
            The encryption method for the encrypted symmetric key is expected to be 
            http://www.w3.org/2001/04/xmlenc#rsa-1_5 or http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p.
            </para>
            <para>
            The encryption method for the data is specified in the encrypted data or may be explicitly specified.
            </para>
            </remarks>
            <param name="keyDecryptingKey">The asymmetric key decrypting key.</param>
            <param name="dataEncryptionMethod">The method for decrypting the data or <c>null</c> if specified in the encrypted data.</param>
            <returns>The SAML attribute.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLEncryptionException">
            Thrown when the decryption fails.
            </exception>
            <seealso cref="M:ComponentSpace.SAML2.Assertions.EncryptedAttribute.#ctor(ComponentSpace.SAML2.Assertions.SAMLAttribute,System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.KeyInfo)"/>
            <seealso cref="M:ComponentSpace.SAML2.Assertions.EncryptedAttribute.#ctor(ComponentSpace.SAML2.Assertions.SAMLAttribute,System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.EncryptionMethod)"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.EncryptedAttribute.Decrypt(System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.EncryptionMethod)">
            <summary>
            Decrypts an encrypted attribute.
            </summary>
            <remarks>
            The asymmetric key is used to decrypt the symmetric key contained within the encrypted data. The symmetric key is used
            to decrypt the data.
            <para>
            The encryption method for the encrypted symmetric key is expected to be 
            http://www.w3.org/2001/04/xmlenc#rsa-1_5 or http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p.
            </para>
            <para>
            The encryption method for the key is specified in the encrypted data or may be explicitly specified.
            </para>
            <para>
            The encryption method for the data is specified in the encrypted data or may be explicitly specified.
            </para>
            </remarks>
            <param name="keyDecryptingKey">The asymmetric key decrypting key.</param>
            <param name="keyEncryptionMethod">The method for decrypting the symmetric key or <c>null</c> if specified in the encrypted key.</param>
            <param name="dataEncryptionMethod">The method for decrypting the data or <c>null</c> if specified in the encrypted data.</param>
            <returns>The SAML attribute.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLEncryptionException">
            Thrown when the decryption fails.
            </exception>
            <seealso cref="M:ComponentSpace.SAML2.Assertions.EncryptedAttribute.#ctor(ComponentSpace.SAML2.Assertions.SAMLAttribute,System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.KeyInfo)"/>
            <seealso cref="M:ComponentSpace.SAML2.Assertions.EncryptedAttribute.#ctor(ComponentSpace.SAML2.Assertions.SAMLAttribute,System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.EncryptionMethod)"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.EncryptedAttribute.Decrypt(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.Xml.EncryptionMethod)">
            <summary>
            Decrypts an encrypted attribute.
            </summary>
            <remarks>
            The X.509 certificate's private key is used to decrypt the symmetric key contained within the encrypted data. The symmetric key is used
            to decrypt the data.
            <para>
            The encryption method for the encrypted symmetric key is expected to be 
            http://www.w3.org/2001/04/xmlenc#rsa-1_5 or http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p.
            </para>
            <para>
            The encryption method for the data is specified in the encrypted data or may be explicitly specified.
            </para>
            </remarks>
            <param name="x509Certificate">The X.509 certificate containing a private key.</param>
            <param name="dataEncryptionMethod">The method for decrypting the data or <c>null</c> if specified in the encrypted data.</param>
            <returns>The SAML attribute.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLEncryptionException">
            Thrown when the decryption fails.
            </exception>
            <seealso cref="M:ComponentSpace.SAML2.Assertions.EncryptedAttribute.#ctor(ComponentSpace.SAML2.Assertions.SAMLAttribute,System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.KeyInfo)"/>
            <seealso cref="M:ComponentSpace.SAML2.Assertions.EncryptedAttribute.#ctor(ComponentSpace.SAML2.Assertions.SAMLAttribute,System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.EncryptionMethod)"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.EncryptedAttribute.Decrypt(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.EncryptionMethod)">
            <summary>
            Decrypts an encrypted attribute.
            </summary>
            <remarks>
            The X.509 certificate's private key is used to decrypt the symmetric key contained within the encrypted data. The symmetric key is used
            to decrypt the data.
            <para>
            The encryption method for the encrypted symmetric key is expected to be 
            http://www.w3.org/2001/04/xmlenc#rsa-1_5 or http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p.
            </para>
            <para>
            The encryption method for the key is specified in the encrypted data or may be explicitly specified.
            </para>
            <para>
            The encryption method for the data is specified in the encrypted data or may be explicitly specified.
            </para>
            </remarks>
            <param name="x509Certificate">The X.509 certificate containing a private key.</param>
            <param name="keyEncryptionMethod">The method for decrypting the symmetric key or <c>null</c> if specified in the encrypted key.</param>
            <param name="dataEncryptionMethod">The method for decrypting the data or <c>null</c> if specified in the encrypted data.</param>
            <returns>The SAML attribute.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLEncryptionException">
            Thrown when the decryption fails.
            </exception>
            <seealso cref="M:ComponentSpace.SAML2.Assertions.EncryptedAttribute.#ctor(ComponentSpace.SAML2.Assertions.SAMLAttribute,System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.KeyInfo)"/>
            <seealso cref="M:ComponentSpace.SAML2.Assertions.EncryptedAttribute.#ctor(ComponentSpace.SAML2.Assertions.SAMLAttribute,System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.EncryptionMethod)"/>
        </member>
        <member name="T:ComponentSpace.SAML2.Assertions.EncryptedElementType">
            <summary>
            Represents the encrypted element type.
            </summary>
            <remarks>
            Refer to the Assertions and Protocol for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.EncryptedElementType.GetKeyInfo(System.Xml.XmlElement)">
            <summary>
            Gets the key info embedded in the encrypted XML or <c>null</c> if none.
            </summary>
            <param name="xmlElement">The encrypted XML.</param>
            <returns>The key info embedded in the encrypted XML or <c>null</c> if none.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLEncryptionException">
            Thrown when the key info retrieval fails.
            </exception>
            <seealso cref="M:ComponentSpace.SAML2.Assertions.EncryptedElementType.GetCertificate(System.Xml.XmlElement)"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.EncryptedElementType.GetCertificate(System.Xml.XmlElement)">
            <summary>
            Gets the X.509 certificate embedded in the encrypted XML or <c>null</c> if none.
            </summary>
            <param name="xmlElement">The encrypted XML.</param>
            <returns>The X.509 certificate embedded in the encrypted XML or <c>null</c> if none.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLEncryptionException">
            Thrown when the X.509 certificate retrieval fails.
            </exception>
            <seealso cref="M:ComponentSpace.SAML2.Assertions.EncryptedElementType.GetKeyInfo(System.Xml.XmlElement)"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.EncryptedElementType.#ctor">
            <summary>
            Initializes a new instance of the <c>EncryptedElementType</c> class.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.EncryptedElementType.#ctor(System.Xml.XmlElement,System.Xml.XmlNodeList)">
            <summary>
            Initializes a new instance of the <c>EncryptedElementType</c> class.
            </summary>
            <param name="encryptedData">The encrypted data.</param>
            <param name="encryptedKeys">The encrypted keys.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.EncryptedElementType.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <c>EncryptedElementType</c> class from XML.
            </summary>
            <param name="xmlElement">The encrypted element XML.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentSpace.SAML2.Assertions.EncryptedElementType.EncryptedData">
            <summary>
            Gets or sets the encrypted data. 
            </summary>
            <value>
            The encrypted data.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Assertions.EncryptedElementType.EncryptedKeys">
            <summary>
            Gets or sets the encrypted keys. 
            </summary>
            <value>
            The encrypted keys.
            </value>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.EncryptedElementType.ToXml(System.Xml.XmlElement)">
            <summary>
            Serializes the encrypted element to XML.
            </summary>
            <param name="xmlElement">The owning XML element.</param>
            <returns>The encrypted element as XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="T:ComponentSpace.SAML2.Assertions.EncryptedID">
            <summary>
            Represents an encrypted identifier.
            </summary>
            <remarks>
            Refer to the Assertions and Protocol for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.EncryptedID.IsValid(System.Xml.XmlElement)">
            <summary>
            Indicates whether the XML is an encrypted identifier.
            </summary>
            <param name="xmlElement">The XML to test.</param>
            <returns><c>true</c> if the XML is an encrypted identifier; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.EncryptedID.#ctor">
            <summary>
            Initializes a new instance of the <c>EncryptedID</c> class.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.EncryptedID.#ctor(System.Xml.XmlElement,System.Xml.XmlNodeList)">
            <summary>
            Initializes a new instance of the <c>EncryptedID</c> class.
            </summary>
            <param name="encryptedData">The encrypted data.</param>
            <param name="encryptedKeys">The encrypted keys.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.EncryptedID.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <c>EncryptedID</c> class from XML.
            </summary>
            <param name="xmlElement">The encrypted identifier XML.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.EncryptedID.#ctor(ComponentSpace.SAML2.Assertions.NameID,System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.KeyInfo)">
            <summary>
            Initializes a new instance of the <c>EncryptedID</c> class from a name identifier.
            </summary>
            <remarks>
            A random symmetric session key is generated from the public asymmetric key.
            The symmetric key is used to encrypt the data.
            <para>
            The encryption method for the encrypted symmetric key is http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p.
            </para>
            <para>
            The specified data encryption method is used. For example, http://www.w3.org/2001/04/xmlenc#aes256-cbc.
            </para>
            </remarks>
            <param name="nameID">The name identifier.</param>
            <param name="keyEncryptingKey">The asymmetric key encrypting key.</param>
            <param name="dataEncryptionMethod">The method for encrypting the data.</param>
            <param name="keyInfo">The key info to include with the encrypted data.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLEncryptionException">
            Thrown when the encryption fails.
            </exception>
            <seealso cref="M:ComponentSpace.SAML2.Assertions.EncryptedID.Decrypt(System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.EncryptionMethod)"/>
            <seealso cref="M:ComponentSpace.SAML2.Assertions.EncryptedID.Decrypt(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.EncryptionMethod)"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.EncryptedID.#ctor(ComponentSpace.SAML2.Assertions.NameID,System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.KeyInfo)">
            <summary>
            Initializes a new instance of the <c>EncryptedID</c> class from a name identifier.
            </summary>
            <remarks>
            A random symmetric session key is generated from the public asymmetric key.
            The symmetric key is used to encrypt the data.
            <para>
            The specified key encryption method is used. For example, http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p.
            </para>
            <para>
            The specified data encryption method is used. For example, http://www.w3.org/2001/04/xmlenc#aes256-cbc.
            </para>
            </remarks>
            <param name="nameID">The name identifier.</param>
            <param name="keyEncryptingKey">The asymmetric key encrypting key.</param>
            <param name="keyEncryptionMethod">The method for encrypting the symmetric key (http://www.w3.org/2001/04/xmlenc#rsa-1_5 or http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p).</param>
            <param name="dataEncryptionMethod">The method for encrypting the data.</param>
            <param name="keyInfo">The key info to include with the encrypted data.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLEncryptionException">
            Thrown when the encryption fails.
            </exception>
            <seealso cref="M:ComponentSpace.SAML2.Assertions.EncryptedID.Decrypt(System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.EncryptionMethod)"/>
            <seealso cref="M:ComponentSpace.SAML2.Assertions.EncryptedID.Decrypt(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.EncryptionMethod)"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.EncryptedID.#ctor(ComponentSpace.SAML2.Assertions.NameID,System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.Xml.EncryptionMethod)">
            <summary>
            Initializes a new instance of the <c>EncryptedID</c> class from a name identifier.
            </summary>
            <remarks>
            A random symmetric session key is generated from the public key contained within the X.509 certificate.
            The symmetric key is used to encrypt the data.
            <para>
            The encryption method for the encrypted symmetric key is http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p.
            </para>
            <para>
            The specified data encryption method is used. For example, http://www.w3.org/2001/04/xmlenc#aes256-cbc.
            </para>
            </remarks>
            <param name="nameID">The name identifier.</param>
            <param name="x509Certificate">The X.509 certificate used when encrypting the data.</param>
            <param name="dataEncryptionMethod">The method for encrypting the data.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLEncryptionException">
            Thrown when the encryption fails.
            </exception>
            <seealso cref="M:ComponentSpace.SAML2.Assertions.EncryptedID.Decrypt(System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.EncryptionMethod)"/>
            <seealso cref="M:ComponentSpace.SAML2.Assertions.EncryptedID.Decrypt(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.EncryptionMethod)"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.EncryptedID.#ctor(ComponentSpace.SAML2.Assertions.NameID,System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.EncryptionMethod)">
            <summary>
            Initializes a new instance of the <c>EncryptedID</c> class from a name identifier.
            </summary>
            <remarks>
            A random symmetric session key is generated from the public key contained within the X.509 certificate.
            The symmetric key is used to encrypt the data.
            <para>
            The specified key encryption method is used. For example, http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p.
            </para>
            <para>
            The specified data encryption method is used. For example, http://www.w3.org/2001/04/xmlenc#aes256-cbc.
            </para>
            </remarks>
            <param name="nameID">The name identifier.</param>
            <param name="x509Certificate">The X.509 certificate used when encrypting the data.</param>
            <param name="keyEncryptionMethod">The method for encrypting the symmetric key (http://www.w3.org/2001/04/xmlenc#rsa-1_5 or http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p).</param>
            <param name="dataEncryptionMethod">The method for encrypting the data.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLEncryptionException">
            Thrown when the encryption fails.
            </exception>
            <seealso cref="M:ComponentSpace.SAML2.Assertions.EncryptedID.Decrypt(System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.EncryptionMethod)"/>
            <seealso cref="M:ComponentSpace.SAML2.Assertions.EncryptedID.Decrypt(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.EncryptionMethod)"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.EncryptedID.ToXml(System.Xml.XmlDocument)">
            <summary>
            Serializes the encrypted identifier to XML.
            </summary>
            <param name="xmlDocument">The owning XML document.</param>
            <returns>The encrypted identifier as XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.EncryptedID.Decrypt(System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.Xml.EncryptionMethod)">
            <summary>
            Decrypts an encrypted identifier.
            </summary>
            <remarks>
            The asymmetric key is used to decrypt the symmetric key contained within the encrypted data. The symmetric key is used
            to decrypt the data.
            <para>
            The encryption method for the encrypted symmetric key is expected to be 
            http://www.w3.org/2001/04/xmlenc#rsa-1_5 or http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p.
            </para>
            <para>
            The encryption method for the data is specified in the encrypted data or may be explicitly specified.
            </para>
            </remarks>
            <param name="keyDecryptingKey">The asymmetric key decrypting key.</param>
            <param name="dataEncryptionMethod">The method for decrypting the data or <c>null</c> if specified in the encrypted data.</param>
            <returns>The identifier.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLEncryptionException">
            Thrown when the decryption fails.
            </exception>
            <seealso cref="M:ComponentSpace.SAML2.Assertions.EncryptedID.#ctor(ComponentSpace.SAML2.Assertions.NameID,System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.KeyInfo)"/>
            <seealso cref="M:ComponentSpace.SAML2.Assertions.EncryptedID.#ctor(ComponentSpace.SAML2.Assertions.NameID,System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.Xml.EncryptionMethod)"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.EncryptedID.Decrypt(System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.EncryptionMethod)">
            <summary>
            Decrypts an encrypted identifier.
            </summary>
            <remarks>
            The asymmetric key is used to decrypt the symmetric key contained within the encrypted data. The symmetric key is used
            to decrypt the data.
            <para>
            The encryption method for the encrypted symmetric key is expected to be 
            http://www.w3.org/2001/04/xmlenc#rsa-1_5 or http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p.
            </para>
            <para>
            The encryption method for the key is specified in the encrypted data or may be explicitly specified.
            </para>
            <para>
            The encryption method for the data is specified in the encrypted data or may be explicitly specified.
            </para>
            </remarks>
            <param name="keyDecryptingKey">The asymmetric key decrypting key.</param>
            <param name="keyEncryptionMethod">The method for decrypting the symmetric key or <c>null</c> if specified in the encrypted key.</param>
            <param name="dataEncryptionMethod">The method for decrypting the data or <c>null</c> if specified in the encrypted data.</param>
            <returns>The identifier.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLEncryptionException">
            Thrown when the decryption fails.
            </exception>
            <seealso cref="M:ComponentSpace.SAML2.Assertions.EncryptedID.#ctor(ComponentSpace.SAML2.Assertions.NameID,System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.KeyInfo)"/>
            <seealso cref="M:ComponentSpace.SAML2.Assertions.EncryptedID.#ctor(ComponentSpace.SAML2.Assertions.NameID,System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.Xml.EncryptionMethod)"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.EncryptedID.Decrypt(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.Xml.EncryptionMethod)">
            <summary>
            Decrypts an encrypted identifier.
            </summary>
            <remarks>
            The X.509 certificate's private key is used to decrypt the symmetric key contained within the encrypted data. The symmetric key is used
            to decrypt the data.
            <para>
            The encryption method for the encrypted symmetric key is expected to be 
            http://www.w3.org/2001/04/xmlenc#rsa-1_5 or http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p.
            </para>
            <para>
            The encryption method for the data is specified in the encrypted data or may be explicitly specified.
            </para>
            </remarks>
            <param name="x509Certificate">The X.509 certificate containing a private key.</param>
            <param name="dataEncryptionMethod">The method for decrypting the data or <c>null</c> if specified in the encrypted data.</param>
            <returns>The identifier.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLEncryptionException">
            Thrown when the decryption fails.
            </exception>
            <seealso cref="M:ComponentSpace.SAML2.Assertions.EncryptedID.#ctor(ComponentSpace.SAML2.Assertions.NameID,System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.KeyInfo)"/>
            <seealso cref="M:ComponentSpace.SAML2.Assertions.EncryptedID.#ctor(ComponentSpace.SAML2.Assertions.NameID,System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.EncryptionMethod)"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.EncryptedID.Decrypt(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.EncryptionMethod)">
            <summary>
            Decrypts an encrypted identifier.
            </summary>
            <remarks>
            The X.509 certificate's private key is used to decrypt the symmetric key contained within the encrypted data. The symmetric key is used
            to decrypt the data.
            <para>
            The encryption method for the encrypted symmetric key is expected to be 
            http://www.w3.org/2001/04/xmlenc#rsa-1_5 or http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p.
            </para>
            <para>
            The encryption method for the key is specified in the encrypted data or may be explicitly specified.
            </para>
            <para>
            The encryption method for the data is specified in the encrypted data or may be explicitly specified.
            </para>
            </remarks>
            <param name="x509Certificate">The X.509 certificate containing a private key.</param>
            <param name="keyEncryptionMethod">The method for decrypting the symmetric key or <c>null</c> if specified in the encrypted key.</param>
            <param name="dataEncryptionMethod">The method for decrypting the data or <c>null</c> if specified in the encrypted data.</param>
            <returns>The identifier.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLEncryptionException">
            Thrown when the decryption fails.
            </exception>
            <seealso cref="M:ComponentSpace.SAML2.Assertions.EncryptedID.#ctor(ComponentSpace.SAML2.Assertions.NameID,System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.KeyInfo)"/>
            <seealso cref="M:ComponentSpace.SAML2.Assertions.EncryptedID.#ctor(ComponentSpace.SAML2.Assertions.NameID,System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.EncryptionMethod)"/>
        </member>
        <member name="T:ComponentSpace.SAML2.Assertions.Evidence">
            <summary>
            Represents evidence.
            </summary>
            <remarks>
            Refer to the Assertions and Protocol for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.Evidence.IsValid(System.Xml.XmlElement)">
            <summary>
            Indicates whether the XML is evidence.
            </summary>
            <param name="xmlElement">The XML to test.</param>
            <returns><c>true</c> if the XML is evidence; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.Evidence.#ctor">
            <summary>
            Initializes a new instance of the <c>Evidence</c> class.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.Evidence.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <c>Evidence</c> class from XML.
            </summary>
            <param name="xmlElement">The evidence XML.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentSpace.SAML2.Assertions.Evidence.EvidenceList">
            <summary>
            Gets or sets the list of evidence. 
            </summary>
            <value>
            The list of evidence.
            </value>
            <seealso cref="T:ComponentSpace.SAML2.Assertions.AssertionIDRef"/>
            <seealso cref="T:ComponentSpace.SAML2.Assertions.AssertionURIRef"/>
            <seealso cref="T:ComponentSpace.SAML2.Assertions.SAMLAssertion"/>
            <seealso cref="T:ComponentSpace.SAML2.Assertions.EncryptedAssertion"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.Evidence.ToXml(System.Xml.XmlDocument)">
            <summary>
            Serializes the evidence to XML.
            </summary>
            <param name="xmlDocument">The owning XML document.</param>
            <returns>The evidence as XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="T:ComponentSpace.SAML2.Assertions.IAttributeValueSerializer">
            <summary>
            The interface for serializing attribute values to XML.
            Implement this interface to support custom attribute values.
            </summary>
            <seealso cref="T:ComponentSpace.SAML2.Assertions.AttributeValue"/>
            <seealso cref="M:ComponentSpace.SAML2.Assertions.AttributeType.RegisterAttributeValueSerializer(System.String,System.String,ComponentSpace.SAML2.Assertions.IAttributeValueSerializer)"/>
            <seealso cref="T:ComponentSpace.SAML2.Assertions.StringAttributeValueSerializer"/>
            <seealso cref="T:ComponentSpace.SAML2.Assertions.XmlAttributeValueSerializer"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.IAttributeValueSerializer.Serialize(System.Xml.XmlElement,System.Object)">
            <summary>
            Serialize the attribute value to XML.
            </summary>
            <param name="parentElement">The parent element of the attribute value.</param>
            <param name="attributeValue">The attribute value.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.IAttributeValueSerializer.Deserialize(System.Xml.XmlElement)">
            <summary>
            Deserializes the attribute value from XML.
            </summary>
            <param name="parentElement">The parent element of the attribute value.</param>
            <returns>The attribute value.</returns>
        </member>
        <member name="T:ComponentSpace.SAML2.Assertions.ICondition">
            <summary>
            Represents a condition.
            </summary>
            <remarks>
            Refer to the Assertions and Protocol for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="T:ComponentSpace.SAML2.Assertions.Issuer">
            <summary>
            Represents an issuer.
            </summary>
            <remarks>
            Refer to the Assertions and Protocol for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.Issuer.IsValid(System.Xml.XmlElement)">
            <summary>
            Indicates whether the XML is an issuer.
            </summary>
            <param name="xmlElement">The XML to test.</param>
            <returns><c>true</c> if the XML is an issuer; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.Issuer.GetIssuer(System.Xml.XmlElement)">
            <summary>
            Gets the issuer.
            <para>
            The issuer is a child element.
            </para>
            </summary>
            <param name="xmlElement">The XML element containing the issuer as a child element.</param>
            <returns>The issuer or <c>null</c> if none.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.Issuer.GetIssuerName(System.Xml.XmlElement)">
            <summary>
            Gets the issuer name.
            <para>
            The issuer is a child element.
            </para>
            </summary>
            <param name="xmlElement">The XML element containing the issuer as a child element.</param>
            <returns>The issuer name or <c>null</c> if none.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.Issuer.GetAnyIssuer(System.Xml.XmlElement)">
            <summary>
            Gets the issuer.
            <para>
            The issuer is a descendant element.
            </para>
            </summary>
            <param name="xmlElement">The XML element containing the issuer as a descendant element.</param>
            <returns>The issuer or <c>null</c> if none.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.Issuer.GetAnyIssuerName(System.Xml.XmlElement)">
            <summary>
            Gets the issuer name.
            <para>
            The issuer is a descendant element.
            </para>
            </summary>
            <param name="xmlElement">The XML element containing the issuer as a descendant element.</param>
            <returns>The issuer name or <c>null</c> if none.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.Issuer.#ctor">
            <summary>
            Initializes a new instance of the <c>Issuer</c> class.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.Issuer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>Issuer</c> class.
            </summary>
            <param name="nameID">The name ID.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.Issuer.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <c>Issuer</c> class.
            </summary>
            <param name="nameID">The name ID.</param>
            <param name="nameQualifier">The name qualifier.</param>
            <param name="spNameQualifier">The SP name qualifier.</param>
            <param name="format">The format.</param>
            <param name="spProvidedID">The SP provided ID.</param>
            <seealso cref="T:ComponentSpace.SAML2.SAMLIdentifiers.NameIdentifierFormats"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.Issuer.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <c>Issuer</c> class from XML.
            </summary>
            <param name="xmlElement">The issuer XML.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.Issuer.ToXml(System.Xml.XmlDocument)">
            <summary>
            Serializes the issuer to XML.
            </summary>
            <param name="xmlDocument">The owning XML document.</param>
            <returns>The issuer as XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="T:ComponentSpace.SAML2.Assertions.IStatement">
            <summary>
            Represents a statement.
            </summary>
            <remarks>
            Refer to the Assertions and Protocol for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="T:ComponentSpace.SAML2.Assertions.NameID">
            <summary>
            Represents a name identifier.
            </summary>
            <remarks>
            Refer to the Assertions and Protocol for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.NameID.IsValid(System.Xml.XmlElement)">
            <summary>
            Indicates whether the XML is a name identifier.
            </summary>
            <param name="xmlElement">The XML to test.</param>
            <returns><c>true</c> if the XML is a name identifier; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.NameID.#ctor">
            <summary>
            Initializes a new instance of the <c>NameID</c> class.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.NameID.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>NameID</c> class.
            </summary>
            <param name="nameID">The name ID.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.NameID.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <c>NameID</c> class.
            </summary>
            <param name="nameID">The name ID.</param>
            <param name="nameQualifier">The name qualifier.</param>
            <param name="spNameQualifier">The SP name qualifier.</param>
            <param name="format">The format.</param>
            <param name="spProvidedID">The SP provided ID.</param>
            <seealso cref="T:ComponentSpace.SAML2.SAMLIdentifiers.NameIdentifierFormats"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.NameID.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <c>NameID</c> class from XML.
            </summary>
            <param name="xmlElement">The name identifier XML.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.NameID.ToXml(System.Xml.XmlDocument)">
            <summary>
            Serializes the name identifier to XML.
            </summary>
            <param name="xmlDocument">The owning XML document.</param>
            <returns>The name identifier as XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="T:ComponentSpace.SAML2.Assertions.NameIDType">
            <summary>
            Represents the name identifier type.
            </summary>
            <remarks>
            Refer to the Assertions and Protocol for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.NameIDType.#ctor">
            <summary>
            Initializes a new instance of the <c>NameIDType</c> class.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.NameIDType.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>NameIDType</c> class.
            </summary>
            <param name="nameID">The name ID.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.NameIDType.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <c>NameIDType</c> class.
            </summary>
            <param name="nameID">The name ID.</param>
            <param name="nameQualifier">The name qualifier.</param>
            <param name="spNameQualifier">The SP name qualifier.</param>
            <param name="format">The format.</param>
            <param name="spProvidedID">The SP provided ID.</param>
            <seealso cref="T:ComponentSpace.SAML2.SAMLIdentifiers.NameIdentifierFormats"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.NameIDType.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <c>NameIDType</c> class from XML.
            </summary>
            <param name="xmlElement">The name identifier XML.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentSpace.SAML2.Assertions.NameIDType.NameIdentifier">
            <summary>
            Gets or sets the name ID. 
            </summary>
            <value>
            The name ID.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Assertions.NameIDType.NameQualifier">
            <summary>
            Gets or sets the name qualifier. 
            </summary>
            <value>
            The name qualifier.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Assertions.NameIDType.SPNameQualifier">
            <summary>
            Gets or sets the SP name qualifier. 
            </summary>
            <value>
            The SP name qualifier.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Assertions.NameIDType.Format">
            <summary>
            Gets or sets the format. 
            </summary>
            <value>
            The format.
            </value>
            <seealso cref="T:ComponentSpace.SAML2.SAMLIdentifiers.NameIdentifierFormats"/>
        </member>
        <member name="P:ComponentSpace.SAML2.Assertions.NameIDType.SPProvidedID">
            <summary>
            Gets or sets the SP provided ID. 
            </summary>
            <value>
            The SP provided ID.
            </value>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.NameIDType.ToXml(System.Xml.XmlElement)">
            <summary>
            Serializes the name identifier to XML.
            </summary>
            <param name="xmlElement">The owning XML element.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="T:ComponentSpace.SAML2.Assertions.NewEncryptedID">
            <summary>
            Represents a new encrypted identifier.
            </summary>
            <remarks>
            Refer to the Assertions and Protocol for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.NewEncryptedID.IsValid(System.Xml.XmlElement)">
            <summary>
            Indicates whether the XML is a new encrypted identifier.
            </summary>
            <param name="xmlElement">The XML to test.</param>
            <returns><c>true</c> if the XML is a new encrypted identifier; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.NewEncryptedID.#ctor">
            <summary>
            Initializes a new instance of the <c>NewEncryptedID</c> class.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.NewEncryptedID.#ctor(System.Xml.XmlElement,System.Xml.XmlNodeList)">
            <summary>
            Initializes a new instance of the <c>NewEncryptedID</c> class.
            </summary>
            <param name="encryptedData">The encrypted data.</param>
            <param name="encryptedKeys">The encrypted keys.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.NewEncryptedID.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <c>NewEncryptedID</c> class from XML.
            </summary>
            <param name="xmlElement">The new encrypted identifier XML.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.NewEncryptedID.#ctor(ComponentSpace.SAML2.Assertions.NameID,System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.KeyInfo)">
            <summary>
            Initializes a new instance of the <c>NewEncryptedID</c> class from a name identifier.
            </summary>
            <remarks>
            A random symmetric session key is generated from the public asymmetric key.
            The symmetric key is used to encrypt the data.
            <para>
            The encryption method for the encrypted symmetric key is http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p.
            </para>
            <para>
            The specified data encryption method is used. For example, http://www.w3.org/2001/04/xmlenc#aes256-cbc.
            </para>
            </remarks>
            <param name="nameID">The name identifier.</param>
            <param name="keyEncryptingKey">The asymmetric key encrypting key.</param>
            <param name="dataEncryptionMethod">The method for encrypting the data.</param>
            <param name="keyInfo">The key info to include with the encrypted data.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLEncryptionException">
            Thrown when the encryption fails.
            </exception>
            <seealso cref="M:ComponentSpace.SAML2.Assertions.NewEncryptedID.Decrypt(System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.EncryptionMethod)"/>
            <seealso cref="M:ComponentSpace.SAML2.Assertions.NewEncryptedID.Decrypt(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.EncryptionMethod)"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.NewEncryptedID.#ctor(ComponentSpace.SAML2.Assertions.NameID,System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.KeyInfo)">
            <summary>
            Initializes a new instance of the <c>NewEncryptedID</c> class from a name identifier.
            </summary>
            <remarks>
            A random symmetric session key is generated from the public asymmetric key.
            The symmetric key is used to encrypt the data.
            <para>
            The specified key encryption method is used. For example, http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p.
            </para>
            <para>
            The specified data encryption method is used. For example, http://www.w3.org/2001/04/xmlenc#aes256-cbc.
            </para>
            </remarks>
            <param name="nameID">The name identifier.</param>
            <param name="keyEncryptingKey">The asymmetric key encrypting key.</param>
            <param name="keyEncryptionMethod">The method for encrypting the symmetric key (http://www.w3.org/2001/04/xmlenc#rsa-1_5 or http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p).</param>
            <param name="dataEncryptionMethod">The method for encrypting the data.</param>
            <param name="keyInfo">The key info to include with the encrypted data.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLEncryptionException">
            Thrown when the encryption fails.
            </exception>
            <seealso cref="M:ComponentSpace.SAML2.Assertions.NewEncryptedID.Decrypt(System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.EncryptionMethod)"/>
            <seealso cref="M:ComponentSpace.SAML2.Assertions.NewEncryptedID.Decrypt(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.EncryptionMethod)"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.NewEncryptedID.#ctor(ComponentSpace.SAML2.Assertions.NameID,System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.Xml.EncryptionMethod)">
            <summary>
            Initializes a new instance of the <c>NewEncryptedID</c> class from a name identifier.
            </summary>
            <remarks>
            A random symmetric session key is generated from the public key contained within the X.509 certificate.
            The symmetric key is used to encrypt the data.
            <para>
            The encryption method for the encrypted symmetric key is http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p.
            </para>
            <para>
            The specified data encryption method is used. For example, http://www.w3.org/2001/04/xmlenc#aes256-cbc.
            </para>
            </remarks>
            <param name="nameID">The name identifier.</param>
            <param name="x509Certificate">The X.509 certificate used when encrypting the data.</param>
            <param name="dataEncryptionMethod">The method for encrypting the data.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLEncryptionException">
            Thrown when the encryption fails.
            </exception>
            <seealso cref="M:ComponentSpace.SAML2.Assertions.NewEncryptedID.Decrypt(System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.EncryptionMethod)"/>
            <seealso cref="M:ComponentSpace.SAML2.Assertions.NewEncryptedID.Decrypt(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.EncryptionMethod)"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.NewEncryptedID.#ctor(ComponentSpace.SAML2.Assertions.NameID,System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.EncryptionMethod)">
            <summary>
            Initializes a new instance of the <c>NewEncryptedID</c> class from a name identifier.
            </summary>
            <remarks>
            A random symmetric session key is generated from the public key contained within the X.509 certificate.
            The symmetric key is used to encrypt the data.
            <para>
            The specified key encryption method is used. For example, http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p.
            </para>
            <para>
            The specified data encryption method is used. For example, http://www.w3.org/2001/04/xmlenc#aes256-cbc.
            </para>
            </remarks>
            <param name="nameID">The name identifier.</param>
            <param name="x509Certificate">The X.509 certificate used when encrypting the data.</param>
            <param name="keyEncryptionMethod">The method for encrypting the symmetric key (http://www.w3.org/2001/04/xmlenc#rsa-1_5 or http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p).</param>
            <param name="dataEncryptionMethod">The method for encrypting the data.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLEncryptionException">
            Thrown when the encryption fails.
            </exception>
            <seealso cref="M:ComponentSpace.SAML2.Assertions.NewEncryptedID.Decrypt(System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.EncryptionMethod)"/>
            <seealso cref="M:ComponentSpace.SAML2.Assertions.NewEncryptedID.Decrypt(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.EncryptionMethod)"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.NewEncryptedID.ToXml(System.Xml.XmlDocument)">
            <summary>
            Serializes the new encrypted identifier to XML.
            </summary>
            <param name="xmlDocument">The owning XML document.</param>
            <returns>The new encrypted identifier as XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.NewEncryptedID.Decrypt(System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.Xml.EncryptionMethod)">
            <summary>
            Decrypts an encrypted identifier.
            </summary>
            <remarks>
            The asymmetric key is used to decrypt the symmetric key contained within the encrypted data. The symmetric key is used
            to decrypt the data.
            <para>
            The encryption method for the encrypted symmetric key is expected to be 
            http://www.w3.org/2001/04/xmlenc#rsa-1_5 or http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p.
            </para>
            <para>
            The encryption method for the data is specified in the encrypted data or may be explicitly specified.
            </para>
            </remarks>
            <param name="keyDecryptingKey">The asymmetric key decrypting key.</param>
            <param name="dataEncryptionMethod">The method for decrypting the data or <c>null</c> if specified in the encrypted data.</param>
            <returns>The identifier.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLEncryptionException">
            Thrown when the decryption fails.
            </exception>
            <seealso cref="M:ComponentSpace.SAML2.Assertions.NewEncryptedID.#ctor(ComponentSpace.SAML2.Assertions.NameID,System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.KeyInfo)"/>
            <seealso cref="M:ComponentSpace.SAML2.Assertions.NewEncryptedID.#ctor(ComponentSpace.SAML2.Assertions.NameID,System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.EncryptionMethod)"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.NewEncryptedID.Decrypt(System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.EncryptionMethod)">
            <summary>
            Decrypts an encrypted identifier.
            </summary>
            <remarks>
            The asymmetric key is used to decrypt the symmetric key contained within the encrypted data. The symmetric key is used
            to decrypt the data.
            <para>
            The encryption method for the encrypted symmetric key is expected to be 
            http://www.w3.org/2001/04/xmlenc#rsa-1_5 or http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p.
            </para>
            <para>
            The encryption method for the key is specified in the encrypted data or may be explicitly specified.
            </para>
            <para>
            The encryption method for the data is specified in the encrypted data or may be explicitly specified.
            </para>
            </remarks>
            <param name="keyDecryptingKey">The asymmetric key decrypting key.</param>
            <param name="keyEncryptionMethod">The method for decrypting the symmetric key or <c>null</c> if specified in the encrypted key.</param>
            <param name="dataEncryptionMethod">The method for decrypting the data or <c>null</c> if specified in the encrypted data.</param>
            <returns>The identifier.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLEncryptionException">
            Thrown when the decryption fails.
            </exception>
            <seealso cref="M:ComponentSpace.SAML2.Assertions.NewEncryptedID.#ctor(ComponentSpace.SAML2.Assertions.NameID,System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.KeyInfo)"/>
            <seealso cref="M:ComponentSpace.SAML2.Assertions.NewEncryptedID.#ctor(ComponentSpace.SAML2.Assertions.NameID,System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.EncryptionMethod)"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.NewEncryptedID.Decrypt(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.Xml.EncryptionMethod)">
            <summary>
            Decrypts an encrypted identifier.
            </summary>
            <remarks>
            The X.509 certificate's private key is used to decrypt the symmetric key contained within the encrypted data. The symmetric key is used
            to decrypt the data.
            <para>
            The encryption method for the encrypted symmetric key is expected to be 
            http://www.w3.org/2001/04/xmlenc#rsa-1_5 or http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p.
            </para>
            <para>
            The encryption method for the data is specified in the encrypted data or may be explicitly specified.
            </para>
            </remarks>
            <param name="x509Certificate">The X.509 certificate containing a private key.</param>
            <param name="dataEncryptionMethod">The method for decrypting the data or <c>null</c> if specified in the encrypted data.</param>
            <returns>The identifier.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLEncryptionException">
            Thrown when the decryption fails.
            </exception>
            <seealso cref="M:ComponentSpace.SAML2.Assertions.NewEncryptedID.#ctor(ComponentSpace.SAML2.Assertions.NameID,System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.KeyInfo)"/>
            <seealso cref="M:ComponentSpace.SAML2.Assertions.NewEncryptedID.#ctor(ComponentSpace.SAML2.Assertions.NameID,System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.Xml.EncryptionMethod)"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.NewEncryptedID.Decrypt(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.EncryptionMethod)">
            <summary>
            Decrypts an encrypted identifier.
            </summary>
            <remarks>
            The X.509 certificate's private key is used to decrypt the symmetric key contained within the encrypted data. The symmetric key is used
            to decrypt the data.
            <para>
            The encryption method for the encrypted symmetric key is expected to be 
            http://www.w3.org/2001/04/xmlenc#rsa-1_5 or http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p.
            </para>
            <para>
            The encryption method for the key is specified in the encrypted data or may be explicitly specified.
            </para>
            <para>
            The encryption method for the data is specified in the encrypted data or may be explicitly specified.
            </para>
            </remarks>
            <param name="x509Certificate">The X.509 certificate containing a private key.</param>
            <param name="keyEncryptionMethod">The method for decrypting the symmetric key or <c>null</c> if specified in the encrypted key.</param>
            <param name="dataEncryptionMethod">The method for decrypting the data or <c>null</c> if specified in the encrypted data.</param>
            <returns>The identifier.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLEncryptionException">
            Thrown when the decryption fails.
            </exception>
            <seealso cref="M:ComponentSpace.SAML2.Assertions.NewEncryptedID.#ctor(ComponentSpace.SAML2.Assertions.NameID,System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.KeyInfo)"/>
            <seealso cref="M:ComponentSpace.SAML2.Assertions.NewEncryptedID.#ctor(ComponentSpace.SAML2.Assertions.NameID,System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.Xml.EncryptionMethod)"/>
        </member>
        <member name="T:ComponentSpace.SAML2.Assertions.OneTimeUse">
            <summary>
            Represents a one time use condition.
            </summary>
            <remarks>
            Refer to the Assertions and Protocol for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.OneTimeUse.IsValid(System.Xml.XmlElement)">
            <summary>
            Indicates whether the XML is a one time use condition.
            </summary>
            <param name="xmlElement">The XML to test.</param>
            <returns><c>true</c> if the XML is a one time use condition; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.OneTimeUse.#ctor">
            <summary>
            Initializes a new instance of the <c>OneTimeUse</c> class.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.OneTimeUse.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <c>OneTimeUse</c> class from XML.
            </summary>
            <param name="xmlElement">The one time use condition XML.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.OneTimeUse.ToXml(System.Xml.XmlDocument)">
            <summary>
            Serializes the one time use condition to XML.
            </summary>
            <param name="xmlDocument">The owning XML document.</param>
            <returns>The one time use condition as XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="T:ComponentSpace.SAML2.Assertions.ProxyRestriction">
            <summary>
            Represents a proxy restriction.
            </summary>
            <remarks>
            Refer to the Assertions and Protocol for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.ProxyRestriction.IsValid(System.Xml.XmlElement)">
            <summary>
            Indicates whether the XML is a proxy restriction.
            </summary>
            <param name="xmlElement">The XML to test.</param>
            <returns><c>true</c> if the XML is a proxy restriction; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.ProxyRestriction.#ctor">
            <summary>
            Initializes a new instance of the <c>ProxyRestriction</c> class.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.ProxyRestriction.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <c>ProxyRestriction</c> class from XML.
            </summary>
            <param name="xmlElement">The proxy restriction XML.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentSpace.SAML2.Assertions.ProxyRestriction.Count">
            <summary>
            Gets or sets the count. 
            </summary>
            <value>
            The count.
            A value of Int32.MinValue indicates the value has not been set.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Assertions.ProxyRestriction.Audiences">
            <summary>
            Gets or sets the audiences. 
            </summary>
            <value>
            The audiences.
            </value>
            <seealso cref="T:ComponentSpace.SAML2.Assertions.Audience"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.ProxyRestriction.ToXml(System.Xml.XmlDocument)">
            <summary>
            Serializes the audience restriction to XML.
            </summary>
            <param name="xmlDocument">The owning XML document.</param>
            <returns>The audience restriction as XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="T:ComponentSpace.SAML2.Assertions.SAMLAssertion">
            <summary>
            Represents the Assertion element.
            </summary>
            <remarks>
            Refer to the Assertions and Protocol for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.SAMLAssertion.IsValid(System.Xml.XmlElement)">
            <summary>
            Indicates whether the XML is an assertion.
            </summary>
            <param name="xmlElement">The XML to test.</param>
            <returns><c>true</c> if the XML is an assertion; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.SAMLAssertion.Find(System.Xml.XmlElement)">
            <summary>
            Returns the list of SAML assertion XML elements contained within the supplied XML.
            </summary>
            <param name="xmlElement">The XML in which to search for SAML assertions XML elements.</param>
            <returns>The list of SAML assertion <c>XmlElement</c> objects.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.SAMLAssertion.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <c>SAMLAssertion</c> class.
            </summary>
            <remarks>
            This constructor supports serialization.
            </remarks>
            <param name="info">The serialization information.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.SAMLAssertion.#ctor">
            <summary>
            Initializes a new instance of the <c>SAMLAssertion</c> class.
            </summary>
            <remarks>
            The SAML assertion is initialized with a version number of 2.0,
            a random identifier, and the issue instant of now.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.SAMLAssertion.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>SAMLAssertion</c> class from an XML string.
            </summary>
            <param name="xmlString">The assertion XML string.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.SAMLAssertion.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <c>SAMLAssertion</c> class from XML.
            </summary>
            <param name="xmlElement">The assertion XML.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentSpace.SAML2.Assertions.SAMLAssertion.Version">
            <summary>
            Gets or sets the version.
            </summary>
            <value>
            The version. The default is 2.0.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Assertions.SAMLAssertion.ID">
            <summary>
            Gets or sets the ID. 
            </summary>
            <value>
            The ID.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Assertions.SAMLAssertion.IssueInstant">
            <summary>
            Gets or sets the issue instant. 
            </summary>
            <value>
            The issue instant as coordinated universal time (UTC).
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Assertions.SAMLAssertion.Issuer">
            <summary>
            Gets or sets the issuer. 
            </summary>
            <value>
            The issuer.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Assertions.SAMLAssertion.Signature">
            <summary>
            Gets or sets the digital signature. 
            </summary>
            <value>
            The digital signature.
            </value>
            <remarks>
            To generate or verify signatures, use <see cref="T:ComponentSpace.SAML2.Assertions.SAMLAssertionSignature"/>.
            </remarks>
            <seealso cref="T:ComponentSpace.SAML2.Assertions.SAMLAssertionSignature"/>
        </member>
        <member name="P:ComponentSpace.SAML2.Assertions.SAMLAssertion.Subject">
            <summary>
            Gets or sets the subject. 
            </summary>
            <value>
            The subject.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Assertions.SAMLAssertion.Conditions">
            <summary>
            Gets or sets the conditions. 
            </summary>
            <value>
            The conditions.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Assertions.SAMLAssertion.Advice">
            <summary>
            Gets or sets the advice. 
            </summary>
            <value>
            The advice.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Assertions.SAMLAssertion.Statements">
            <summary>
            Gets or sets the statements. 
            </summary>
            <value>
            The statements.
            </value>
            <seealso cref="T:ComponentSpace.SAML2.Assertions.AuthnStatement"/>
            <seealso cref="T:ComponentSpace.SAML2.Assertions.AuthzDecisionStatement"/>
            <seealso cref="T:ComponentSpace.SAML2.Assertions.AttributeStatement"/>
            <seealso cref="M:ComponentSpace.SAML2.Assertions.SAMLAssertion.GetAuthenticationStatements"/>
            <seealso cref="M:ComponentSpace.SAML2.Assertions.SAMLAssertion.GetAuthorizationDecisionStatements"/>
            <seealso cref="M:ComponentSpace.SAML2.Assertions.SAMLAssertion.GetAttributeStatements"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.SAMLAssertion.GetNameID">
            <summary>
            Gets the name identifier from the subject.
            </summary>
            <returns>The name identifier from the subject or <c>null</c> if none.</returns>
            <seealso cref="P:ComponentSpace.SAML2.Assertions.SAMLAssertion.Subject"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.SAMLAssertion.GetAuthenticationStatements">
            <summary>
            Returns all authentication statements. 
            </summary>
            <returns>The authentication statements.</returns>
            <seealso cref="P:ComponentSpace.SAML2.Assertions.SAMLAssertion.Statements"/>
            <seealso cref="T:ComponentSpace.SAML2.Assertions.AuthnStatement"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.SAMLAssertion.GetAuthorizationDecisionStatements">
            <summary>
            Returns all authorization decision statements. 
            </summary>
            <returns>The authorization decision statements.</returns>
            <seealso cref="P:ComponentSpace.SAML2.Assertions.SAMLAssertion.Statements"/>
            <seealso cref="T:ComponentSpace.SAML2.Assertions.AuthzDecisionStatement"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.SAMLAssertion.GetAttributeStatements">
            <summary>
            Returns all attribute statements. 
            </summary>
            <returns>The attribute statements.</returns>
            <seealso cref="P:ComponentSpace.SAML2.Assertions.SAMLAssertion.Statements"/>
            <seealso cref="T:ComponentSpace.SAML2.Assertions.AttributeStatement"/>
            <seealso cref="M:ComponentSpace.SAML2.Assertions.SAMLAssertion.GetAttributes(System.String)"/>
            <seealso cref="M:ComponentSpace.SAML2.Assertions.SAMLAssertion.GetAttributeValue(System.String)"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.SAMLAssertion.GetAttributes(System.String)">
            <summary>
            Returns all unencrypted attributes with the specified name.
            </summary>
            <param name="attributeName">The attribute name.</param>
            <returns>The matching unencrypted attributes.</returns>
            <seealso cref="M:ComponentSpace.SAML2.Assertions.SAMLAssertion.GetAttributeStatements"/>
            <seealso cref="M:ComponentSpace.SAML2.Assertions.SAMLAssertion.GetAttributeValue(System.String)"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.SAMLAssertion.GetAttributeValue(System.String)">
            <summary>
            Returns the value of the unencrypted attribute with the specified name.
            </summary>
            <remarks>
            It's assumed that only one attribute exists with the specified name,
            that the attribute only has one value, and the value is a string.
            If this isn't the case then use one of the other attribute related methods.
            </remarks>
            <param name="attributeName">The attribute name.</param>
            <returns>The attribute value or <c>null</c> if none.</returns>
            <seealso cref="M:ComponentSpace.SAML2.Assertions.SAMLAssertion.GetAttributeStatements"/>
            <seealso cref="M:ComponentSpace.SAML2.Assertions.SAMLAssertion.GetAttributes(System.String)"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.SAMLAssertion.GetAttributesByFriendlyName(System.String)">
            <summary>
            Returns all unencrypted attributes with the specified friendly name.
            </summary>
            <param name="friendlyName">The attribute friendly name.</param>
            <returns>The matching unencrypted attributes.</returns>
            <seealso cref="M:ComponentSpace.SAML2.Assertions.SAMLAssertion.GetAttributeStatements"/>
            <seealso cref="M:ComponentSpace.SAML2.Assertions.SAMLAssertion.GetAttributeValueByFriendlyName(System.String)"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.SAMLAssertion.GetAttributeValueByFriendlyName(System.String)">
            <summary>
            Returns the value of the unencrypted attribute with the specified friendly name.
            </summary>
            <remarks>
            It's assumed that only one attribute exists with the specified friendly name,
            that the attribute only has one value, and the value is a string.
            If this isn't the case then use one of the other attribute related methods.
            </remarks>
            <param name="friendlyName">The attribute friendly name.</param>
            <returns>The attribute value or <c>null</c> if none.</returns>
            <seealso cref="M:ComponentSpace.SAML2.Assertions.SAMLAssertion.GetAttributeStatements"/>
            <seealso cref="M:ComponentSpace.SAML2.Assertions.SAMLAssertion.GetAttributesByFriendlyName(System.String)"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.SAMLAssertion.SetAttributeValue(System.String,System.String)">
            <summary>
            Sets the attribute value by adding an attribute statement containing an attribute with the specified name and value.
            </summary>
            <param name="name">The attribute name.</param>
            <param name="attributeValue">The attribute value.</param>
            <seealso cref="M:ComponentSpace.SAML2.Assertions.SAMLAssertion.SetAttributeValues(System.String[],System.String[])"/>
            <seealso cref="T:ComponentSpace.SAML2.Assertions.AttributeStatement"/>
            <seealso cref="T:ComponentSpace.SAML2.Assertions.SAMLAttribute"/>
            <seealso cref="T:ComponentSpace.SAML2.Assertions.AttributeValue"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.SAMLAssertion.SetAttributeValue(System.String,System.String,System.String)">
            <summary>
            Sets the attribute value by adding an attribute statement containing an attribute with the specified name and value.
            </summary>
            <param name="name">The attribute name.</param>
            <param name="attributeType">The attribute type.</param>
            <param name="attributeValue">The attribute value.</param>
            <seealso cref="M:ComponentSpace.SAML2.Assertions.SAMLAssertion.SetAttributeValues(System.String[],System.String[],System.String[])"/>
            <seealso cref="T:ComponentSpace.SAML2.Assertions.AttributeStatement"/>
            <seealso cref="T:ComponentSpace.SAML2.Assertions.SAMLAttribute"/>
            <seealso cref="T:ComponentSpace.SAML2.Assertions.AttributeValue"/>
            <seealso cref="T:ComponentSpace.SAML2.Utility.XmlSchema.SimpleTypes"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.SAMLAssertion.SetAttributeValues(System.String[],System.String[])">
            <summary>
            Sets the attribute values by adding an attribute statement containing attributes with the specified names and values.
            </summary>
            <param name="names">The attribute names.</param>
            <param name="attributeValues">The attribute values.</param>
            <seealso cref="M:ComponentSpace.SAML2.Assertions.SAMLAssertion.SetAttributeValue(System.String,System.String)"/>
            <seealso cref="T:ComponentSpace.SAML2.Assertions.AttributeStatement"/>
            <seealso cref="T:ComponentSpace.SAML2.Assertions.SAMLAttribute"/>
            <seealso cref="T:ComponentSpace.SAML2.Assertions.AttributeValue"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.SAMLAssertion.SetAttributeValues(System.String[],System.String[],System.String[])">
            <summary>
            Sets the attribute values by adding an attribute statement containing attributes with the specified names and values.
            </summary>
            <param name="names">The attribute names.</param>
            <param name="attributeTypes">The attribute types.</param>
            <param name="attributeValues">The attribute values.</param>
            <seealso cref="M:ComponentSpace.SAML2.Assertions.SAMLAssertion.SetAttributeValue(System.String,System.String,System.String)"/>
            <seealso cref="T:ComponentSpace.SAML2.Assertions.AttributeStatement"/>
            <seealso cref="T:ComponentSpace.SAML2.Assertions.SAMLAttribute"/>
            <seealso cref="T:ComponentSpace.SAML2.Assertions.AttributeValue"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.SAMLAssertion.ToXml">
            <summary>
            Serializes the SAML assertion to XML.
            </summary>
            <remarks>
            An XML document is created.
            </remarks>
            <returns>The SAML assertion as XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.SAMLAssertion.ToXml(System.Xml.XmlDocument)">
            <summary>
            Serializes the SAML assertion to XML.
            </summary>
            <param name="xmlDocument">The owning XML document.</param>
            <returns>The SAML assertion as XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.SAMLAssertion.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialize the SAML assertion.
            </summary>
            <param name="info">The serialization information.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.SAMLAssertion.ToString">
            <summary>
            Converts the SAML assertion to a string.
            </summary>
            <returns>The SAML assertion as a string.</returns>
        </member>
        <member name="T:ComponentSpace.SAML2.Assertions.SAMLAssertionSerializer">
            <summary>
            Permits the serialization and deserialization of SAML assertions.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.SAMLAssertionSerializer.Serialize(ComponentSpace.SAML2.Assertions.SAMLAssertion,System.IO.Stream)">
            <summary>
            Serialize the SAML assertion to the stream.
            </summary>
            <param name="samlAssertion">The SAML assertion.</param>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.SAMLAssertionSerializer.Deserialize(System.IO.Stream)">
            <summary>
            Deserialize the SAML assertion from the stream.
            </summary>
            <param name="stream">The stream.</param>
            <returns>The SAML assertion.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="T:ComponentSpace.SAML2.Assertions.SAMLAssertionSignature">
            <summary>
            Permits XML signature generation and verification for SAML assertions.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.Assertions.SAMLAssertionSignature.DefaultInclusiveNamespacesPrefixList">
            <summary>
            The default inclusive namespace prefix list.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.SAMLAssertionSignature.GetAssertionId(System.Xml.XmlElement)">
            <summary>
            Gets the assertion ID from the SAML assertion.
            </summary>
            <param name="xmlElement">The SAML assertion.</param>
            <returns>The assertion ID.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.SAMLAssertionSignature.AddSignature(System.Xml.XmlElement,System.Xml.XmlElement)">
            <summary>
            Adds the XML signature to the SAML assertion.
            </summary>
            <param name="xmlElement">The SAML assertion.</param>
            <param name="xmlSignature">The XML signature.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.SAMLAssertionSignature.IsSigned(System.Xml.XmlElement)">
            <summary>
            Indicates whether the SAML assertion contains an XML signature.
            </summary>
            <param name="xmlElement">The SAML assertion.</param>
            <returns><c>true</c> if the XML contains an XML signature; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.SAMLAssertionSignature.RemoveSignature(System.Xml.XmlElement)">
            <summary>
            Removes the XML signature, if any, from the SAML assertion.
            </summary>
            <param name="xmlElement">The SAML assertion.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.SAMLAssertionSignature.Generate(System.Xml.XmlElement,System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.Xml.KeyInfo,System.String,System.String,System.String)">
            <summary>
            Generates an XML signature and adds it to the SAML assertion.
            </summary>
            <remarks>
            An XML signature with the constraints specified in the SAML specification is generated
            and added to the SAML assertion. The signature is created using the supplied signing key.
            The key info will be included in the signature.
            <para>
            The generated signature is added to the supplied XML element.
            </para>
            </remarks>
            <param name="xmlElement">The SAML assertion to sign.</param>
            <param name="signingKey">The signing key.</param>
            <param name="keyInfo">The key info to include in the signature.</param>
            <param name="inclusiveNamespacesPrefixList">The inclusive namespace prefix list or <c>null</c> to default to #default saml ds xs xsi.</param>
            <param name="digestMethod">The digest method or <c>null</c> to default to http://www.w3.org/2001/04/xmlenc#sha256. </param>
            <param name="signatureMethod">The signature method or <c>null</c> to default to http://www.w3.org/2001/04/xmldsig-more#rsa-sha256. </param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSignatureException">
            Thrown when the signature generation fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.SAMLAssertionSignature.Generate(System.Xml.XmlElement,System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.Xml.KeyInfo)">
            <summary>
            Generates an XML signature and adds it to the SAML assertion.
            </summary>
            <remarks>
            An XML signature with the constraints specified in the SAML specification is generated
            and added to the SAML assertion. The signature is created using the supplied signing key.
            The key info will be included in the signature.
            <para>
            The generated signature is added to the supplied XML element.
            </para>
            </remarks>
            <param name="xmlElement">The SAML assertion to sign.</param>
            <param name="signingKey">The signing key.</param>
            <param name="keyInfo">The key info to include in the signature.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSignatureException">
            Thrown when the signature generation fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.SAMLAssertionSignature.Generate(System.Xml.XmlElement,System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.Xml.KeyInfoX509Data,System.String,System.String,System.String)">
            <summary>
            Generates an XML signature and adds it to the SAML assertion.
            </summary>
            <remarks>
            An XML signature with the constraints specified in the SAML specification is generated
            and added to the SAML assertion. The signature is created using the supplied signing key.
            Key info, using the supplied X.509 data, is included in the signature.
            <para>
            The generated signature is added to the supplied XML element.
            </para>
            </remarks>
            <param name="xmlElement">The SAML assertion to sign.</param>
            <param name="signingKey">The signing key.</param>
            <param name="keyInfoX509Data">The X.509 data to include in the signature.</param>
            <param name="inclusiveNamespacesPrefixList">The inclusive namespace prefix list or <c>null</c> to default to #default saml ds xs xsi.</param>
            <param name="digestMethod">The digest method or <c>null</c> to default to http://www.w3.org/2001/04/xmlenc#sha256. </param>
            <param name="signatureMethod">The signature method or <c>null</c> to default to http://www.w3.org/2001/04/xmldsig-more#rsa-sha256. </param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSignatureException">
            Thrown when the signature generation fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.SAMLAssertionSignature.Generate(System.Xml.XmlElement,System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.Xml.KeyInfoX509Data)">
            <summary>
            Generates an XML signature and adds it to the SAML assertion.
            </summary>
            <remarks>
            An XML signature with the constraints specified in the SAML specification is generated
            and added to the SAML assertion. The signature is created using the supplied signing key.
            Key info, using the supplied X.509 data, is included in the signature.
            <para>
            The generated signature is added to the supplied XML element.
            </para>
            </remarks>
            <param name="xmlElement">The SAML assertion to sign.</param>
            <param name="signingKey">The signing key.</param>
            <param name="keyInfoX509Data">The X.509 data to include in the signature.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSignatureException">
            Thrown when the signature generation fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.SAMLAssertionSignature.Generate(System.Xml.XmlElement,System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.X509Certificates.X509Certificate2Collection,System.String,System.String,System.String)">
            <summary>
            Generates an XML signature and adds it to the SAML assertion.
            </summary>
            <remarks>
            An XML signature with the constraints specified in the SAML specification is generated
            and added to the SAML assertion. The signature is created using the supplied signing key.
            Key info, using the supplied X.509 certificates, is included in the signature.
            <para>
            The generated signature is added to the supplied XML element.
            </para>
            </remarks>
            <param name="xmlElement">The SAML assertion to sign.</param>
            <param name="signingKey">The signing key.</param>
            <param name="x509Certificates">The list of X.509 certificate to include in the key info.</param>
            <param name="inclusiveNamespacesPrefixList">The inclusive namespace prefix list or <c>null</c> to default to #default saml ds xs xsi.</param>
            <param name="digestMethod">The digest method or <c>null</c> to default to http://www.w3.org/2001/04/xmlenc#sha256. </param>
            <param name="signatureMethod">The signature method or <c>null</c> to default to http://www.w3.org/2001/04/xmldsig-more#rsa-sha256. </param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSignatureException">
            Thrown when the signature generation fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.SAMLAssertionSignature.Generate(System.Xml.XmlElement,System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.X509Certificates.X509Certificate2Collection)">
            <summary>
            Generates an XML signature and adds it to the SAML assertion.
            </summary>
            <remarks>
            An XML signature with the constraints specified in the SAML specification is generated
            and added to the SAML assertion. The signature is created using the supplied signing key.
            Key info, using the supplied X.509 certificates, is included in the signature.
            <para>
            The generated signature is added to the supplied XML element.
            </para>
            </remarks>
            <param name="xmlElement">The SAML assertion to sign.</param>
            <param name="signingKey">The signing key.</param>
            <param name="x509Certificates">The list of X.509 certificate to include in the key info.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSignatureException">
            Thrown when the signature generation fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.SAMLAssertionSignature.Generate(System.Xml.XmlElement,System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.X509Certificates.X509Certificate2,System.String,System.String,System.String)">
            <summary>
            Generates an XML signature and adds it to the SAML assertion.
            </summary>
            <remarks>
            An XML signature with the constraints specified in the SAML specification is generated
            and added to the SAML assertion. The signature is created using the supplied signing key.
            Key info, using the supplied X.509 certificate, is included in the signature.
            <para>
            The generated signature is added to the supplied XML element.
            </para>
            </remarks>
            <param name="xmlElement">The SAML assertion to sign.</param>
            <param name="signingKey">The signing key.</param>
            <param name="x509Certificate">The X.509 certificate to include in the key info.</param>
            <param name="inclusiveNamespacesPrefixList">The inclusive namespace prefix list or <c>null</c> to default to #default saml ds xs xsi.</param>
            <param name="digestMethod">The digest method or <c>null</c> to default to http://www.w3.org/2001/04/xmlenc#sha256. </param>
            <param name="signatureMethod">The signature method or <c>null</c> to default to http://www.w3.org/2001/04/xmldsig-more#rsa-sha256. </param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSignatureException">
            Thrown when the signature generation fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.SAMLAssertionSignature.Generate(System.Xml.XmlElement,System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Generates an XML signature and adds it to the SAML assertion.
            </summary>
            <remarks>
            An XML signature with the constraints specified in the SAML specification is generated
            and added to the SAML assertion. The signature is created using the supplied signing key.
            Key info, using the supplied X.509 certificate, is included in the signature.
            <para>
            The generated signature is added to the supplied XML element.
            </para>
            </remarks>
            <param name="xmlElement">The SAML assertion to sign.</param>
            <param name="signingKey">The signing key.</param>
            <param name="x509Certificate">The X.509 certificate to include in the key info.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSignatureException">
            Thrown when the signature generation fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.SAMLAssertionSignature.Generate(System.Xml.XmlElement,System.Security.Cryptography.AsymmetricAlgorithm,System.String,System.String,System.String)">
            <summary>
            Generates an XML signature and adds it to the SAML assertion.
            </summary>
            <remarks>
            An XML signature with the constraints specified in the SAML specification is generated
            and added to the SAML assertion. The signature is created using the supplied signing key.
            <para>
            The generated signature is added to the supplied XML element.
            </para>
            </remarks>
            <param name="xmlElement">The SAML assertion to sign.</param>
            <param name="signingKey">The signing key.</param>
            <param name="inclusiveNamespacesPrefixList">The inclusive namespace prefix list or <c>null</c> to default to #default saml ds xs xsi.</param>
            <param name="digestMethod">The digest method or <c>null</c> to default to http://www.w3.org/2001/04/xmlenc#sha256. </param>
            <param name="signatureMethod">The signature method or <c>null</c> to default to http://www.w3.org/2001/04/xmldsig-more#rsa-sha256. </param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSignatureException">
            Thrown when the signature generation fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.SAMLAssertionSignature.Generate(System.Xml.XmlElement,System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>
            Generates an XML signature and adds it to the SAML assertion.
            </summary>
            <remarks>
            An XML signature with the constraints specified in the SAML specification is generated
            and added to the SAML assertion. The signature is created using the supplied signing key.
            <para>
            The generated signature is added to the supplied XML element.
            </para>
            </remarks>
            <param name="xmlElement">The SAML assertion to sign.</param>
            <param name="signingKey">The signing key.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSignatureException">
            Thrown when the signature generation fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.SAMLAssertionSignature.Verify(System.Xml.XmlElement,System.Security.Cryptography.Xml.KeyInfo)">
            <summary>
            Verifies the XML signature.
            </summary>
            <remarks>
            The supplied key info is used to perform the verification.
            </remarks>
            <param name="xmlElement">The SAML assertion containing the signature to verify.</param>
            <param name="keyInfo">The key info used to perform the verification or <c>null</c> if none.</param>
            <returns><c>true</c> if the XML signature is correct; otherwise <c>false</c>.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSignatureException">
            Thrown when the signature verification fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.SAMLAssertionSignature.Verify(System.Xml.XmlElement,System.Security.Cryptography.Xml.KeyInfoX509Data)">
            <summary>
            Verifies the XML signature.
            </summary>
            <remarks>
            The supplied X.509 data is used to perform the verification.
            </remarks>
            <param name="xmlElement">The SAML assertion containing the signature to verify.</param>
            <param name="keyInfoX509Data">The X.509 data used to perform the verification or <c>null</c> if none.</param>
            <returns><c>true</c> if the XML signature is correct; otherwise <c>false</c>.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSignatureException">
            Thrown when the signature verification fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.SAMLAssertionSignature.Verify(System.Xml.XmlElement,System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Verifies the XML signature.
            </summary>
            <remarks>
            The supplied X.509 certificate is used to perform the verification.
            </remarks>
            <param name="xmlElement">The SAML assertion containing the signature to verify.</param>
            <param name="x509Certificate">The X.509 certificate used to perform the verification.</param>
            <returns><c>true</c> if the XML signature is correct; otherwise <c>false</c>.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSignatureException">
            Thrown when the signature verification fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.SAMLAssertionSignature.Verify(System.Xml.XmlElement,System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>
            Verifies the XML signature.
            </summary>
            <remarks>
            The supplied public key is used to perform the verification.
            </remarks>
            <param name="xmlElement">The SAML assertion containing the signature to verify.</param>
            <param name="signingKey">The public key used to perform the verification or <c>null</c> if none.</param>
            <returns><c>true</c> if the XML signature is correct; otherwise <c>false</c>.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSignatureException">
            Thrown when the signature verification fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.SAMLAssertionSignature.Verify(System.Xml.XmlElement)">
            <summary>
            Verifies the XML signature.
            </summary>
            <remarks>
            The key info included with the signature is used to perform the verification.
            </remarks>
            <param name="xmlElement">The SAML assertion containing the signature to verify.</param>
            <returns><c>true</c> if the XML signature is correct; otherwise <c>false</c>.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSignatureException">
            Thrown when the signature verification fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.SAMLAssertionSignature.GetKeyInfo(System.Xml.XmlElement)">
            <summary>
            Gets the key info embedded in the XML signature or <c>null</c> if none.
            </summary>
            <param name="xmlElement">The SAML assertion containing the signature with key info.</param>
            <returns>The key info embedded in the XML signature or <c>null</c> if none.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSignatureException">
            Thrown when the key info retrieval fails.
            </exception>
            <seealso cref="M:ComponentSpace.SAML2.Assertions.SAMLAssertionSignature.GetCertificate(System.Xml.XmlElement)"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.SAMLAssertionSignature.GetCertificate(System.Xml.XmlElement)">
            <summary>
            Gets the X.509 certificate embedded in the XML signature or <c>null</c> if none.
            </summary>
            <param name="xmlElement">The SAML assertion containing the signature with X.509 certificate.</param>
            <returns>The X.509 certificate embedded in the XML signature or <c>null</c> if none.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSignatureException">
            Thrown when the X.509 certificate retrieval fails.
            </exception>
            <seealso cref="M:ComponentSpace.SAML2.Assertions.SAMLAssertionSignature.GetKeyInfo(System.Xml.XmlElement)"/>
        </member>
        <member name="T:ComponentSpace.SAML2.Assertions.SAMLAttribute">
            <summary>
            Represents an attribute.
            </summary>
            <remarks>
            Refer to the Assertions and Protocol for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.SAMLAttribute.IsValid(System.Xml.XmlElement)">
            <summary>
            Indicates whether the XML is an attribute.
            </summary>
            <param name="xmlElement">The XML to test.</param>
            <returns><c>true</c> if the XML is an attribute; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.SAMLAttribute.#ctor">
            <summary>
            Initializes a new instance of the <c>SAMLAttribute</c> class.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.SAMLAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <c>SAMLAttribute</c> class.
            </summary>
            <param name="name">The attribute name.</param>
            <param name="nameFormat">The name format.</param>
            <param name="friendlyName">The friendly name.</param>
            <seealso cref="T:ComponentSpace.SAML2.SAMLIdentifiers.AttributeNameFormats"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.SAMLAttribute.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <c>SAMLAttribute</c> class.
            </summary>
            <param name="name">The attribute name.</param>
            <param name="nameFormat">The name format.</param>
            <param name="friendlyName">The friendly name.</param>
            <param name="attributeValue">The attribute value.</param>
            <seealso cref="T:ComponentSpace.SAML2.SAMLIdentifiers.AttributeNameFormats"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.SAMLAttribute.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <c>SAMLAttribute</c> class.
            </summary>
            <param name="name">The attribute name.</param>
            <param name="nameFormat">The name format.</param>
            <param name="friendlyName">The friendly name.</param>
            <param name="attributeType">The attribute type.</param>
            <param name="attributeValue">The attribute value.</param>
            <seealso cref="T:ComponentSpace.SAML2.SAMLIdentifiers.AttributeNameFormats"/>
            <seealso cref="T:ComponentSpace.SAML2.Utility.XmlSchema.SimpleTypes"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.SAMLAttribute.#ctor(System.String,System.String,System.String,System.String,System.Object)">
            <summary>
            Initializes a new instance of the <c>SAMLAttribute</c> class.
            </summary>
            <param name="name">The attribute name.</param>
            <param name="nameFormat">The name format.</param>
            <param name="friendlyName">The friendly name.</param>
            <param name="attributeType">The attribute type.</param>
            <param name="attributeValue">The attribute value.</param>
            <seealso cref="T:ComponentSpace.SAML2.SAMLIdentifiers.AttributeNameFormats"/>
            <seealso cref="T:ComponentSpace.SAML2.Utility.XmlSchema.SimpleTypes"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.SAMLAttribute.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <c>SAMLAttribute</c> class from XML.
            </summary>
            <param name="xmlElement">The attribute XML.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.SAMLAttribute.ToXml(System.Xml.XmlDocument)">
            <summary>
            Serializes the attribute to XML.
            </summary>
            <param name="xmlDocument">The owning XML document.</param>
            <returns>The attribute as XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="T:ComponentSpace.SAML2.Assertions.SignedAssertion">
            <summary>
            Supports XML signatures on SAML assertions.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.SignedAssertion.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <c>SignedAssertion</c> class.
            </summary>
            <param name="xmlElement">The XML element.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.SignedAssertion.GetIdElement(System.Xml.XmlDocument,System.String)">
            <summary>
            Gets the SAML assertion with the specified ID.
            </summary>
            <param name="document">The XML document.</param>
            <param name="id">The assertion ID.</param>
            <returns>The SAML assertion.</returns>
        </member>
        <member name="T:ComponentSpace.SAML2.Assertions.StringAttributeValueSerializer">
            <summary>
            Serializes string attribute values to XML.
            The attribute value is a string.
            </summary>
            <seealso cref="T:ComponentSpace.SAML2.Assertions.AttributeValue"/>
            <seealso cref="M:ComponentSpace.SAML2.Assertions.AttributeType.RegisterAttributeValueSerializer(System.String,System.String,ComponentSpace.SAML2.Assertions.IAttributeValueSerializer)"/>
            <seealso cref="T:ComponentSpace.SAML2.Assertions.XmlAttributeValueSerializer"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.StringAttributeValueSerializer.#ctor">
            <summary>
            Initializes a new instance of the <c>StringAttributeValueSerializer</c> class.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.StringAttributeValueSerializer.Serialize(System.Xml.XmlElement,System.Object)">
            <summary>
            Serialize the string attribute value to XML.
            </summary>
            <param name="parentElement">The parent element of the attribute value.</param>
            <param name="attributeValue">The attribute value.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.StringAttributeValueSerializer.Deserialize(System.Xml.XmlElement)">
            <summary>
            Deserializes the string attribute value from XML.
            </summary>
            <param name="parentElement">The parent element of the attribute value.</param>
            <returns>The attribute value.</returns>
        </member>
        <member name="T:ComponentSpace.SAML2.Assertions.Subject">
            <summary>
            Represents a subject.
            </summary>
            <remarks>
            Refer to the Assertions and Protocol for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.Subject.IsValid(System.Xml.XmlElement)">
            <summary>
            Indicates whether the XML is a subject.
            </summary>
            <param name="xmlElement">The XML to test.</param>
            <returns><c>true</c> if the XML is a subject; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.Subject.#ctor">
            <summary>
            Initializes a new instance of the <c>Subject</c> class.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.Subject.#ctor(ComponentSpace.SAML2.Assertions.BaseID)">
            <summary>
            Initializes a new instance of the <c>Subject</c> class.
            </summary>
            <param name="baseID">The base identifier.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.Subject.#ctor(ComponentSpace.SAML2.Assertions.NameID)">
            <summary>
            Initializes a new instance of the <c>Subject</c> class.
            </summary>
            <param name="nameID">The name identifier.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.Subject.#ctor(ComponentSpace.SAML2.Assertions.EncryptedID)">
            <summary>
            Initializes a new instance of the <c>Subject</c> class.
            </summary>
            <param name="encryptedID">The encrypted identifier.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.Subject.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <c>Subject</c> class from XML.
            </summary>
            <param name="xmlElement">The subject XML.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentSpace.SAML2.Assertions.Subject.BaseID">
            <summary>
            Gets or sets the base identifier. 
            </summary>
            <value>
            The base identifier.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Assertions.Subject.NameID">
            <summary>
            Gets or sets the name identifier. 
            </summary>
            <value>
            The name identifier.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Assertions.Subject.EncryptedID">
            <summary>
            Gets or sets the encrypted identifier. 
            </summary>
            <value>
            The encrypted identifier.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Assertions.Subject.SubjectConfirmations">
            <summary>
            Gets or sets the subject confirmations. 
            </summary>
            <value>
            The subject confirmations.
            </value>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.Subject.ToXml(System.Xml.XmlDocument)">
            <summary>
            Serializes the subject to XML.
            </summary>
            <param name="xmlDocument">The owning XML document.</param>
            <returns>The subject as XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="T:ComponentSpace.SAML2.Assertions.SubjectConfirmation">
            <summary>
            Represents a subject confirmation.
            </summary>
            <remarks>
            Refer to the Assertions and Protocol for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.SubjectConfirmation.IsValid(System.Xml.XmlElement)">
            <summary>
            Indicates whether the XML is a subject confirmation.
            </summary>
            <param name="xmlElement">The XML to test.</param>
            <returns><c>true</c> if the XML is a subject confirmation; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.SubjectConfirmation.#ctor">
            <summary>
            Initializes a new instance of the <c>SubjectConfirmation</c> class.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.SubjectConfirmation.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>SubjectConfirmation</c> class.
            </summary>
            <param name="method">The method.</param>
            <seealso cref="T:ComponentSpace.SAML2.SAMLIdentifiers.SubjectConfirmationMethods"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.SubjectConfirmation.#ctor(System.String,ComponentSpace.SAML2.Assertions.BaseID)">
            <summary>
            Initializes a new instance of the <c>SubjectConfirmation</c> class.
            </summary>
            <param name="method">The method.</param>
            <param name="baseID">The base identifier.</param>
            <seealso cref="T:ComponentSpace.SAML2.SAMLIdentifiers.SubjectConfirmationMethods"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.SubjectConfirmation.#ctor(System.String,ComponentSpace.SAML2.Assertions.NameID)">
            <summary>
            Initializes a new instance of the <c>SubjectConfirmation</c> class.
            </summary>
            <param name="method">The method.</param>
            <param name="nameID">The name identifier.</param>
            <seealso cref="T:ComponentSpace.SAML2.SAMLIdentifiers.SubjectConfirmationMethods"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.SubjectConfirmation.#ctor(System.String,ComponentSpace.SAML2.Assertions.EncryptedID)">
            <summary>
            Initializes a new instance of the <c>SubjectConfirmation</c> class.
            </summary>
            <param name="method">The method.</param>
            <param name="encryptedID">The encrypted identifier.</param>
            <seealso cref="T:ComponentSpace.SAML2.SAMLIdentifiers.SubjectConfirmationMethods"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.SubjectConfirmation.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <c>SubjectConfirmation</c> class from XML.
            </summary>
            <param name="xmlElement">The subject confirmation XML.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentSpace.SAML2.Assertions.SubjectConfirmation.Method">
            <summary>
            Gets or sets the method. 
            </summary>
            <value>
            The method.
            </value>
            <seealso cref="T:ComponentSpace.SAML2.SAMLIdentifiers.SubjectConfirmationMethods"/>
        </member>
        <member name="P:ComponentSpace.SAML2.Assertions.SubjectConfirmation.BaseID">
            <summary>
            Gets or sets the base identifier. 
            </summary>
            <value>
            The base identifier.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Assertions.SubjectConfirmation.NameID">
            <summary>
            Gets or sets the name identifier. 
            </summary>
            <value>
            The name identifier.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Assertions.SubjectConfirmation.EncryptedID">
            <summary>
            Gets or sets the encrypted identifier. 
            </summary>
            <value>
            The encrypted identifier.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Assertions.SubjectConfirmation.SubjectConfirmationData">
            <summary>
            Gets or sets the subject confirmation data. 
            </summary>
            <value>
            The subject confirmation data.
            </value>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.SubjectConfirmation.ToXml(System.Xml.XmlDocument)">
            <summary>
            Serializes the subject confirmation to XML.
            </summary>
            <param name="xmlDocument">The owning XML document.</param>
            <returns>The subject confirmation as XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="T:ComponentSpace.SAML2.Assertions.SubjectConfirmationData">
            <summary>
            Represents subject confirmation data.
            </summary>
            <remarks>
            Refer to the Assertions and Protocol for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.SubjectConfirmationData.IsValid(System.Xml.XmlElement)">
            <summary>
            Indicates whether the XML is subject confirmation data.
            </summary>
            <param name="xmlElement">The XML to test.</param>
            <returns><c>true</c> if the XML is subject confirmation data; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.SubjectConfirmationData.#ctor">
            <summary>
            Initializes a new instance of the <c>SubjectConfirmationData</c> class.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.SubjectConfirmationData.#ctor(System.DateTime,System.DateTime)">
            <summary>
            Initializes a new instance of the <c>SubjectConfirmationData</c> class.
            </summary>
            <param name="notBefore">The not before time as coordinated universal time (UTC).</param>
            <param name="notOnOrAfter">The not on or after time as coordinated universal time (UTC).</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.SubjectConfirmationData.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new instance of the <c>SubjectConfirmationData</c> class.
            </summary>
            <remarks>
            The not before time is calculated as the current UTC time less the time span.
            The not on or after time is calculated as the current UTC time plus the time span.
            </remarks>
            <param name="timeSpan">The timespan before and after now.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.SubjectConfirmationData.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <c>SubjectConfirmationData</c> class from XML.
            </summary>
            <param name="xmlElement">The subject confirmation data XML.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentSpace.SAML2.Assertions.SubjectConfirmationData.NotBefore">
            <summary>
            Gets or sets the not before time. 
            </summary>
            <value>
            The not before time as coordinated universal time (UTC).
            A value of DateTime.MinValue indicates the value has not been set.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Assertions.SubjectConfirmationData.NotOnOrAfter">
            <summary>
            Gets or sets the not on or after time. 
            </summary>
            <value>
            The not on or after time as coordinated universal time (UTC). 
            A value of DateTime.MaxValue indicates the value has not been set.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Assertions.SubjectConfirmationData.Recipient">
            <summary>
            Gets or sets the recipient. 
            </summary>
            <value>
            The recipient. 
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Assertions.SubjectConfirmationData.InResponseTo">
            <summary>
            Gets or sets the in response to value. 
            </summary>
            <value>
            The in response to value. 
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Assertions.SubjectConfirmationData.Address">
            <summary>
            Gets or sets the address. 
            </summary>
            <value>
            The address. 
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Assertions.SubjectConfirmationData.Attributes">
            <summary>
            Gets or sets the XML attributes. 
            </summary>
            <value>
            The XML attributes.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Assertions.SubjectConfirmationData.Data">
            <summary>
            Gets or sets the data. 
            </summary>
            <value>
            The data.
            </value>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.SubjectConfirmationData.IsWithinTimePeriod">
            <summary>
            Indicates whether the current UTC time is within the not before 
            and not on or after period, if specified.
            </summary>
            <remarks>
            To be within the time period, not before > UTC now >= not on or after
            </remarks>
            <returns><c>true</c> if within the time period; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.SubjectConfirmationData.IsWithinTimePeriod(System.TimeSpan)">
            <summary>
            Indicates whether the current UTC time is within the not before 
            and not on or after period, if specified. The supplied time span is to
            allow for clock skew.
            </summary>
            <remarks>
            To be within the time period, 
            not before - clock skew > UTC now >= not on or after + clock skew
            </remarks>
            <param name="clockSkew">The time span to allow for clock skew.</param>
            <returns><c>true</c> if within the time period; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.SubjectConfirmationData.ToXml(System.Xml.XmlDocument)">
            <summary>
            Serializes the subject confirmation data to XML.
            </summary>
            <param name="xmlDocument">The owning XML document.</param>
            <returns>The subject confirmation data as XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="T:ComponentSpace.SAML2.Assertions.SubjectLocality">
            <summary>
            Represents a subject locality.
            </summary>
            <remarks>
            Refer to the Assertions and Protocol for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.SubjectLocality.IsValid(System.Xml.XmlElement)">
            <summary>
            Indicates whether the XML is a subject locality.
            </summary>
            <param name="xmlElement">The XML to test.</param>
            <returns><c>true</c> if the XML is a subject locality; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.SubjectLocality.#ctor">
            <summary>
            Initializes a new instance of the <c>SubjectLocality</c> class.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.SubjectLocality.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <c>SubjectLocality</c> class from XML.
            </summary>
            <param name="xmlElement">The subject locality XML.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentSpace.SAML2.Assertions.SubjectLocality.Address">
            <summary>
            Gets or sets the address. 
            </summary>
            <value>
            The address.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Assertions.SubjectLocality.DNSName">
            <summary>
            Gets or sets the DNS name. 
            </summary>
            <value>
            The DNS name.
            </value>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.SubjectLocality.ToXml(System.Xml.XmlDocument)">
            <summary>
            Serializes the subject locality to XML.
            </summary>
            <param name="xmlDocument">The owning XML document.</param>
            <returns>The subject locality as XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="T:ComponentSpace.SAML2.Assertions.XmlAttributeValueSerializer">
            <summary>
            Serializes XML element attribute values to XML.
            The attribute value is an <c>XmlElement</c>.
            </summary>
            <seealso cref="T:ComponentSpace.SAML2.Assertions.AttributeValue"/>
            <seealso cref="M:ComponentSpace.SAML2.Assertions.AttributeType.RegisterAttributeValueSerializer(System.String,System.String,ComponentSpace.SAML2.Assertions.IAttributeValueSerializer)"/>
            <seealso cref="T:ComponentSpace.SAML2.Assertions.StringAttributeValueSerializer"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.XmlAttributeValueSerializer.#ctor">
            <summary>
            Initializes a new instance of the <c>XmlAttributeValueSerializer</c> class.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.XmlAttributeValueSerializer.Serialize(System.Xml.XmlElement,System.Object)">
            <summary>
            Serialize the XML element attribute value to XML.
            </summary>
            <param name="parentElement">The parent element of the attribute value.</param>
            <param name="attributeValue">The attribute value.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Assertions.XmlAttributeValueSerializer.Deserialize(System.Xml.XmlElement)">
            <summary>
            Deserializes the XML element attribute value from XML.
            </summary>
            <param name="parentElement">The parent element of the attribute value.</param>
            <returns>The attribute value.</returns>
        </member>
        <member name="T:ComponentSpace.SAML2.Bindings.HTTPArtifact">
            <summary>
            Represents an artifact used in the HTTP artifact binding.
            </summary>
            <remarks>
            Refer to the Bindings for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="F:ComponentSpace.SAML2.Bindings.HTTPArtifact.TypeCodeLength">
            <summary>
            The type code length in bytes
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.Bindings.HTTPArtifact.EndpointIndexLength">
            <summary>
            The endpoint index length in bytes
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.Bindings.HTTPArtifact.ArtifactMinimumLength">
            <summary>
            The minimum length in bytes
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.HTTPArtifact.#ctor">
            <summary>
            Initializes a new instance of the <c>HTTPArtifact</c> class.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.HTTPArtifact.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <c>HTTPArtifact</c> class.
            </summary>
            <param name="typeCode">The 2 byte type code.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.HTTPArtifact.#ctor(System.Byte[],System.Byte[])">
            <summary>
            Initializes a new instance of the <c>HTTPArtifact</c> class.
            </summary>
            <param name="typeCode">The 2 byte type code.</param>
            <param name="endpointIndex">The 2 byte endpoint index.</param>
        </member>
        <member name="P:ComponentSpace.SAML2.Bindings.HTTPArtifact.TypeCode">
            <summary>
            Gets or sets the 2 byte type code. 
            </summary>
            <value>
            The 2 byte type code.
            </value>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLBindingException">
            Thrown when the type code is invalid.
            </exception>
        </member>
        <member name="P:ComponentSpace.SAML2.Bindings.HTTPArtifact.EndpointIndex">
            <summary>
            Gets or sets the 2 byte endpoint index. 
            </summary>
            <value>
            The 2 byte endpoint index.
            </value>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLBindingException">
            Thrown when the endpoint index is invalid.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.HTTPArtifact.FromArray(System.Byte[])">
            <summary>
            Initializes the <c>Artifact</c> class from a byte array.
            </summary>
            <param name="artifact">The artifact as a byte array</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLBindingException">
            Thrown when the artifact is invalid.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.HTTPArtifact.ToArray">
            <summary>
            Returns the artifact as a byte array.
            </summary>
            <returns>The artifact as a byte array.</returns>
        </member>
        <member name="T:ComponentSpace.SAML2.Bindings.HTTPArtifactBinding">
            <summary>
            Supports the HTTP artifact binding.
            </summary>
            <remarks>
            Refer to the Bindings for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
            <seealso cref="T:ComponentSpace.SAML2.SAMLIdentifiers.BindingURIs"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.HTTPArtifactBinding.SendArtifactInForm(System.Web.HttpResponseBase,System.String,ComponentSpace.SAML2.Bindings.HTTPArtifact,System.String)">
            <summary>
            Sends the SAML artifact and optional relay state data as hidden controls in a posted form.
            </summary>
            <param name="httpResponse">The HTTP response that will return the form to post.</param>
            <param name="targetURL">The target URL for the posted form.</param>
            <param name="artifact">The SAML artifact.</param>
            <param name="relayState">The relay state or <c>null</c> if none.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLBindingException">
            Thrown when the send fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.HTTPArtifactBinding.SendArtifactInForm(System.Web.HttpResponse,System.String,ComponentSpace.SAML2.Bindings.HTTPArtifact,System.String)">
            <summary>
            Sends the SAML artifact and optional relay state data as hidden controls in a posted form.
            </summary>
            <param name="httpResponse">The HTTP response that will return the form to post.</param>
            <param name="targetURL">The target URL for the posted form.</param>
            <param name="artifact">The SAML artifact.</param>
            <param name="relayState">The relay state or <c>null</c> if none.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLBindingException">
            Thrown when the send fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.HTTPArtifactBinding.SendArtifactInQueryString(System.Web.HttpResponseBase,System.String,ComponentSpace.SAML2.Bindings.HTTPArtifact,System.String)">
            <summary>
            Sends the SAML artifact and optional relay state data as query string parameters in an HTTP redirect.
            </summary>
            <param name="httpResponse">The HTTP response used to perform the redirect.</param>
            <param name="redirectURL">The redirect URL.</param>
            <param name="artifact">The SAML artifact.</param>
            <param name="relayState">The relay state or <c>null</c> if none.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLBindingException">
            Thrown when the send fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.HTTPArtifactBinding.SendArtifactInQueryString(System.Web.HttpResponse,System.String,ComponentSpace.SAML2.Bindings.HTTPArtifact,System.String)">
            <summary>
            Sends the SAML artifact and optional relay state data as query string parameters in an HTTP redirect.
            </summary>
            <param name="httpResponse">The HTTP response used to perform the redirect.</param>
            <param name="redirectURL">The redirect URL.</param>
            <param name="artifact">The SAML artifact.</param>
            <param name="relayState">The relay state or <c>null</c> if none.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLBindingException">
            Thrown when the send fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.HTTPArtifactBinding.ReceiveArtifactInForm(System.Web.HttpRequestBase,ComponentSpace.SAML2.Bindings.HTTPArtifact@,System.String@)">
            <summary>
            Receives the SAML artifact and optional relay state data from the form's hidden controls.
            </summary>
            <param name="httpRequest">The HTTP request containing the posted form.</param>
            <param name="artifact">The returned SAML artifact.</param>
            <param name="relayState">The returned relay state or <c>null</c> if none.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLBindingException">
            Thrown when the receive fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.HTTPArtifactBinding.ReceiveArtifactInForm(System.Web.HttpRequest,ComponentSpace.SAML2.Bindings.HTTPArtifact@,System.String@)">
            <summary>
            Receives the SAML artifact and optional relay state data from the form's hidden controls.
            </summary>
            <param name="httpRequest">The HTTP request containing the posted form.</param>
            <param name="artifact">The returned SAML artifact.</param>
            <param name="relayState">The returned relay state or <c>null</c> if none.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLBindingException">
            Thrown when the receive fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.HTTPArtifactBinding.ReceiveArtifactInForm(System.Web.HttpRequestBase,System.String@,System.String@)">
            <summary>
            Receives the SAML artifact and optional relay state data from the form's hidden controls.
            </summary>
            <param name="httpRequest">The HTTP request containing the posted form.</param>
            <param name="artifact">The returned SAML artifact.</param>
            <param name="relayState">The returned relay state or <c>null</c> if none.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLBindingException">
            Thrown when the receive fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.HTTPArtifactBinding.ReceiveArtifactInForm(System.Web.HttpRequest,System.String@,System.String@)">
            <summary>
            Receives the SAML artifact and optional relay state data from the form's hidden controls.
            </summary>
            <param name="httpRequest">The HTTP request containing the posted form.</param>
            <param name="artifact">The returned SAML artifact.</param>
            <param name="relayState">The returned relay state or <c>null</c> if none.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLBindingException">
            Thrown when the receive fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.HTTPArtifactBinding.ReceiveArtifactInQueryString(System.Web.HttpRequestBase,ComponentSpace.SAML2.Bindings.HTTPArtifact@,System.String@)">
            <summary>
            Receives the SAML artifact and optional relay state by extracting them from the query string.
            </summary>
            <param name="httpRequest">The HTTP request containing the query string.</param>
            <param name="artifact">The returned SAML artifact.</param>
            <param name="relayState">The returned relay state or <c>null</c> if none.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLBindingException">
            Thrown when the receive fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.HTTPArtifactBinding.ReceiveArtifactInQueryString(System.Web.HttpRequest,ComponentSpace.SAML2.Bindings.HTTPArtifact@,System.String@)">
            <summary>
            Receives the SAML artifact and optional relay state by extracting them from the query string.
            </summary>
            <param name="httpRequest">The HTTP request containing the query string.</param>
            <param name="artifact">The returned SAML artifact.</param>
            <param name="relayState">The returned relay state or <c>null</c> if none.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLBindingException">
            Thrown when the receive fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.HTTPArtifactBinding.ReceiveArtifactInQueryString(System.Web.HttpRequestBase,System.String@,System.String@)">
            <summary>
            Receives the SAML artifact and optional relay state by extracting them from the query string.
            </summary>
            <param name="httpRequest">The HTTP request containing the query string.</param>
            <param name="artifact">The returned SAML artifact.</param>
            <param name="relayState">The returned relay state or <c>null</c> if none.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLBindingException">
            Thrown when the receive fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.HTTPArtifactBinding.ReceiveArtifactInQueryString(System.Web.HttpRequest,System.String@,System.String@)">
            <summary>
            Receives the SAML artifact and optional relay state by extracting them from the query string.
            </summary>
            <param name="httpRequest">The HTTP request containing the query string.</param>
            <param name="artifact">The returned SAML artifact.</param>
            <param name="relayState">The returned relay state or <c>null</c> if none.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLBindingException">
            Thrown when the receive fails.
            </exception>
        </member>
        <member name="T:ComponentSpace.SAML2.Bindings.HTTPArtifactState">
            <summary>
            Provides storage for state information when using the HTTP artifact binding.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.HTTPArtifactState.#ctor">
            <summary>
            Initializes a new instance of the <c>HTTPArtifactState</c> class.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.HTTPArtifactState.#ctor(System.Xml.XmlElement,System.Object)">
            <summary>
            Initializes a new instance of the <c>HTTPArtifactState</c> class.
            </summary>
            <param name="samlMessage">The SAML message associated with the artifact.</param>
            <param name="additionalState">Additional state information or <c>null</c> if none.</param>
        </member>
        <member name="P:ComponentSpace.SAML2.Bindings.HTTPArtifactState.SAMLMessage">
            <summary>
            Gets or sets the SAML message associated with the artifact. 
            </summary>
            <value>
            The SAML message.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Bindings.HTTPArtifactState.AdditionalState">
            <summary>
            Gets or sets the additional state information. 
            </summary>
            <value>
            The additional state information or <c>null</c> if none.
            </value>
        </member>
        <member name="T:ComponentSpace.SAML2.Bindings.HTTPArtifactStateCache">
            <summary>
            Provides a cache for storing <c>HTTPArtifactState</c>.
            </summary>
            <remarks>
            The cache is implemented using the <c>System.Web.Caching.Cache</c>.
            Use of this cache is entirely optional. 
            Refer to the <c>System.Web.Caching.Cache</c> documentation for usage restrictions.
            </remarks>
        </member>
        <member name="P:ComponentSpace.SAML2.Bindings.HTTPArtifactStateCache.Expiration">
            <summary>
            Gets or sets the expiration time span for cached artifact state entries. 
            </summary>
            <value>
            The expiration time span for cached artifact state entries.
            </value>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.HTTPArtifactStateCache.Add(ComponentSpace.SAML2.Bindings.HTTPArtifact,ComponentSpace.SAML2.Bindings.HTTPArtifactState)">
            <summary>
            Adds an entry to the cache.
            </summary>
            <param name="httpArtifact">The artifact whose string value is used as a cache key.</param>
            <param name="httpArtifactState">The item to cache.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.HTTPArtifactStateCache.Get(ComponentSpace.SAML2.Bindings.HTTPArtifact)">
            <summary>
            Gets an entry from the cache.
            </summary>
            <param name="httpArtifact">The artifact whose string value is used as a cache key.</param>
            <returns>The cached item or <c>null</c> if none.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.HTTPArtifactStateCache.Remove(ComponentSpace.SAML2.Bindings.HTTPArtifact)">
            <summary>
            Removes an entry from the cache.
            </summary>
            <param name="httpArtifact">The artifact whose string value is used as a cache key.</param>
            <returns>The item removed from the cache or <c>null</c> if none.</returns>
        </member>
        <member name="T:ComponentSpace.SAML2.Bindings.HTTPArtifactType4">
            <summary>
            Represents a type 4 artifact used in the HTTP artifact binding.
            </summary>
            <remarks>
            Refer to the Bindings for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="F:ComponentSpace.SAML2.Bindings.HTTPArtifactType4.SourceIDLength">
            <summary>
            The source identifier length.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.Bindings.HTTPArtifactType4.MessageHandleLength">
            <summary>
            The message handle length.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.Bindings.HTTPArtifactType4.ArtifactType4Length">
            <summary>
            The type 4 artifact length.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.HTTPArtifactType4.CreateSourceId(System.String)">
            <summary>
            Creates a source identifier by computing the SHA-1 hash of the identification URL.
            </summary>
            <param name="identificationURL">The identification URL.</param>
            <returns>The source identifier.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.HTTPArtifactType4.CreateMessageHandle">
            <summary>
            Creates a message handle from a random GUID.
            </summary>
            <returns>The 20 byte message handle.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.HTTPArtifactType4.IsValid(System.String)">
            <summary>
            Indicates whether the artifact is valid or not.
            </summary>
            <param name="artifact">The base 64 encoded artifact.</param>
            <returns><c>true</c> if the artifact is valid; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.HTTPArtifactType4.#ctor">
            <summary>
            Initializes a new instance of the <c>HTTPArtifactType4</c> class.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.HTTPArtifactType4.#ctor(System.Byte[],System.Byte[])">
            <summary>
            Initializes a new instance of the <c>HTTPArtifactType4</c> class.
            </summary>
            <param name="sourceID">The 20 byte source ID.</param>
            <param name="messageHandle">The 20 byte message handle.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLBindingException">
            Thrown when the artifact is invalid.
            </exception>
            <seealso cref="M:ComponentSpace.SAML2.Bindings.HTTPArtifactType4.CreateSourceId(System.String)"/>
            <seealso cref="M:ComponentSpace.SAML2.Bindings.HTTPArtifactType4.CreateMessageHandle"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.HTTPArtifactType4.#ctor(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Initializes a new instance of the <c>HTTPArtifactType4</c> class.
            </summary>
            <param name="endpointIndex">The 2 byte endpoint index.</param>
            <param name="sourceID">The 20 byte source ID.</param>
            <param name="messageHandle">The 20 byte message handle.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLBindingException">
            Thrown when the artifact is invalid.
            </exception>
            <seealso cref="M:ComponentSpace.SAML2.Bindings.HTTPArtifactType4.CreateSourceId(System.String)"/>
            <seealso cref="M:ComponentSpace.SAML2.Bindings.HTTPArtifactType4.CreateMessageHandle"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.HTTPArtifactType4.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>HTTPArtifactType4</c> class.
            </summary>
            <param name="artifact">The base 64 encoded artifact.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLBindingException">
            Thrown when the artifact is invalid.
            </exception>
        </member>
        <member name="P:ComponentSpace.SAML2.Bindings.HTTPArtifactType4.SourceID">
            <summary>
            Gets or sets the 20 byte source ID. 
            </summary>
            <value>
            The 20 byte source ID.
            </value>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLBindingException">
            Thrown when the source ID is invalid.
            </exception>
            <seealso cref="M:ComponentSpace.SAML2.Bindings.HTTPArtifactType4.CreateSourceId(System.String)"/>
        </member>
        <member name="P:ComponentSpace.SAML2.Bindings.HTTPArtifactType4.MessageHandle">
            <summary>
            Gets or sets the 20 byte message handle. 
            </summary>
            <value>
            The 20 byte message handle.
            </value>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLBindingException">
            Thrown when the message handle is invalid.
            </exception>
            <seealso cref="M:ComponentSpace.SAML2.Bindings.HTTPArtifactType4.CreateMessageHandle"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.HTTPArtifactType4.ToString">
            <summary>
            Returns the base 64 encoded artifact.
            </summary>
            <returns>The base 64 encoded artifact</returns>
        </member>
        <member name="T:ComponentSpace.SAML2.Bindings.HTTPPostBinding">
            <summary>
            Supports the HTTP POST binding.
            </summary>
            <remarks>
            Refer to the Bindings for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
            <seealso cref="T:ComponentSpace.SAML2.SAMLIdentifiers.BindingURIs"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.HTTPPostBinding.PostForm(System.IO.Stream,System.String,System.String,System.Xml.XmlElement,System.String)">
            <summary>
            Writes the SAML message and optional relay state data as hidden controls in a posted form to the stream.
            </summary>
            <param name="stream">The output stream.</param>
            <param name="messageFormVariableName">The form variable name of the message.</param>
            <param name="targetURL">The target URL for the posted form.</param>
            <param name="samlMessage">The SAML message.</param>
            <param name="relayState">The relay state or <c>null</c> if none.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.HTTPPostBinding.GetFormVariables(System.Web.HttpRequestBase,System.String,System.Xml.XmlElement@,System.String@)">
            <summary>
             Gets the SAML message and optional relay state data by extracting them from the posted form.
            </summary>
            <param name="httpRequest">The HTTP request containing the posted form.</param>
            <param name="messageFormVariableName">The form variable name of the message.</param>
            <param name="samlMessage">The SAML message.</param>
            <param name="relayState">The relay state or <c>null</c> if none.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.HTTPPostBinding.GetFormVariables(System.Web.HttpRequest,System.String,System.Xml.XmlElement@,System.String@)">
            <summary>
             Gets the SAML message and optional relay state data by extracting them from the posted form.
            </summary>
            <param name="httpRequest">The HTTP request containing the posted form.</param>
            <param name="messageFormVariableName">The form variable name of the message.</param>
            <param name="samlMessage">The SAML message.</param>
            <param name="relayState">The relay state or <c>null</c> if none.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.HTTPPostBinding.CreatePostData(System.String,System.Xml.XmlElement,System.String)">
            <summary>
            Creates HTTP POST data from the SAML message and optional relay state.
            </summary>
            <param name="messageFormVariableName">The form variable name of the message.</param>
            <param name="samlMessage">The SAML message.</param>
            <param name="relayState">The relay state or <c>null</c> if none.</param>
            <returns>The HTTP POST data.</returns>
        </member>
        <member name="P:ComponentSpace.SAML2.Bindings.HTTPPostBinding.HTMLFormTarget">
            <summary>
            Gets or sets the HTML form target.
            </summary>
            <remarks>
            The target may be: _self, _blank, _parent or _top. The default is _self.
            </remarks>
            <value>
            The HTML form action target.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Bindings.HTTPPostBinding.HTMLFormTemplate">
            <summary>
            Gets or sets the HTML form template that's used when posting. 
            </summary>
            <value>
            The HTML form template that's used when posting.
            </value>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.HTTPPostBinding.CreateContentSecurityPolicyHashedScriptSource">
            <summary>
            Creates a SHA-256 hashed script source for inclusion in a Content-Security-Policy header.
            </summary>
            <returns>The hashed script source.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.HTTPPostBinding.CreateRequestPostData(System.Xml.XmlElement,System.String)">
            <summary>
            Creates HTTP POST data from the SAML request and optional relay state.
            </summary>
            <param name="samlMessage">The SAML request.</param>
            <param name="relayState">The relay state or <c>null</c> if none.</param>
            <returns>The HTTP POST data.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.HTTPPostBinding.CreateResponsePostData(System.Xml.XmlElement,System.String)">
            <summary>
            Creates HTTP POST data from the SAML response and optional relay state.
            </summary>
            <param name="samlMessage">The SAML response.</param>
            <param name="relayState">The relay state or <c>null</c> if none.</param>
            <returns>The HTTP POST data.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.HTTPPostBinding.SendRequest(System.IO.Stream,System.String,System.Xml.XmlElement,System.String)">
            <summary>
            Sends the SAML request and optional relay state data as hidden controls in a posted form.
            </summary>
            <param name="stream">The stream to which the form is written.</param>
            <param name="targetURL">The target URL for the posted form.</param>
            <param name="samlMessage">The SAML request.</param>
            <param name="relayState">The relay state or <c>null</c> if none.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLBindingException">
            Thrown when the send fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.HTTPPostBinding.SendRequest(System.Web.HttpResponseBase,System.String,System.Xml.XmlElement,System.String)">
            <summary>
            Sends the SAML request and optional relay state data as hidden controls in a posted form.
            </summary>
            <param name="httpResponse">The HTTP response that will return the form to post.</param>
            <param name="targetURL">The target URL for the posted form.</param>
            <param name="samlMessage">The SAML request.</param>
            <param name="relayState">The relay state or <c>null</c> if none.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLBindingException">
            Thrown when the send fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.HTTPPostBinding.SendRequest(System.Web.HttpResponse,System.String,System.Xml.XmlElement,System.String)">
            <summary>
            Sends the SAML request and optional relay state data as hidden controls in a posted form.
            </summary>
            <param name="httpResponse">The HTTP response that will return the form to post.</param>
            <param name="targetURL">The target URL for the posted form.</param>
            <param name="samlMessage">The SAML request.</param>
            <param name="relayState">The relay state or <c>null</c> if none.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLBindingException">
            Thrown when the send fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.HTTPPostBinding.ReceiveRequest(System.Web.HttpRequestBase,System.Xml.XmlElement@,System.String@)">
            <summary>
            Receives the SAML request and optional relay state data by extracting them from the posted form.
            </summary>
            <param name="httpRequest">The HTTP request containing the posted form.</param>
            <param name="samlMessage">The returned SAML request.</param>
            <param name="relayState">The returned relay state or <c>null</c> if none.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLBindingException">
            Thrown when the receive fails.
            </exception>
            <seealso cref="M:ComponentSpace.SAML2.Bindings.HTTPPostBinding.ReceiveMessage(System.Web.HttpRequestBase,System.Xml.XmlElement@,System.String@,System.Boolean@)"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.HTTPPostBinding.ReceiveRequest(System.Web.HttpRequest,System.Xml.XmlElement@,System.String@)">
            <summary>
            Receives the SAML request and optional relay state data by extracting them from the posted form.
            </summary>
            <param name="httpRequest">The HTTP request containing the posted form.</param>
            <param name="samlMessage">The returned SAML request.</param>
            <param name="relayState">The returned relay state or <c>null</c> if none.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLBindingException">
            Thrown when the receive fails.
            </exception>
            <seealso cref="M:ComponentSpace.SAML2.Bindings.HTTPPostBinding.ReceiveMessage(System.Web.HttpRequest,System.Xml.XmlElement@,System.String@,System.Boolean@)"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.HTTPPostBinding.SendResponse(System.IO.Stream,System.String,System.Xml.XmlElement,System.String)">
            <summary>
            Sends the SAML response and optional relay state data as hidden controls in a posted form.
            </summary>
            <param name="stream">The stream to which the form is written.</param>
            <param name="targetURL">The target URL for the posted form.</param>
            <param name="samlMessage">The SAML response.</param>
            <param name="relayState">The relay state or <c>null</c> if none.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLBindingException">
            Thrown when the send fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.HTTPPostBinding.SendResponse(System.Web.HttpResponseBase,System.String,System.Xml.XmlElement,System.String)">
            <summary>
            Sends the SAML response and optional relay state data as hidden controls in a posted form.
            </summary>
            <param name="httpResponse">The HTTP response that will return the form to post.</param>
            <param name="targetURL">The target URL for the posted form.</param>
            <param name="samlMessage">The SAML response.</param>
            <param name="relayState">The relay state or <c>null</c> if none.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLBindingException">
            Thrown when the send fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.HTTPPostBinding.SendResponse(System.Web.HttpResponse,System.String,System.Xml.XmlElement,System.String)">
            <summary>
            Sends the SAML response and optional relay state data as hidden controls in a posted form.
            </summary>
            <param name="httpResponse">The HTTP response that will return the form to post.</param>
            <param name="targetURL">The target URL for the posted form.</param>
            <param name="samlMessage">The SAML response.</param>
            <param name="relayState">The relay state or <c>null</c> if none.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLBindingException">
            Thrown when the send fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.HTTPPostBinding.ReceiveResponse(System.Web.HttpRequestBase,System.Xml.XmlElement@,System.String@)">
            <summary>
            Receives the SAML response and optional relay state data by extracting them from the posted form.
            </summary>
            <param name="httpRequest">The HTTP request containing the posted form.</param>
            <param name="samlMessage">The returned SAML response.</param>
            <param name="relayState">The returned relay state or <c>null</c> if none.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLBindingException">
            Thrown when the receive fails.
            </exception>
            <seealso cref="M:ComponentSpace.SAML2.Bindings.HTTPPostBinding.ReceiveMessage(System.Web.HttpRequestBase,System.Xml.XmlElement@,System.String@,System.Boolean@)"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.HTTPPostBinding.ReceiveResponse(System.Web.HttpRequest,System.Xml.XmlElement@,System.String@)">
            <summary>
            Receives the SAML response and optional relay state data by extracting them from the posted form.
            </summary>
            <param name="httpRequest">The HTTP request containing the posted form.</param>
            <param name="samlMessage">The returned SAML response.</param>
            <param name="relayState">The returned relay state or <c>null</c> if none.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLBindingException">
            Thrown when the receive fails.
            </exception>
            <seealso cref="M:ComponentSpace.SAML2.Bindings.HTTPPostBinding.ReceiveMessage(System.Web.HttpRequest,System.Xml.XmlElement@,System.String@,System.Boolean@)"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.HTTPPostBinding.ReceiveMessage(System.Web.HttpRequestBase,System.Xml.XmlElement@,System.String@,System.Boolean@)">
            <summary>
            Receives the SAML request or response and optional relay state data by extracting them from the posted form.
            </summary>
            <param name="httpRequest">The HTTP request containing the posted form.</param>
            <param name="samlMessage">The returned SAML request or response.</param>
            <param name="relayState">The returned relay state or <c>null</c> if none.</param>
            <param name="isRequest"><c>true</c> if the message is a request; <c>false</c> if the message is a response.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLBindingException">
            Thrown when the receive fails.
            </exception>
            <seealso cref="M:ComponentSpace.SAML2.Bindings.HTTPPostBinding.ReceiveRequest(System.Web.HttpRequestBase,System.Xml.XmlElement@,System.String@)"/>
            <seealso cref="M:ComponentSpace.SAML2.Bindings.HTTPPostBinding.ReceiveResponse(System.Web.HttpRequestBase,System.Xml.XmlElement@,System.String@)"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.HTTPPostBinding.ReceiveMessage(System.Web.HttpRequest,System.Xml.XmlElement@,System.String@,System.Boolean@)">
            <summary>
            Receives the SAML request or response and optional relay state data by extracting them from the posted form.
            </summary>
            <param name="httpRequest">The HTTP request containing the posted form.</param>
            <param name="samlMessage">The returned SAML request or response.</param>
            <param name="relayState">The returned relay state or <c>null</c> if none.</param>
            <param name="isRequest"><c>true</c> if the message is a request; <c>false</c> if the message is a response.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLBindingException">
            Thrown when the receive fails.
            </exception>
            <seealso cref="M:ComponentSpace.SAML2.Bindings.HTTPPostBinding.ReceiveRequest(System.Web.HttpRequest,System.Xml.XmlElement@,System.String@)"/>
            <seealso cref="M:ComponentSpace.SAML2.Bindings.HTTPPostBinding.ReceiveResponse(System.Web.HttpRequest,System.Xml.XmlElement@,System.String@)"/>
        </member>
        <member name="T:ComponentSpace.SAML2.Bindings.HTTPRedirectBinding">
            <summary>
            Supports the HTTP redirect binding.
            </summary>
            <remarks>
            Refer to the Bindings for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
            <seealso cref="T:ComponentSpace.SAML2.SAMLIdentifiers.BindingURIs"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.HTTPRedirectBinding.GetHashAlgorithm(System.Security.Cryptography.AsymmetricAlgorithm,System.String)">
            <summary>
            Gets the hash algorithm.
            </summary>
            <param name="key">The signature key.</param>
            <param name="signatureAlgorithm">The signature algorithm or <c>null</c> to default to http://www.w3.org/2001/04/xmldsig-more#rsa-sha256. </param>
            <returns>The signature algorithm.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.HTTPRedirectBinding.GetHashAlgorithmName(System.String)">
            <summary>
            Gets the hash algorithm name.
            </summary>
            <param name="signatureAlgorithm">The signature algorithm or <c>null</c> to default to http://www.w3.org/2001/04/xmldsig-more#rsa-sha256. </param>
            <returns>The hash algorithm name.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.HTTPRedirectBinding.GetRSASignaturePadding(System.String)">
            <summary>
            Gets the signature padding mode and parameters.
            </summary>
            <param name="signatureAlgorithm">The signature algorithm name.</param>
            <returns>The signature padding mode and parameters</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.HTTPRedirectBinding.GenerateSignature(System.Security.Cryptography.AsymmetricAlgorithm,System.String,System.Byte[])">
            <summary>
            Generates a signature over the data.
            </summary>
            <param name="key">The signature key.</param>
            <param name="signatureAlgorithm">The signature algorithm or <c>null</c> to default to http://www.w3.org/2001/04/xmldsig-more#rsa-sha256. </param>
            <param name="dataToSign">The data to sign.</param>
            <returns>The signed data.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.HTTPRedirectBinding.VerifySignature(System.Security.Cryptography.AsymmetricAlgorithm,System.Byte[],System.Byte[],System.String)">
            <summary>
            Verifies a signature over the data.
            </summary>
            <param name="key">The signature key.</param>
            <param name="signedData">The signed data.</param>
            <param name="signature">The signature.</param>
            <param name="signatureAlgorithm">The signature algorithm or <c>null</c> to default to http://www.w3.org/2001/04/xmldsig-more#rsa-sha256. </param>
            <returns><c>true</c> if the signature verifies; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.HTTPRedirectBinding.EncodeMessage(System.Xml.XmlElement)">
            <summary>
            Encodes the SAML message using the deflate algorithm.
            </summary>
            <param name="samlMessage">The SAML message.</param>
            <returns>The encoded message.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.HTTPRedirectBinding.DecodeMessage(System.String)">
            <summary>
            Decodes the SAML message using the deflate algorithm.
            </summary>
            <param name="encodedMessage">The encoded message.</param>
            <returns>The decoded SAML message.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.HTTPRedirectBinding.CheckSignatureAlgorithm(System.Security.Cryptography.AsymmetricAlgorithm,System.String)">
            <summary>
            Checks whether the signature algorithm is correct for the signature key.
            </summary>
            <param name="key">The signature key.</param>
            <param name="signatureAlgorithm">The signature algorithm.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLBindingException">
            Thrown if the signature algorthm and signature key don't match.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.HTTPRedirectBinding.CheckSignature(System.String,System.String,System.String,System.Security.Cryptography.AsymmetricAlgorithm,System.String)">
            <summary>
            Checks whether the signature is valid.
            </summary>
            <param name="redirectURL">The redirect URL.</param>
            <param name="encodedSignature">The encoded signature.</param>
            <param name="messageQueryName">The message query parameter name.</param>
            <param name="key">The signature key.</param>
            <param name="signatureAlgorithm">The signature algorithm or <c>null</c> to default to http://www.w3.org/2001/04/xmldsig-more#rsa-sha256. </param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLBindingException">
            Thrown if the signature is invalid.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.HTTPRedirectBinding.CreateQueryString(System.String,System.Xml.XmlElement,System.String,System.Security.Cryptography.AsymmetricAlgorithm,System.String)">
            <summary>
            Creates the query string containing the SAML message and optional relay state.
            </summary>
            <param name="messageQueryName">The message query parameter name.</param>
            <param name="samlMessage">The SAML message.</param>
            <param name="relayState">The relay state or <c>null</c> if none.</param>
            <param name="key">The key to generate the signature or <c>null</c> if no signature is to be generated.</param>
            <param name="signatureAlgorithm">The signature algorithm or <c>null</c> to default to http://www.w3.org/2001/04/xmldsig-more#rsa-sha256. </param>
            <returns>The query string.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLBindingException">
            Thrown if the signature cannot be generated.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.HTTPRedirectBinding.ParseQueryString(System.String,System.String,System.Xml.XmlElement@,System.String@,System.String@,System.String@)">
            <summary>
            Parses the query string for the SAML message and optional relay state.
            </summary>
            <param name="redirectURL">The HTTP redirect URL including the query string.</param>
            <param name="messageQueryName">The message query parameter name.</param>
            <param name="samlMessage">The returned SAML request.</param>
            <param name="relayState">The returned relay state or <c>null</c> if none.</param>
            <param name="signatureAlgorithm">The returned signature algorithm or <c>null</c> if none.</param>
            <param name="signature">The returned signature or <c>null</c> if none.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.HTTPRedirectBinding.CreateRequestRedirectURL(System.String,System.Xml.XmlElement,System.String,System.Security.Cryptography.AsymmetricAlgorithm,System.String)">
            <summary>
            Creates the redirect URL containing the SAML request and optional relay state and generated signature 
            query string parameters.
            </summary>
            <param name="baseURL">The base URL to which the query string parameters are appended.</param>
            <param name="samlMessage">The SAML request.</param>
            <param name="relayState">The relay state or <c>null</c> if none.</param>
            <param name="key">The key to generate the signature or <c>null</c> if no signature is to be generated.</param>
            <param name="signatureAlgorithm">The signature algorithm or <c>null</c> to default to http://www.w3.org/2001/04/xmldsig-more#rsa-sha256. </param>
            <returns>The redirect URL.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLBindingException">
            Thrown when the URL cannot be created.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.HTTPRedirectBinding.CreateRequestRedirectURL(System.String,System.Xml.XmlElement,System.String,System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>
            Creates the redirect URL containing the SAML request and optional relay state and generated signature 
            query string parameters.
            </summary>
            <param name="baseURL">The base URL to which the query string parameters are appended.</param>
            <param name="samlMessage">The SAML request.</param>
            <param name="relayState">The relay state or <c>null</c> if none.</param>
            <param name="key">The key to generate the signature or <c>null</c> if no signature is to be generated.</param>
            <returns>The redirect URL.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLBindingException">
            Thrown when the URL cannot be created.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.HTTPRedirectBinding.CreateResponseRedirectURL(System.String,System.Xml.XmlElement,System.String,System.Security.Cryptography.AsymmetricAlgorithm,System.String)">
            <summary>
            Creates the redirect URL containing the SAML response and optional relay state and generated signature 
            query string parameters.
            </summary>
            <param name="baseURL">The base URL to which the query string parameters are appended.</param>
            <param name="samlMessage">The SAML response.</param>
            <param name="relayState">The relay state or <c>null</c> if none.</param>
            <param name="key">The key to generate the signature or <c>null</c> if no signature is to be generated.</param>
            <param name="signatureAlgorithm">The signature algorithm or <c>null</c> to default to http://www.w3.org/2001/04/xmldsig-more#rsa-sha256. </param>
            <returns>The redirect URL.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLBindingException">
            Thrown when the URL cannot be created.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.HTTPRedirectBinding.CreateResponseRedirectURL(System.String,System.Xml.XmlElement,System.String,System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>
            Creates the redirect URL containing the SAML response and optional relay state and generated signature 
            query string parameters.
            </summary>
            <param name="baseURL">The base URL to which the query string parameters are appended.</param>
            <param name="samlMessage">The SAML response.</param>
            <param name="relayState">The relay state or <c>null</c> if none.</param>
            <param name="key">The key to generate the signature or <c>null</c> if no signature is to be generated.</param>
            <returns>The redirect URL.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLBindingException">
            Thrown when the URL cannot be created.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.HTTPRedirectBinding.GetRequestFromRedirectURL(System.String,System.Xml.XmlElement@,System.String@,System.Boolean@,System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>
            Extracts the SAML request and optional relay state from the redirect URL's query string.
            </summary>
            <remarks>
            If a key is supplied and the message is signed then the signature is verified. 
            </remarks>
            <param name="redirectURL">The HTTP redirect URL including the query string.</param>
            <param name="samlMessage">The returned SAML request.</param>
            <param name="relayState">The returned relay state or <c>null</c> if none.</param>
            <param name="signed">Indicates whether the SAML request is signed.</param>
            <param name="key">The key to verify the signature or <c>null</c> if no signature is to be verified.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLBindingException">
            Thrown when the message and relay state cannot be extracted from the redirect URL.
            </exception>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSignatureException">
            Thrown when the signature verification fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.HTTPRedirectBinding.GetResponseFromRedirectURL(System.String,System.Xml.XmlElement@,System.String@,System.Boolean@,System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>
            Extracts the SAML response and optional relay state from the redirect URL's query string.
            </summary>
            <remarks>
            If a key is supplied and the message is signed then the signature is verified. 
            </remarks>
            <param name="redirectURL">The HTTP redirect URL including the query string.</param>
            <param name="samlMessage">The returned SAML response.</param>
            <param name="relayState">The returned relay state or <c>null</c> if none.</param>
            <param name="signed">Indicates whether the SAML response is signed.</param>
            <param name="key">The key to verify the signature or <c>null</c> if no signature is to be verified.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLBindingException">
            Thrown when the message and relay state cannot be extracted from the redirect URL.
            </exception>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSignatureException">
            Thrown when the signature verification fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.HTTPRedirectBinding.GetMessageFromRedirectURL(System.String,System.Xml.XmlElement@,System.String@,System.Boolean@,System.Boolean@,System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>
            Extracts the SAML request or response and optional relay state from the redirect URL's query string.
            </summary>
            <remarks>
            If a key is supplied and the message is signed then the signature is verified. 
            </remarks>
            <param name="redirectURL">The HTTP redirect URL including the query string.</param>
            <param name="samlMessage">The returned SAML request or response.</param>
            <param name="relayState">The returned relay state or <c>null</c> if none.</param>
            <param name="isRequest"><c>true</c> if the message is a request; <c>false</c> if the message is a response.</param>
            <param name="signed">Indicates whether the SAML message is signed.</param>
            <param name="key">The key to verify the signature or <c>null</c> if no signature is to be verified.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLBindingException">
            Thrown when the message and relay state cannot be extracted from the redirect URL.
            </exception>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSignatureException">
            Thrown when the signature verification fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.HTTPRedirectBinding.SendRequest(System.Web.HttpResponseBase,System.String,System.Xml.XmlElement,System.String,System.Security.Cryptography.AsymmetricAlgorithm,System.String)">
            <summary>
            Sends the SAML request and optional relay state and generated signature 
            as query string parameters in an HTTP redirect.
            </summary>
            <param name="httpResponse">The HTTP response used to perform the redirect.</param>
            <param name="baseURL">The base URL to which the query string parameters are appended.</param>
            <param name="samlMessage">The SAML request.</param>
            <param name="relayState">The relay state or <c>null</c> if none.</param>
            <param name="key">The key to generate the signature or <c>null</c> if no signature is to be generated.</param>
            <param name="signatureAlgorithm">The signature algorithm or <c>null</c> to default to http://www.w3.org/2001/04/xmldsig-more#rsa-sha256. </param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLBindingException">
            Thrown when the send fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.HTTPRedirectBinding.SendRequest(System.Web.HttpResponse,System.String,System.Xml.XmlElement,System.String,System.Security.Cryptography.AsymmetricAlgorithm,System.String)">
            <summary>
            Sends the SAML request and optional relay state and generated signature 
            as query string parameters in an HTTP redirect.
            </summary>
            <param name="httpResponse">The HTTP response used to perform the redirect.</param>
            <param name="baseURL">The base URL to which the query string parameters are appended.</param>
            <param name="samlMessage">The SAML request.</param>
            <param name="relayState">The relay state or <c>null</c> if none.</param>
            <param name="key">The key to generate the signature or <c>null</c> if no signature is to be generated.</param>
            <param name="signatureAlgorithm">The signature algorithm or <c>null</c> to default to http://www.w3.org/2001/04/xmldsig-more#rsa-sha256. </param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLBindingException">
            Thrown when the send fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.HTTPRedirectBinding.SendRequest(System.Web.HttpResponseBase,System.String,System.Xml.XmlElement,System.String,System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>
            Sends the SAML request and optional relay state and generated signature 
            as query string parameters in an HTTP redirect.
            </summary>
            <param name="httpResponse">The HTTP response used to perform the redirect.</param>
            <param name="baseURL">The base URL to which the query string parameters are appended.</param>
            <param name="samlMessage">The SAML request.</param>
            <param name="relayState">The relay state or <c>null</c> if none.</param>
            <param name="key">The key to generate the signature or <c>null</c> if no signature is to be generated.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLBindingException">
            Thrown when the send fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.HTTPRedirectBinding.SendRequest(System.Web.HttpResponse,System.String,System.Xml.XmlElement,System.String,System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>
            Sends the SAML request and optional relay state and generated signature 
            as query string parameters in an HTTP redirect.
            </summary>
            <param name="httpResponse">The HTTP response used to perform the redirect.</param>
            <param name="baseURL">The base URL to which the query string parameters are appended.</param>
            <param name="samlMessage">The SAML request.</param>
            <param name="relayState">The relay state or <c>null</c> if none.</param>
            <param name="key">The key to generate the signature or <c>null</c> if no signature is to be generated.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLBindingException">
            Thrown when the send fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.HTTPRedirectBinding.ReceiveRequest(System.Web.HttpRequestBase,System.Xml.XmlElement@,System.String@,System.String@,System.String@)">
            <summary>
            Receives the SAML request and optional relay state by extracting them from the query string.
            </summary>
            <param name="httpRequest">The HTTP request containing the query string.</param>
            <param name="samlMessage">The returned SAML request.</param>
            <param name="relayState">The returned relay state or <c>null</c> if none.</param>
            <param name="signatureAlgorithm">The returned signature algorithm or <c>null</c> if none.</param>
            <param name="signature">The returned signature or <c>null</c> if none.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLBindingException">
            Thrown when the receive fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.HTTPRedirectBinding.ReceiveRequest(System.Web.HttpRequest,System.Xml.XmlElement@,System.String@,System.String@,System.String@)">
            <summary>
            Receives the SAML request and optional relay state by extracting them from the query string.
            </summary>
            <param name="httpRequest">The HTTP request containing the query string.</param>
            <param name="samlMessage">The returned SAML request.</param>
            <param name="relayState">The returned relay state or <c>null</c> if none.</param>
            <param name="signatureAlgorithm">The returned signature algorithm or <c>null</c> if none.</param>
            <param name="signature">The returned signature or <c>null</c> if none.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLBindingException">
            Thrown when the receive fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.HTTPRedirectBinding.ReceiveRequest(System.Web.HttpRequestBase,System.Xml.XmlElement@,System.String@,System.Boolean@,System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>
            Receives the SAML request and optional relay state by extracting them from the query string.
            </summary>
            <remarks>
            If a key is supplied and the message is signed then the signature is verified. 
            </remarks>
            <param name="httpRequest">The HTTP request containing the query string.</param>
            <param name="samlMessage">The returned SAML request.</param>
            <param name="relayState">The returned relay state or <c>null</c> if none.</param>
            <param name="signed">Indicates whether the SAML request is signed.</param>
            <param name="key">The key to verify the signature or <c>null</c> if no signature is to be verified.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLBindingException">
            Thrown when the receive fails.
            </exception>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSignatureException">
            Thrown when the signature verification fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.HTTPRedirectBinding.ReceiveRequest(System.Web.HttpRequest,System.Xml.XmlElement@,System.String@,System.Boolean@,System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>
            Receives the SAML request and optional relay state by extracting them from the query string.
            </summary>
            <remarks>
            If a key is supplied and the message is signed then the signature is verified. 
            </remarks>
            <param name="httpRequest">The HTTP request containing the query string.</param>
            <param name="samlMessage">The returned SAML request.</param>
            <param name="relayState">The returned relay state or <c>null</c> if none.</param>
            <param name="signed">Indicates whether the SAML request is signed.</param>
            <param name="key">The key to verify the signature or <c>null</c> if no signature is to be verified.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLBindingException">
            Thrown when the receive fails.
            </exception>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSignatureException">
            Thrown when the signature verification fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.HTTPRedirectBinding.VerifyRequestSignature(System.String,System.String,System.String,System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>
            Verifies the request signature.
            </summary>
            <param name="redirectURL">The HTTP redirect URL including the query string.</param>
            <param name="signatureAlgorithm">The signature algorithm.</param>
            <param name="signature">The encoded signature.</param>
            <param name="key">The signature key.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLBindingException">
            Thrown if the signature is invalid.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.HTTPRedirectBinding.VerifyRequestSignature(System.Web.HttpRequestBase,System.String,System.String,System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>
            Verifies the request signature.
            </summary>
            <param name="httpRequest">The HTTP request containing the query string.</param>
            <param name="signatureAlgorithm">The signature algorithm.</param>
            <param name="signature">The encoded signature.</param>
            <param name="key">The signature key.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLBindingException">
            Thrown if the signature is invalid.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.HTTPRedirectBinding.VerifyRequestSignature(System.Web.HttpRequest,System.String,System.String,System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>
            Verifies the request signature.
            </summary>
            <param name="httpRequest">The HTTP request containing the query string.</param>
            <param name="signatureAlgorithm">The signature algorithm.</param>
            <param name="signature">The encoded signature.</param>
            <param name="key">The signature key.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLBindingException">
            Thrown if the signature is invalid.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.HTTPRedirectBinding.SendResponse(System.Web.HttpResponseBase,System.String,System.Xml.XmlElement,System.String,System.Security.Cryptography.AsymmetricAlgorithm,System.String)">
            <summary>
            Sends the SAML response and optional relay state and generated signature 
            as query string parameters in an HTTP redirect.
            </summary>
            <param name="httpResponse">The HTTP response used to perform the redirect.</param>
            <param name="baseURL">The base URL to which the query string parameters are appended.</param>
            <param name="samlMessage">The SAML response.</param>
            <param name="relayState">The relay state or <c>null</c> if none.</param>
            <param name="key">The key to generate the signature or <c>null</c> if no signature is to be generated.</param>
            <param name="signatureAlgorithm">The signature algorithm or <c>null</c> to default to http://www.w3.org/2001/04/xmldsig-more#rsa-sha256. </param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLBindingException">
            Thrown when the send fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.HTTPRedirectBinding.SendResponse(System.Web.HttpResponse,System.String,System.Xml.XmlElement,System.String,System.Security.Cryptography.AsymmetricAlgorithm,System.String)">
            <summary>
            Sends the SAML response and optional relay state and generated signature 
            as query string parameters in an HTTP redirect.
            </summary>
            <param name="httpResponse">The HTTP response used to perform the redirect.</param>
            <param name="baseURL">The base URL to which the query string parameters are appended.</param>
            <param name="samlMessage">The SAML response.</param>
            <param name="relayState">The relay state or <c>null</c> if none.</param>
            <param name="key">The key to generate the signature or <c>null</c> if no signature is to be generated.</param>
            <param name="signatureAlgorithm">The signature algorithm or <c>null</c> to default to http://www.w3.org/2001/04/xmldsig-more#rsa-sha256. </param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLBindingException">
            Thrown when the send fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.HTTPRedirectBinding.SendResponse(System.Web.HttpResponseBase,System.String,System.Xml.XmlElement,System.String,System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>
            Sends the SAML response and optional relay state and generated signature 
            as query string parameters in an HTTP redirect.
            </summary>
            <param name="httpResponse">The HTTP response used to perform the redirect.</param>
            <param name="baseURL">The base URL to which the query string parameters are appended.</param>
            <param name="samlMessage">The SAML response.</param>
            <param name="relayState">The relay state or <c>null</c> if none.</param>
            <param name="key">The key to generate the signature or <c>null</c> if no signature is to be generated.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLBindingException">
            Thrown when the send fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.HTTPRedirectBinding.SendResponse(System.Web.HttpResponse,System.String,System.Xml.XmlElement,System.String,System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>
            Sends the SAML response and optional relay state and generated signature 
            as query string parameters in an HTTP redirect.
            </summary>
            <param name="httpResponse">The HTTP response used to perform the redirect.</param>
            <param name="baseURL">The base URL to which the query string parameters are appended.</param>
            <param name="samlMessage">The SAML response.</param>
            <param name="relayState">The relay state or <c>null</c> if none.</param>
            <param name="key">The key to generate the signature or <c>null</c> if no signature is to be generated.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLBindingException">
            Thrown when the send fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.HTTPRedirectBinding.ReceiveResponse(System.Web.HttpRequestBase,System.Xml.XmlElement@,System.String@,System.String@,System.String@)">
            <summary>
            Receives the SAML response and optional relay state by extracting them from the query string.
            </summary>
            <param name="httpRequest">The HTTP request containing the query string.</param>
            <param name="samlMessage">The returned SAML response.</param>
            <param name="relayState">The returned relay state or <c>null</c> if none.</param>
            <param name="signatureAlgorithm">The returned signature algorithm or <c>null</c> if none.</param>
            <param name="signature">The returned signature or <c>null</c> if none.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLBindingException">
            Thrown when the receive fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.HTTPRedirectBinding.ReceiveResponse(System.Web.HttpRequest,System.Xml.XmlElement@,System.String@,System.String@,System.String@)">
            <summary>
            Receives the SAML response and optional relay state by extracting them from the query string.
            </summary>
            <param name="httpRequest">The HTTP request containing the query string.</param>
            <param name="samlMessage">The returned SAML response.</param>
            <param name="relayState">The returned relay state or <c>null</c> if none.</param>
            <param name="signatureAlgorithm">The returned signature algorithm or <c>null</c> if none.</param>
            <param name="signature">The returned signature or <c>null</c> if none.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLBindingException">
            Thrown when the receive fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.HTTPRedirectBinding.ReceiveResponse(System.Web.HttpRequestBase,System.Xml.XmlElement@,System.String@,System.Boolean@,System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>
            Receives the SAML response and optional relay state by extracting them from the query string.
            </summary>
            <remarks>
            If a key is supplied and the message is signed then the signature is verified. 
            </remarks>
            <param name="httpRequest">The HTTP request containing the query string.</param>
            <param name="samlMessage">The returned SAML response.</param>
            <param name="relayState">The returned relay state or <c>null</c> if none.</param>
            <param name="signed">Indicates whether the SAML response is signed.</param>
            <param name="key">The key to verify the signature or <c>null</c> if no signature is to be verified.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLBindingException">
            Thrown when the receive fails.
            </exception>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSignatureException">
            Thrown when the signature verification fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.HTTPRedirectBinding.ReceiveResponse(System.Web.HttpRequest,System.Xml.XmlElement@,System.String@,System.Boolean@,System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>
            Receives the SAML response and optional relay state by extracting them from the query string.
            </summary>
            <remarks>
            If a key is supplied and the message is signed then the signature is verified. 
            </remarks>
            <param name="httpRequest">The HTTP request containing the query string.</param>
            <param name="samlMessage">The returned SAML response.</param>
            <param name="relayState">The returned relay state or <c>null</c> if none.</param>
            <param name="signed">Indicates whether the SAML response is signed.</param>
            <param name="key">The key to verify the signature or <c>null</c> if no signature is to be verified.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLBindingException">
            Thrown when the receive fails.
            </exception>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSignatureException">
            Thrown when the signature verification fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.HTTPRedirectBinding.VerifyResponseSignature(System.String,System.String,System.String,System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>
            Verifies the response signature.
            </summary>
            <param name="redirectURL">The HTTP redirect URL including the query string.</param>
            <param name="signatureAlgorithm">The signature algorithm.</param>
            <param name="signature">The encoded signature.</param>
            <param name="key">The signature key.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLBindingException">
            Thrown if the signature is invalid.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.HTTPRedirectBinding.VerifyResponseSignature(System.Web.HttpRequestBase,System.String,System.String,System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>
            Verifies the response signature.
            </summary>
            <param name="httpRequest">The HTTP request containing the query string.</param>
            <param name="signatureAlgorithm">The signature algorithm.</param>
            <param name="signature">The encoded signature.</param>
            <param name="key">The signature key.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLBindingException">
            Thrown if the signature is invalid.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.HTTPRedirectBinding.VerifyResponseSignature(System.Web.HttpRequest,System.String,System.String,System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>
            Verifies the response signature.
            </summary>
            <param name="httpRequest">The HTTP request containing the query string.</param>
            <param name="signatureAlgorithm">The signature algorithm.</param>
            <param name="signature">The encoded signature.</param>
            <param name="key">The signature key.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLBindingException">
            Thrown if the signature is invalid.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.HTTPRedirectBinding.ReceiveMessage(System.Web.HttpRequestBase,System.Xml.XmlElement@,System.String@,System.String@,System.String@,System.Boolean@)">
            <summary>
            Receives the SAML request or response and optional relay state by extracting them from the query string.
            </summary>
            <param name="httpRequest">The HTTP request containing the query string.</param>
            <param name="samlMessage">The returned SAML request or response.</param>
            <param name="relayState">The returned relay state or <c>null</c> if none.</param>
            <param name="signatureAlgorithm">The returned signature algorithm or <c>null</c> if none.</param>
            <param name="signature">The returned signature or <c>null</c> if none.</param>
            <param name="isRequest"><c>true</c> if the message is a request; <c>false</c> if the message is a response.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLBindingException">
            Thrown when the receive fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.HTTPRedirectBinding.ReceiveMessage(System.Web.HttpRequest,System.Xml.XmlElement@,System.String@,System.String@,System.String@,System.Boolean@)">
            <summary>
            Receives the SAML request or response and optional relay state by extracting them from the query string.
            </summary>
            <param name="httpRequest">The HTTP request containing the query string.</param>
            <param name="samlMessage">The returned SAML request or response.</param>
            <param name="relayState">The returned relay state or <c>null</c> if none.</param>
            <param name="signatureAlgorithm">The returned signature algorithm or <c>null</c> if none.</param>
            <param name="signature">The returned signature or <c>null</c> if none.</param>
            <param name="isRequest"><c>true</c> if the message is a request; <c>false</c> if the message is a response.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLBindingException">
            Thrown when the receive fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.HTTPRedirectBinding.ReceiveMessage(System.Web.HttpRequestBase,System.Xml.XmlElement@,System.String@,System.Boolean@,System.Boolean@,System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>
            Receives the SAML request or response and optional relay state by extracting them from the query string.
            </summary>
            <remarks>
            If a key is supplied and the message is signed then the signature is verified. 
            </remarks>
            <param name="httpRequest">The HTTP request containing the query string.</param>
            <param name="samlMessage">The returned SAML request or response.</param>
            <param name="relayState">The returned relay state or <c>null</c> if none.</param>
            <param name="isRequest"><c>true</c> if the message is a request; <c>false</c> if the message is a response.</param>
            <param name="signed">Indicates whether the SAML message is signed.</param>
            <param name="key">The key to verify the signature or <c>null</c> if no signature is to be verified.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLBindingException">
            Thrown when the receive fails.
            </exception>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSignatureException">
            Thrown when the signature verification fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.HTTPRedirectBinding.ReceiveMessage(System.Web.HttpRequest,System.Xml.XmlElement@,System.String@,System.Boolean@,System.Boolean@,System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>
            Receives the SAML request or response and optional relay state by extracting them from the query string.
            </summary>
            <remarks>
            If a key is supplied and the message is signed then the signature is verified. 
            </remarks>
            <param name="httpRequest">The HTTP request containing the query string.</param>
            <param name="samlMessage">The returned SAML request or response.</param>
            <param name="relayState">The returned relay state or <c>null</c> if none.</param>
            <param name="isRequest"><c>true</c> if the message is a request; <c>false</c> if the message is a response.</param>
            <param name="signed">Indicates whether the SAML message is signed.</param>
            <param name="key">The key to verify the signature or <c>null</c> if no signature is to be verified.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLBindingException">
            Thrown when the receive fails.
            </exception>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSignatureException">
            Thrown when the signature verification fails.
            </exception>
        </member>
        <member name="T:ComponentSpace.SAML2.Bindings.PAOSBinding">
            <summary>
            Supports the reverse SOAP (PAOS) binding.
            </summary>
            <remarks>
            Refer to the Bindings for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
            <seealso cref="T:ComponentSpace.SAML2.SAMLIdentifiers.BindingURIs"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.PAOSBinding.SendRequest(System.Web.HttpResponseBase,System.Xml.XmlElement)">
            <summary>
            Sends a SAML request.
            The SAML request is wrapped in a SOAP message prior to sending.
            </summary>
            <remarks>
            The service provider can use this method to return a SAML request in response
            to the client's HTTP request.
            </remarks>
            <param name="httpResponse">The HTTP response that will return the SAML request.</param>
            <param name="samlMessage">The SAML request.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLBindingException">
            Thrown when the send fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.PAOSBinding.SendRequest(System.Web.HttpResponse,System.Xml.XmlElement)">
            <summary>
            Sends a SAML request.
            The SAML request is wrapped in a SOAP message prior to sending.
            </summary>
            <remarks>
            The service provider can use this method to return a SAML request in response
            to the client's HTTP request.
            </remarks>
            <param name="httpResponse">The HTTP response that will return the SAML request.</param>
            <param name="samlMessage">The SAML request.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLBindingException">
            Thrown when the send fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.PAOSBinding.ReceiveRequest(System.String)">
            <summary>
            Receives a SAML request.
            The SAML request is extracted from the received SOAP message.
            </summary>
            <remarks>
            The client can use this method to send an HTTP request and receive a SAML request 
            from the service provider.
            </remarks>
            <param name="destinationURL">The destination URL.</param>
            <returns>The SAML request.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLBindingException">
            Thrown when the receive fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.PAOSBinding.ReceiveRequest(System.Net.WebRequest)">
            <summary>
            Receives a SAML request.
            The SAML request is extracted from the received SOAP message.
            </summary>
            <remarks>
            The client can use this method to send an HTTP request and receive a SAML request 
            from the service provider.
            </remarks>
            <param name="webRequest">The <c>WebRequest</c> object used to receive the request.</param>
            <returns>The SAML request.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLBindingException">
            Thrown when the receive fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.PAOSBinding.SendResponse(System.String,System.Xml.XmlElement)">
            <summary>
            Sends the SAML response.
            The SAML response is wrapped in a SOAP message prior to sending.
            </summary>
            <remarks>
            The client can use this method to send a SAML response and receive an HTTP response 
            from the service provider.
            </remarks>
            <param name="destinationURL">The destination URL.</param>
            <param name="samlMessage">The SAML response.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLBindingException">
            Thrown when the send fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.PAOSBinding.SendResponse(System.Net.WebRequest,System.Xml.XmlElement)">
            <summary>
            Sends the SAML response.
            The SAML response is wrapped in a SOAP message prior to sending.
            </summary>
            <remarks>
            The client can use this method to send a SAML response and receive an HTTP response 
            from the service provider.
            </remarks>
            <param name="webRequest">The <c>WebRequest</c> object used to send the response.</param>
            <param name="samlMessage">The SAML response.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLBindingException">
            Thrown when the send fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.PAOSBinding.ReceiveResponse(System.Web.HttpRequestBase)">
            <summary>
            Receives a SAML response.
            The SAML response is extracted from the received SOAP message.
            </summary>
            <remarks>
            The service provider can use this method to receive a SAML response and send 
            an HTTP response to the client.
            </remarks>
            <param name="httpRequest">The HTTP request containing the SAML response.</param>
            <returns>The SAML response.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLBindingException">
            Thrown when the receive fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.PAOSBinding.ReceiveResponse(System.Web.HttpRequest)">
            <summary>
            Receives a SAML response.
            The SAML response is extracted from the received SOAP message.
            </summary>
            <remarks>
            The service provider can use this method to receive a SAML response and send 
            an HTTP response to the client.
            </remarks>
            <param name="httpRequest">The HTTP request containing the SAML response.</param>
            <returns>The SAML response.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLBindingException">
            Thrown when the receive fails.
            </exception>
        </member>
        <member name="T:ComponentSpace.SAML2.Bindings.RelayState">
            <summary>
            Provides storage for state information used during SSO.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.RelayState.#ctor">
            <summary>
            Initializes a new instance of the <c>RelayState</c> class.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.RelayState.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <c>RelayState</c> class.
            </summary>
            <param name="resourceURL">The resource URL.</param>
            <param name="additionalState">Additional state information or <c>null</c> if none.</param>
        </member>
        <member name="P:ComponentSpace.SAML2.Bindings.RelayState.ResourceURL">
            <summary>
            Gets or sets the resource URL. 
            </summary>
            <value>
            The resource URL.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Bindings.RelayState.AdditionalState">
            <summary>
            Gets or sets the additional state information. 
            </summary>
            <value>
            The additional state information or <c>null</c> if none.
            </value>
        </member>
        <member name="T:ComponentSpace.SAML2.Bindings.RelayStateCache">
            <summary>
            Provides a cache for storing <c>RelayState</c>.
            </summary>
            <remarks>
            The cache is implemented using the <c>System.Web.Caching.Cache</c>.
            Use of this cache is entirely optional. 
            Refer to the <c>System.Web.Caching.Cache</c> documentation for usage restrictions.
            </remarks>
        </member>
        <member name="P:ComponentSpace.SAML2.Bindings.RelayStateCache.Expiration">
            <summary>
            Gets or sets the expiration time span for cached relay state entries. 
            </summary>
            <value>
            The expiration time span for cached relay state entries.
            </value>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.RelayStateCache.Add(ComponentSpace.SAML2.Bindings.RelayState)">
            <summary>
            Adds an entry to the cache and returns the key to this entry.
            </summary>
            <param name="relayState">The item to cache.</param>
            <returns>The key to this entry in the cache.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.RelayStateCache.Get(System.String)">
            <summary>
            Gets an entry from the cache.
            </summary>
            <param name="key">The key to the cache item to remove.</param>
            <returns>The cached item or <c>null</c> if none.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.RelayStateCache.Remove(System.String)">
            <summary>
            Removes an entry from the cache.
            </summary>
            <param name="key">The key to the cache item to remove.</param>
            <returns>The item removed from the cache or <c>null</c> if none.</returns>
        </member>
        <member name="T:ComponentSpace.SAML2.Bindings.SAMLForm">
            <summary>
            The HTTP form that's used to POST SAML messages.
            </summary>
        </member>
        <member name="P:ComponentSpace.SAML2.Bindings.SAMLForm.HTMLFormTarget">
            <summary>
            Gets or sets the HTML form target.
            </summary>
            <remarks>
            The target may be: _self, _blank, _parent or _top. The default is _self.
            </remarks>
            <value>
            The action target.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Bindings.SAMLForm.HTMLFormTemplate">
            <summary>
            Gets or sets the HTML form template that's used to construct the form to post.
            The template must include two insertion parameters.
            {url} is the URL to which the form is to be posted.
            {target} is the target (eg _self) used to post the form.
            {hiddenFormVariables} is the hidden form variables including the SAML message.
            </summary>
            <value>
            The HTML form template.
            </value>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.SAMLForm.#ctor">
            <summary>
            Initializes a new instance of the <c>SAMLForm</c> class.
            </summary>
        </member>
        <member name="P:ComponentSpace.SAML2.Bindings.SAMLForm.ActionURL">
            <summary>
            Gets or sets the action URL.
            </summary>
            <value>
            The action URL.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Bindings.SAMLForm.HiddenControls">
            <summary>
            Gets or sets the hidden controls.
            The hidden controls consist of one or more name/value pairs
            that will be inserted into the form as hidden form variables.
            </summary>
            <value>
            The hidden controls.
            </value>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.SAMLForm.AddHiddenControl(System.String,System.String)">
            <summary>
            Adds a hidden control to the form.
            The control will be inserted into the form as a hidden form variable.
            </summary>
            <param name="controlName"></param>
            <param name="controlValue"></param>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.SAMLForm.Write(System.IO.Stream)">
            <summary>
            Writes the form to the output stream.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.SAMLForm.Write(System.Web.HttpResponseBase)">
            <summary>
            Writes the form to the HTTP response output stream.
            </summary>
            <param name="httpResponse">The HTTP response.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.SAMLForm.Write(System.Web.HttpResponse)">
            <summary>
            Writes the form to the HTTP response output stream.
            </summary>
            <param name="httpResponse">The HTTP response.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.SAMLForm.ToString">
            <summary>
            Converts the form to a string.
            </summary>
            <returns>The form as a string.</returns>
        </member>
        <member name="T:ComponentSpace.SAML2.Bindings.SAMLHTTP">
            <summary>
            An HTTP helper class.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.SAMLHTTP.ToUpper(System.Text.RegularExpressions.Match)">
            <summary>
            A regular expression match evaluator for converting to upper case.
            </summary>
            <param name="match">The regular expression match.</param>
            <returns>The match converted to upper case.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.SAMLHTTP.EncodeFormVariable(System.String)">
            <summary>
            HTML encodes the form variable.
            </summary>
            <param name="formVariable">The form variable.</param>
            <returns>The HTML encoded form variable.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.SAMLHTTP.DecodeFormVariable(System.String)">
            <summary>
            HTML decodes the form variable.
            </summary>
            <param name="formVariable">The form variable.</param>
            <returns>The HTML decoded form variable.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.SAMLHTTP.GetDecodedFormVariableValue(System.Web.HttpRequestBase,System.String)">
            <summary>
            Gets the decoded form variable value from the request.
            </summary>
            <param name="httpRequest">The HTTP request.</param>
            <param name="variableName">The form variable name.</param>
            <returns>The decoded form variable value or <c>null</c> if none.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.SAMLHTTP.GetDecodedFormVariableValue(System.Web.HttpRequest,System.String)">
            <summary>
            Gets the decoded form variable value from the request.
            </summary>
            <param name="httpRequest">The HTTP request.</param>
            <param name="variableName">The form variable name.</param>
            <returns>The decoded form variable value or <c>null</c> if none.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.SAMLHTTP.EncodeQueryStringValue(System.String)">
            <summary>
            URL encodes the query string value.
            </summary>
            <param name="queryValue">The query string value.</param>
            <returns>The URL encoded query string value.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.SAMLHTTP.DecodeQueryStringValue(System.String)">
            <summary>
            URL decodes the query string value.
            </summary>
            <param name="queryValue">The URL encoded query string value.</param>
            <returns>The query string value.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.SAMLHTTP.GetDecodedQueryStringValue(System.Web.HttpRequestBase,System.String)">
            <summary>
            Gets the decoded query string value from the request.
            </summary>
            <param name="httpRequest">The HTTP request.</param>
            <param name="queryName">The query string name.</param>
            <returns>The query string value.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.SAMLHTTP.GetDecodedQueryStringValue(System.Web.HttpRequest,System.String)">
            <summary>
            Gets the decoded query string value from the request.
            </summary>
            <param name="httpRequest">The HTTP request.</param>
            <param name="queryName">The query string name.</param>
            <returns>The query string value.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.SAMLHTTP.ParseQueryString(System.String,System.Boolean)">
            <summary>
            Parses the query string names and values from the URL and optionally decodes them.
            </summary>
            <param name="url">The URL.</param>
            <param name="decodeParameters"><c>true</c> if the parameters are to be decoded; otherwise <c>false</c>.</param>
            <returns>The query string names and values.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.SAMLHTTP.ParseQueryString(System.String)">
            <summary>
            Parses the query string names and values from the URL and decodes them.
            </summary>
            <param name="url">The URL.</param>
            <returns>The query string names and values.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.SAMLHTTP.CreateQueryString(System.Collections.Specialized.NameValueCollection,System.Boolean)">
            <summary>
            Creates a query string with the supplied query string parameter names and values.
            </summary>
            <param name="queryString">The query string parameter names and values.</param>
            <param name="encodeParameters"><c>true</c> if the parameters are to be encoded; otherwise <c>false</c>.</param>
            <returns>The query string.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.SAMLHTTP.CreateQueryString(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Creates a query string with the supplied query string parameter names and values.
            </summary>
            <param name="queryString">The query string parameter names and values.</param>
            <returns>The query string.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.SAMLHTTP.CreateURL(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Creates a URL consisting of a base URL and query string with the supplied query string parameter names and values.
            </summary>
            <param name="baseURL">The base URL.</param>
            <param name="queryString">The query string parameter names and values.</param>
            <returns>The URL.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.SAMLHTTP.Redirect(System.Web.HttpResponseBase,System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Creates a URL include the query string parameter names and values and redirects to it.
            </summary>
            <param name="httpResponse">The HTTP response.</param>
            <param name="redirectURL">The base redirect URL.</param>
            <param name="queryString">The query string parameter names and values.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.SAMLHTTP.Redirect(System.Web.HttpResponse,System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Creates a URL include the query string parameter names and values and redirects to it.
            </summary>
            <param name="httpResponse">The HTTP response.</param>
            <param name="redirectURL">The base redirect URL.</param>
            <param name="queryString">The query string parameter names and values.</param>
        </member>
        <member name="T:ComponentSpace.SAML2.Bindings.SOAP">
            <summary>
            A SOAP helper class.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.SOAP.IsValid(System.Xml.XmlElement)">
            <summary>
            Indicates whether the XML is a SOAP envelope.
            </summary>
            <param name="xmlElement">The XML to test.</param>
            <returns><c>true</c> if the XML is a SOAP envelope; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.SOAP.ToSoap(System.Xml.XmlElement)">
            <summary>
            Converts the SAML message to a SOAP message.
            The SAML message is contained within the SOAP body.
            </summary>
            <param name="samlMessage">The SAML message.</param>
            <returns>The SOAP message.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.SOAP.ToSoap(System.Xml.XmlElement,System.Xml.XmlDocument)">
            <summary>
            Converts the SAML message to a SOAP message.
            The SAML message is contained within the SOAP body.
            </summary>
            <param name="samlMessage">The SAML message.</param>
            <param name="xmlDocument">The owning document.</param>
            <returns>The SOAP message.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.SOAP.FromSoap(System.Xml.XmlElement)">
            <summary>
            Extracts the SAML message from the SOAP message.
            The SAML message is contained within the SOAP body.
            </summary>
            <param name="soapMessage">The SOAP message.</param>
            <returns>The SAML message.</returns>
        </member>
        <member name="T:ComponentSpace.SAML2.Bindings.SOAPBinding">
            <summary>
            Supports the SOAP binding.
            </summary>
            <remarks>
            Refer to the Bindings for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
            <seealso cref="T:ComponentSpace.SAML2.SAMLIdentifiers.BindingURIs"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.SOAPBinding.SendRequestReceiveResponse(System.String,System.Xml.XmlElement)">
            <summary>
            Sends a SAML request and receives a SAML response.
            The SAML request is wrapped in a SOAP message prior to sending.
            The SAML response is extracted from the received SOAP message.
            </summary>
            <param name="destinationURL">The destination URL.</param>
            <param name="samlMessage">The SAML request.</param>
            <returns>The SAML response.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLBindingException">
            Thrown when the send fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.SOAPBinding.SendRequestReceiveResponse(System.Net.WebRequest,System.Xml.XmlElement)">
            <summary>
            Sends a SAML request and receives a SAML response.
            The SAML request is wrapped in a SOAP message prior to sending.
            The SAML response is extracted from the received SOAP message.
            </summary>
            <param name="webRequest">The <c>WebRequest</c> object used to send the request.</param>
            <param name="samlMessage">The SAML request.</param>
            <returns>The SAML response.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLBindingException">
            Thrown when the send fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.SOAPBinding.ReceiveRequest(System.Web.HttpRequestBase)">
            <summary>
            Receives a SAML request.
            The SAML request is extracted from the received SOAP message.
            </summary>
            <param name="httpRequest">The HTTP request containing the SAML request.</param>
            <returns>The SAML request.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLBindingException">
            Thrown when the receive fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.SOAPBinding.ReceiveRequest(System.Web.HttpRequest)">
            <summary>
            Receives a SAML request.
            The SAML request is extracted from the received SOAP message.
            </summary>
            <param name="httpRequest">The HTTP request containing the SAML request.</param>
            <returns>The SAML request.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLBindingException">
            Thrown when the receive fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.SOAPBinding.SendResponse(System.Web.HttpResponseBase,System.Xml.XmlElement)">
            <summary>
            Sends a SAML response.
            The SAML response is wrapped in a SOAP message prior to sending.
            </summary>
            <param name="httpResponse">The HTTP response used to send the SAML response.</param>
            <param name="samlMessage">The SAML response.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLBindingException">
            Thrown when the send fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.SOAPBinding.SendResponse(System.Web.HttpResponse,System.Xml.XmlElement)">
            <summary>
            Sends a SAML response.
            The SAML response is wrapped in a SOAP message prior to sending.
            </summary>
            <param name="httpResponse">The HTTP response used to send the SAML response.</param>
            <param name="samlMessage">The SAML response.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLBindingException">
            Thrown when the send fails.
            </exception>
        </member>
        <member name="T:ComponentSpace.SAML2.Bindings.URIBinding">
            <summary>
            Supports the URI binding.
            </summary>
            <remarks>
            Refer to the Bindings for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
            <seealso cref="T:ComponentSpace.SAML2.SAMLIdentifiers.BindingURIs"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.URIBinding.SendIDReceiveResponse(System.String,System.String)">
            <summary>
            Sends the identifier and receives the SAML response.
            </summary>
            <param name="destinationURL">The destination URL.</param>
            <param name="id">The identifier.</param>
            <returns>The SAML response.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLBindingException">
            Thrown when the send fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.URIBinding.ReceiveID(System.Web.HttpRequestBase)">
            <summary>
            Receives the identifier.
            </summary>
            <param name="httpRequest">The HTTP request containing the identifier.</param>
            <returns>The identifier.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLBindingException">
            Thrown when the receive fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.URIBinding.ReceiveID(System.Web.HttpRequest)">
            <summary>
            Receives the identifier.
            </summary>
            <param name="httpRequest">The HTTP request containing the identifier.</param>
            <returns>The identifier.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLBindingException">
            Thrown when the receive fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.URIBinding.SendResponse(System.Web.HttpResponseBase,System.Xml.XmlElement)">
            <summary>
            Sends the SAML response.
            </summary>
            <param name="httpResponse">The HTTP response that will return the SAML response.</param>
            <param name="samlMessage">The SAML response.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLBindingException">
            Thrown when the send fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Bindings.URIBinding.SendResponse(System.Web.HttpResponse,System.Xml.XmlElement)">
            <summary>
            Sends the SAML response.
            </summary>
            <param name="httpResponse">The HTTP response that will return the SAML response.</param>
            <param name="samlMessage">The SAML response.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLBindingException">
            Thrown when the send fails.
            </exception>
        </member>
        <member name="T:ComponentSpace.SAML2.Certificates.CachedCertificateLoader">
            <summary>
            The cached certificate loader loads X.509 certificates.
            <para>
            Certificates are cached in memory for performance.
            </para>
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Certificates.CachedCertificateLoader.#ctor(ComponentSpace.SAML2.Certificates.ICertificateLoader)">
            <summary>
            Constructs a CachedCertificateLoader.
            </summary>
            <param name="certificateLoader">The certificate loader.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Certificates.CachedCertificateLoader.LoadCertificateFromString(System.String,System.String)">
            <summary>
            Loads an X.509 certificate from a base-64 encoded string.
            </summary>
            <param name="certificateString">The certificate base-64 encoded string.</param>
            <param name="certificatePassword">The certificate file password or <c>null</c> if none.</param>
            <returns>The X.509 certificate.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the X.509 certificates cannot be loaded.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Certificates.CachedCertificateLoader.LoadCertificateFromKey(System.String)">
            <summary>
            Loads an X.509 certificate from elsewhere in the configuration.
            <para>
            This may be used to retrieve certificates stored in an Azure key vault.
            </para>
            </summary>
            <param name="certificateKey">The configuration key.</param>
            <returns>The X.509 certificate.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the X.509 certificates cannot be loaded.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Certificates.CachedCertificateLoader.LoadCertificateFromFile(System.String,System.String)">
            <summary>
            Loads an X.509 certificate from the file system.
            <para>
            Certificates are cached in memory for performance.
            </para>
            </summary>
            <param name="certificateFile">The certificate file name.</param>
            <param name="certificatePassword">The certificate file password or <c>null</c> if none.</param>
            <returns>The X.509 certificate.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the X.509 certificates cannot be loaded.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Certificates.CachedCertificateLoader.LoadCertificateFromStore(System.Security.Cryptography.X509Certificates.StoreLocation,System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.X509FindType,System.Object)">
            <summary>
            Loads an X.509 certificate from the Windows Certificate Store.
            <para>
            Certificates are cached in memory for performance.
            </para>
            </summary>
            <param name="storeLocation">The store location.</param>
            <param name="storeName">The store name.</param>
            <param name="findType">The find type for searching the certificate store.</param>
            <param name="findValue">The find value for searching the certificate store.</param>
            <returns>The X.509 certificate.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the X.509 certificates cannot be loaded.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Certificates.CachedCertificateLoader.Clear">
            <summary>
            Removes all X.509 certificates from the cache.
            </summary>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the X.509 certificate cache cannot be cleared.
            </exception>
        </member>
        <member name="T:ComponentSpace.SAML2.Certificates.CertificateLoader">
            <summary>
            The certificate loader loads X.509 certificates.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Certificates.CertificateLoader.LoadCertificateFromString(System.String,System.String)">
            <summary>
            Loads an X.509 certificate from a base-64 encoded string.
            </summary>
            <param name="certificateString">The certificate base-64 encoded string.</param>
            <param name="certificatePassword">The certificate file password or <c>null</c> if none.</param>
            <returns>The X.509 certificate.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the X.509 certificates cannot be loaded.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Certificates.CertificateLoader.LoadCertificateFromKey(System.String)">
            <summary>
            Loads an X.509 certificate from elsewhere in the configuration.
            <para>
            This may be used to retrieve certificates stored in an Azure key vault.
            </para>
            </summary>
            <param name="certificateKey">The configuration key.</param>
            <returns>The X.509 certificate.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the X.509 certificates cannot be loaded.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Certificates.CertificateLoader.LoadCertificateFromFile(System.String,System.String)">
            <summary>
            Loads an X.509 certificate from the file system.
            </summary>
            <param name="certificateFile">The certificate file name.</param>
            <param name="certificatePassword">The certificate file password or <c>null</c> if none.</param>
            <returns>The X.509 certificate.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the X.509 certificates cannot be loaded.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Certificates.CertificateLoader.LoadCertificateFromStore(System.Security.Cryptography.X509Certificates.StoreLocation,System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.X509FindType,System.Object)">
            <summary>
            Loads an X.509 certificate from the Windows Certificate Store.
            </summary>
            <param name="storeLocation">The store location.</param>
            <param name="storeName">The store name.</param>
            <param name="findType">The find type for searching the certificate store.</param>
            <param name="findValue">The find value for searching the certificate store.</param>
            <returns>The X.509 certificate.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the X.509 certificates cannot be loaded.
            </exception>
        </member>
        <member name="T:ComponentSpace.SAML2.Certificates.CertificateManager">
            <summary>
            The certificate manager manages X.509 certificates.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Certificates.CertificateManager.#ctor(ComponentSpace.SAML2.Certificates.ICertificateLoader)">
            <summary>
            Constructs a CertificateManager.
            </summary>
            <param name="certificateLoader">The certificate loader.</param>
        </member>
        <member name="P:ComponentSpace.SAML2.Certificates.CertificateManager.CertificateLoader">
            <summary>
            Gets the certificate loader.
            </summary>
            <value>
            The certificate loader.
            </value>
        </member>
        <member name="M:ComponentSpace.SAML2.Certificates.CertificateManager.GetLocalIdentityProviderSignatureCertificates(ComponentSpace.SAML2.Configuration.LocalIdentityProviderConfiguration,ComponentSpace.SAML2.Configuration.PartnerServiceProviderConfiguration)">
            <summary>
            Gets the local identity provider X.509 signature certificates.
            </summary>
            <param name="localIdentityProviderConfiguration">The local identity provider configuration.</param>
            <param name="partnerServiceProviderConfiguration">The partner service provider configuration.</param>
            <returns>The local identity provider X.509 signature certificates or <c>null</c> if none.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the X.509 certificates cannot be retrieved.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Certificates.CertificateManager.GetLocalServiceProviderSignatureCertificates(ComponentSpace.SAML2.Configuration.LocalServiceProviderConfiguration,ComponentSpace.SAML2.Configuration.PartnerIdentityProviderConfiguration)">
            <summary>
            Gets the local service provider X.509 signature certificates.
            </summary>
            <param name="localServiceProviderConfiguration">The local service provider configuration.</param>
            <param name="partnerIdentityProviderConfiguration">The partner identity provider configuration.</param>
            <returns>The local service provider X.509 signature certificates or <c>null</c> if none.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the X.509 certificates cannot be retrieved.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Certificates.CertificateManager.GetLocalIdentityProviderEncryptionCertificates(ComponentSpace.SAML2.Configuration.LocalIdentityProviderConfiguration,ComponentSpace.SAML2.Configuration.PartnerServiceProviderConfiguration)">
            <summary>
            Gets the local identity provider X.509 encryption certificates.
            </summary>
            <param name="localIdentityProviderConfiguration">The local identity provider configuration.</param>
            <param name="partnerServiceProviderConfiguration">The partner service provider configuration.</param>
            <returns>The local identity provider X.509 encryption certificates or <c>null</c> if none.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the X.509 certificates cannot be retrieved.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Certificates.CertificateManager.GetLocalServiceProviderEncryptionCertificates(ComponentSpace.SAML2.Configuration.LocalServiceProviderConfiguration,ComponentSpace.SAML2.Configuration.PartnerIdentityProviderConfiguration)">
            <summary>
            Gets the local service provider X.509 encryption certificates.
            </summary>
            <param name="localServiceProviderConfiguration">The local service provider configuration.</param>
            <param name="partnerIdentityProviderConfiguration">The partner identity provider configuration.</param>
            <returns>The local service provider X.509 encryption certificates or <c>null</c> if none.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the X.509 certificates cannot be retrieved.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Certificates.CertificateManager.GetPartnerIdentityProviderSignatureCertificates(ComponentSpace.SAML2.Configuration.PartnerIdentityProviderConfiguration)">
            <summary>
            Gets the partner identity provider X.509 signature certificates.
            </summary>
            <param name="partnerIdentityProviderConfiguration">The partner identity provider configuration.</param>
            <returns>The partner identity provider X.509 signature certificates or <c>null</c> if none.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the X.509 certificates cannot be retrieved.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Certificates.CertificateManager.GetPartnerServiceProviderSignatureCertificates(ComponentSpace.SAML2.Configuration.PartnerServiceProviderConfiguration)">
            <summary>
            Gets the partner service provider X.509 signature certificates.
            </summary>
            <param name="partnerServiceProviderConfiguration">The partner service provider configuration.</param>
            <returns>The partner service provider X.509 signature certificates or <c>null</c> if none.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the X.509 certificates cannot be retrieved.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Certificates.CertificateManager.GetPartnerIdentityProviderEncryptionCertificates(ComponentSpace.SAML2.Configuration.PartnerIdentityProviderConfiguration)">
            <summary>
            Gets the partner identity provider X.509 encryption certificates.
            </summary>
            <param name="partnerIdentityProviderConfiguration">The partner identity provider configuration.</param>
            <returns>The partner identity provider X.509 encryption certificates or <c>null</c> if none.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the X.509 certificates cannot be retrieved.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Certificates.CertificateManager.GetPartnerServiceProviderEncryptionCertificates(ComponentSpace.SAML2.Configuration.PartnerServiceProviderConfiguration)">
            <summary>
            Gets the partner service provider X.509 encryption certificates.
            </summary>
            <param name="partnerServiceProviderConfiguration">The partner service provider configuration.</param>
            <returns>The partner service provider X.509 encryption certificates or <c>null</c> if none.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the X.509 certificates cannot be retrieved.
            </exception>
        </member>
        <member name="T:ComponentSpace.SAML2.Certificates.ICachedCertificateLoader">
            <summary>
            The cached certificate loader loads and caches X.509 certificates.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Certificates.ICachedCertificateLoader.Clear">
            <summary>
            Removes all X.509 certificates from the cache.
            </summary>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the X.509 certificate cache cannot be cleared.
            </exception>
        </member>
        <member name="T:ComponentSpace.SAML2.Certificates.ICertificateLoader">
            <summary>
            The certificate loader loads X.509 certificates.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Certificates.ICertificateLoader.LoadCertificateFromString(System.String,System.String)">
            <summary>
            Loads an X.509 certificate from a base-64 encoded string.
            </summary>
            <param name="certificateString">The certificate base-64 encoded string.</param>
            <param name="certificatePassword">The certificate file password or <c>null</c> if none.</param>
            <returns>The X.509 certificate.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the X.509 certificates cannot be loaded.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Certificates.ICertificateLoader.LoadCertificateFromKey(System.String)">
            <summary>
            Loads an X.509 certificate from elsewhere in the configuration.
            <para>
            This may be used to retrieve certificates stored in an Azure key vault.
            </para>
            </summary>
            <param name="certificateKey">The configuration key.</param>
            <returns>The X.509 certificate.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the X.509 certificates cannot be loaded.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Certificates.ICertificateLoader.LoadCertificateFromFile(System.String,System.String)">
            <summary>
            Loads an X.509 certificate from the file system.
            </summary>
            <param name="certificateFile">The certificate file name.</param>
            <param name="certificatePassword">The certificate file password or <c>null</c> if none.</param>
            <returns>The X.509 certificate.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the X.509 certificates cannot be loaded.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Certificates.ICertificateLoader.LoadCertificateFromStore(System.Security.Cryptography.X509Certificates.StoreLocation,System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.X509FindType,System.Object)">
            <summary>
            Loads an X.509 certificate from the Windows Certificate Store.
            </summary>
            <param name="storeLocation">The store location.</param>
            <param name="storeName">The store name.</param>
            <param name="findType">The find type for searching the certificate store.</param>
            <param name="findValue">The find value for searching the certificate store.</param>
            <returns>The X.509 certificate.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the X.509 certificates cannot be loaded.
            </exception>
        </member>
        <member name="T:ComponentSpace.SAML2.Certificates.ICertificateManager">
            <summary>
            The certificate manager manages X.509 certificates.
            </summary>
        </member>
        <member name="P:ComponentSpace.SAML2.Certificates.ICertificateManager.CertificateLoader">
            <summary>
            Gets the certificate loader.
            </summary>
            <value>
            The certificate loader.
            </value>
        </member>
        <member name="M:ComponentSpace.SAML2.Certificates.ICertificateManager.GetLocalIdentityProviderSignatureCertificates(ComponentSpace.SAML2.Configuration.LocalIdentityProviderConfiguration,ComponentSpace.SAML2.Configuration.PartnerServiceProviderConfiguration)">
            <summary>
            Gets the local identity provider X.509 signature certificates.
            </summary>
            <param name="localIdentityProviderConfiguration">The local identity provider configuration.</param>
            <param name="partnerServiceProviderConfiguration">The partner service provider configuration.</param>
            <returns>The local identity provider X.509 signature certificates or <c>null</c> if none.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the X.509 certificates cannot be retrieved.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Certificates.ICertificateManager.GetLocalServiceProviderSignatureCertificates(ComponentSpace.SAML2.Configuration.LocalServiceProviderConfiguration,ComponentSpace.SAML2.Configuration.PartnerIdentityProviderConfiguration)">
            <summary>
            Gets the local service provider X.509 signature certificates.
            </summary>
            <param name="localServiceProviderConfiguration">The local service provider configuration.</param>
            <param name="partnerIdentityProviderConfiguration">The partner identity provider configuration.</param>
            <returns>The local service provider X.509 signature certificates or <c>null</c> if none.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the X.509 certificates cannot be retrieved.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Certificates.ICertificateManager.GetLocalIdentityProviderEncryptionCertificates(ComponentSpace.SAML2.Configuration.LocalIdentityProviderConfiguration,ComponentSpace.SAML2.Configuration.PartnerServiceProviderConfiguration)">
            <summary>
            Gets the local identity provider X.509 encryption certificates.
            </summary>
            <param name="localIdentityProviderConfiguration">The local identity provider configuration.</param>
            <param name="partnerServiceProviderConfiguration">The partner service provider configuration.</param>
            <returns>The local identity provider X.509 encryption certificates or <c>null</c> if none.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the X.509 certificates cannot be retrieved.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Certificates.ICertificateManager.GetLocalServiceProviderEncryptionCertificates(ComponentSpace.SAML2.Configuration.LocalServiceProviderConfiguration,ComponentSpace.SAML2.Configuration.PartnerIdentityProviderConfiguration)">
            <summary>
            Gets the local service provider X.509 encryption certificates.
            </summary>
            <param name="localServiceProviderConfiguration">The local service provider configuration.</param>
            <param name="partnerIdentityProviderConfiguration">The partner identity provider configuration.</param>
            <returns>The local service provider X.509 encryption certificates or <c>null</c> if none.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the X.509 certificates cannot be retrieved.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Certificates.ICertificateManager.GetPartnerIdentityProviderSignatureCertificates(ComponentSpace.SAML2.Configuration.PartnerIdentityProviderConfiguration)">
            <summary>
            Gets the partner identity provider X.509 signature certificates.
            </summary>
            <param name="partnerIdentityProviderConfiguration">The partner identity provider configuration.</param>
            <returns>The partner identity provider X.509 signature certificates or <c>null</c> if none.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the X.509 certificates cannot be retrieved.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Certificates.ICertificateManager.GetPartnerServiceProviderSignatureCertificates(ComponentSpace.SAML2.Configuration.PartnerServiceProviderConfiguration)">
            <summary>
            Gets the partner service provider X.509 signature certificates.
            </summary>
            <param name="partnerServiceProviderConfiguration">The partner service provider configuration.</param>
            <returns>The partner service provider X.509 signature certificates or <c>null</c> if none.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the X.509 certificates cannot be retrieved.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Certificates.ICertificateManager.GetPartnerIdentityProviderEncryptionCertificates(ComponentSpace.SAML2.Configuration.PartnerIdentityProviderConfiguration)">
            <summary>
            Gets the partner identity provider X.509 encryption certificates.
            </summary>
            <param name="partnerIdentityProviderConfiguration">The partner identity provider configuration.</param>
            <returns>The partner identity provider X.509 encryption certificates or <c>null</c> if none.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the X.509 certificates cannot be retrieved.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Certificates.ICertificateManager.GetPartnerServiceProviderEncryptionCertificates(ComponentSpace.SAML2.Configuration.PartnerServiceProviderConfiguration)">
            <summary>
            Gets the partner service provider X.509 encryption certificates.
            </summary>
            <param name="partnerServiceProviderConfiguration">The partner service provider configuration.</param>
            <returns>The partner service provider X.509 encryption certificates or <c>null</c> if none.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the X.509 certificates cannot be retrieved.
            </exception>
        </member>
        <member name="T:ComponentSpace.SAML2.Configuration.CertificateConfiguration">
            <summary>
            The certificate configuration identifies an X.509 certificate
            stored as a string, in a file, in the Windows certificate store, or elsewhere in the configuration.
            <para>
            If the certificate is stored as a string, the certificate base-64 encoded string must be specified
            and, if the certificate includes a private key, the password.
            </para>
            <para>
            If the certificate is stored in a file, the file name must be specified
            and, if the file includes a private key, the password.
            </para>
            <para>
            If the certificate is stored in the Windows certificate store,
            the store name and location must be specified as well as the certificate's
            serial number, thumbprint or subject name.
            </para>
            <para>
            If the certificate is stored elsewhere in the configuration, the configuration key must be specified.
            This may be used to retrieve certificates stored in an Azure key vault.
            </para>
            </summary>
        </member>
        <member name="T:ComponentSpace.SAML2.Configuration.CertificateConfiguration.CertificateUse">
            <summary>
            Identifies the intended use of the certificate.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.Configuration.CertificateConfiguration.CertificateUse.Encryption">
            <summary>
            Encryption and decryption.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.Configuration.CertificateConfiguration.CertificateUse.Signature">
            <summary>
            Signature generation and verification.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.Configuration.CertificateConfiguration.CertificateUse.Any">
            <summary>
            Any.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Configuration.CertificateConfiguration.#ctor">
            <summary>
            Constructs a certificate configuration.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Configuration.CertificateConfiguration.#ctor(System.Xml.XmlElement)">
            <summary>
            Constructs a certificate configuration from XML.
            </summary>
            <param name="xmlElement">The certificate configuration XML.</param>
        </member>
        <member name="P:ComponentSpace.SAML2.Configuration.CertificateConfiguration.Use">
            <summary>
            Gets or sets the certificate use.
            </summary>
            <value>
            The certificate use.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Configuration.CertificateConfiguration.String">
            <summary>
            Gets or sets the certificate base-64 encoded string.
            </summary>
            <value>
            The certificate string or <c>null</c> if none.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Configuration.CertificateConfiguration.Key">
            <summary>
            Gets or sets the configuration key.
            </summary>
            <value>
            The configuration key or <c>null</c> if none.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Configuration.CertificateConfiguration.FileName">
            <summary>
            Gets or sets the certificate file name.
            <para>
            The file contains a base-64 encoded, DER encoded or PFX/PKCS12 X.509 certificate.
            </para>
            </summary>
            <value>
            The certificate file name or <c>null</c> if none.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Configuration.CertificateConfiguration.Password">
            <summary>
            Gets or sets the certificate password.
            <para>
            A password is required with PFX/PKCS12 X.509 certificates.
            </para>
            </summary>
            <value>
            The password or <c>null</c> if none.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Configuration.CertificateConfiguration.StoreLocation">
            <summary>
            Gets or sets the Windows certificate store location.
            </summary>
            <value>
            The Windows certificate store location.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Configuration.CertificateConfiguration.StoreName">
            <summary>
            Gets or sets the Windows certificate store name.
            </summary>
            <value>
            The Windows certificate store name.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Configuration.CertificateConfiguration.SerialNumber">
            <summary>
            Gets or sets the certificate serial number.
            </summary>
            <value>
            The certificate serial number or <c>null</c> if none.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Configuration.CertificateConfiguration.Thumbprint">
            <summary>
            Gets or sets the certificate thumbprint.
            </summary>
            <value>
            The certificate thumbprint or <c>null</c> if none.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Configuration.CertificateConfiguration.SubjectName">
            <summary>
            Gets or sets the certificate subject name.
            </summary>
            <value>
            The certificate subject name or <c>null</c> if none.
            </value>
        </member>
        <member name="M:ComponentSpace.SAML2.Configuration.CertificateConfiguration.ToXml(System.Xml.XmlElement)">
            <summary>
            Serializes the certificate configuration to XML.
            </summary>
            <param name="xmlElement">The XML element.</param>
        </member>
        <member name="T:ComponentSpace.SAML2.Configuration.ConfigurationIDs">
            <summary>
            The configuration IDs.
            </summary>
        </member>
        <member name="T:ComponentSpace.SAML2.Configuration.ConfigurationIDs.NamespaceURIs">
            <summary>
            The configuration XML namespaces.
            </summary>
        </member>
        <member name="T:ComponentSpace.SAML2.Configuration.ConfigurationIDs.ElementNames">
            <summary>
            The configuration XML element names.
            </summary>
        </member>
        <member name="T:ComponentSpace.SAML2.Configuration.ConfigurationIDs.AttributeNames">
            <summary>
            The configuration XML attribute names.
            </summary>
        </member>
        <member name="T:ComponentSpace.SAML2.Configuration.Entity">
            <summary>
            The configuration entity supports the Entity Framework.
            </summary>
        </member>
        <member name="P:ComponentSpace.SAML2.Configuration.Entity.Id">
            <summary>
            Gets or sets the entity ID.
            <para>
            This maps to the primary key in Entity Framework. It's otherwise not used.
            </para>
            </summary>
            <value>
            The entity ID.
            </value>
        </member>
        <member name="T:ComponentSpace.SAML2.Configuration.LocalIdentityProviderConfiguration">
            <summary>
            The local identity provider configuration specifies the configuration for the local identity provider.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Configuration.LocalIdentityProviderConfiguration.#ctor">
            <summary>
            Constructs an identity provider configuration.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Configuration.LocalIdentityProviderConfiguration.#ctor(System.Xml.XmlElement)">
            <summary>
            Constructs an identity provider configuration from XML.
            </summary>
            <param name="xmlElement">The identity provider configuration XML.</param>
        </member>
        <member name="P:ComponentSpace.SAML2.Configuration.LocalIdentityProviderConfiguration.SingleSignOnServiceUrl">
            <summary>
            Gets or sets the identity provider's single sign-on service URL.
            <para>
            The single sign-on service URL is the endpoint at which the SAML authn request is received.
            </para>
            </summary>
            <value>
            The identity provider's single sign-on service URL.
            </value>
        </member>
        <member name="M:ComponentSpace.SAML2.Configuration.LocalIdentityProviderConfiguration.ToXml(System.Xml.XmlElement)">
            <summary>
            Serializes the identity provider configuration to XML.
            </summary>
            <param name="xmlElement">The XML element.</param>
        </member>
        <member name="T:ComponentSpace.SAML2.Configuration.LocalProviderConfiguration">
            <summary>
            The local provider configuration is configuration common to local identity providers and service providers.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Configuration.LocalProviderConfiguration.#ctor">
            <summary>
            Constructs a local provider configuration.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Configuration.LocalProviderConfiguration.#ctor(System.Xml.XmlElement)">
            <summary>
            Constructs a local provider configuration from XML.
            </summary>
            <param name="xmlElement">The local provider configuration XML.</param>
        </member>
        <member name="P:ComponentSpace.SAML2.Configuration.LocalProviderConfiguration.SingleLogoutServiceUrl">
            <summary>
            Gets or sets the local provider's single logout service URL.
            <para>
            The single logout service URL is the endpoint at which the SAML logout messages received.
            </para>
            </summary>
            <value>
            The local provider's single logout service URL.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Configuration.LocalProviderConfiguration.ResolveToHttps">
            <summary>
            Gets or sets the flag indicating whether local URLs should be resolved to HTTPS.
            </summary>
            <value>
            The flag indicating whether local URLs should be resolved to HTTPS.
            </value>
        </member>
        <member name="M:ComponentSpace.SAML2.Configuration.LocalProviderConfiguration.ToXml(System.Xml.XmlElement)">
            <summary>
            Serializes the local provider configuration to XML.
            </summary>
            <param name="xmlElement">The XML element.</param>
        </member>
        <member name="T:ComponentSpace.SAML2.Configuration.LocalServiceProviderConfiguration">
            <summary>
            The local service provider configuration specifies the configuration for the local service provider.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Configuration.LocalServiceProviderConfiguration.#ctor">
            <summary>
            Constructs a service provider configuration.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Configuration.LocalServiceProviderConfiguration.#ctor(System.Xml.XmlElement)">
            <summary>
            Constructs a service provider configuration from XML.
            </summary>
            <param name="xmlElement">The service provider configuration XML.</param>
        </member>
        <member name="P:ComponentSpace.SAML2.Configuration.LocalServiceProviderConfiguration.AssertionConsumerServiceUrl">
            <summary>
            Gets or sets the service provider's assertion consumer service (ACS) URL.
            <para>
            The assertion consumer service URL is the endpoint at which the SAML response is received.
            </para>
            </summary>
            <value>
            The service provider's assertion consumer service (ACS) URL.
            </value>
        </member>
        <member name="M:ComponentSpace.SAML2.Configuration.LocalServiceProviderConfiguration.ToXml(System.Xml.XmlElement)">
            <summary>
            Serializes the service provider configuration to XML.
            </summary>
            <param name="xmlElement">The XML element.</param>
        </member>
        <member name="T:ComponentSpace.SAML2.Configuration.MetadataExporter">
            <summary>
            Exports the SAML configuration as SAML metadata.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Configuration.MetadataExporter.Export(ComponentSpace.SAML2.Configuration.LocalIdentityProviderConfiguration,System.Security.Cryptography.X509Certificates.X509Certificate2,System.String,System.String,ComponentSpace.SAML2.Configuration.PartnerServiceProviderConfiguration)">
            <summary>
            Exports the identity provider SAML configuration as SAML metadata.
            </summary>
            <param name="localIdentityProviderConfiguration">The local identity provider configuration.</param>
            <param name="x509Certificate">The X.509 certificate or <c>null</c> if none.</param>
            <param name="singleSignOnServiceURL">The SSO service URL or <c>null</c> if none.</param>
            <param name="singleLogoutServiceURL">The SLO service URL or <c>null</c> if none.</param>
            <param name="partnerServiceProviderConfiguration">The partner service provider configuration or <c>null</c> if none.</param>
            <returns>The SAML metadata entity descriptor.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the local identity provider configuration cannot be found.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Configuration.MetadataExporter.Export(ComponentSpace.SAML2.Configuration.LocalIdentityProviderConfiguration,System.Collections.Generic.IList{System.Security.Cryptography.X509Certificates.X509Certificate2},System.String,System.String,ComponentSpace.SAML2.Configuration.PartnerServiceProviderConfiguration)">
            <summary>
            Exports the identity provider SAML configuration as SAML metadata.
            </summary>
            <param name="localIdentityProviderConfiguration">The local identity provider configuration.</param>
            <param name="x509Certificates">The X.509 certificates or <c>null</c> if none.</param>
            <param name="singleSignOnServiceURL">The SSO service URL or <c>null</c> if none.</param>
            <param name="singleLogoutServiceURL">The SLO service URL or <c>null</c> if none.</param>
            <param name="partnerServiceProviderConfiguration">The partner service provider configuration or <c>null</c> if none.</param>
            <returns>The SAML metadata entity descriptor.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the local identity provider configuration cannot be found.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Configuration.MetadataExporter.Export(ComponentSpace.SAML2.Configuration.SAMLConfiguration,System.Security.Cryptography.X509Certificates.X509Certificate2,System.String,System.String,System.String)">
            <summary>
            Exports the identity provider SAML configuration as SAML metadata.
            </summary>
            <param name="samlConfiguration">The SAML configuration.</param>
            <param name="x509Certificate">The X.509 certificate or <c>null</c> if none.</param>
            <param name="singleSignOnServiceURL">The SSO service URL or <c>null</c> if none.</param>
            <param name="singleLogoutServiceURL">The SLO service URL or <c>null</c> if none.</param>
            <param name="partnerName">The SAML configuration partner name or <c>null</c> if none.</param>
            <returns>The SAML metadata entity descriptor.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the local identity provider configuration cannot be found.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Configuration.MetadataExporter.Export(ComponentSpace.SAML2.Configuration.SAMLConfiguration,System.Collections.Generic.IList{System.Security.Cryptography.X509Certificates.X509Certificate2},System.String,System.String,System.String)">
            <summary>
            Exports the identity provider SAML configuration as SAML metadata.
            </summary>
            <param name="samlConfiguration">The SAML configuration.</param>
            <param name="x509Certificates">The X.509 certificates or <c>null</c> if none.</param>
            <param name="singleSignOnServiceURL">The SSO service URL or <c>null</c> if none.</param>
            <param name="singleLogoutServiceURL">The SLO service URL or <c>null</c> if none.</param>
            <param name="partnerName">The SAML configuration partner name or <c>null</c> if none.</param>
            <returns>The SAML metadata entity descriptor.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the local identity provider configuration cannot be found.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Configuration.MetadataExporter.Export(System.String,System.Security.Cryptography.X509Certificates.X509Certificate2,System.String,System.String,System.String)">
            <summary>
            Exports the identity provider SAML configuration as SAML metadata.
            </summary>
            <param name="configurationName">The configuration name or <c>null</c> if none.</param>
            <param name="x509Certificate">The X.509 certificate or <c>null</c> if none.</param>
            <param name="singleSignOnServiceURL">The SSO service URL or <c>null</c> if none.</param>
            <param name="singleLogoutServiceURL">The SLO service URL or <c>null</c> if none.</param>
            <param name="partnerName">The SAML configuration partner name or <c>null</c> if none.</param>
            <returns>The SAML metadata entity descriptor.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the local identity provider configuration cannot be found.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Configuration.MetadataExporter.Export(System.String,System.Collections.Generic.IList{System.Security.Cryptography.X509Certificates.X509Certificate2},System.String,System.String,System.String)">
            <summary>
            Exports the identity provider SAML configuration as SAML metadata.
            </summary>
            <param name="configurationName">The configuration name or <c>null</c> if none.</param>
            <param name="x509Certificates">The X.509 certificates or <c>null</c> if none.</param>
            <param name="singleSignOnServiceURL">The SSO service URL or <c>null</c> if none.</param>
            <param name="singleLogoutServiceURL">The SLO service URL or <c>null</c> if none.</param>
            <param name="partnerName">The SAML configuration partner name or <c>null</c> if none.</param>
            <returns>The SAML metadata entity descriptor.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the local identity provider configuration cannot be found.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Configuration.MetadataExporter.Export(ComponentSpace.SAML2.Configuration.LocalServiceProviderConfiguration,System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.X509Certificates.X509Certificate2,System.String,System.String,ComponentSpace.SAML2.Configuration.PartnerIdentityProviderConfiguration)">
            <summary>
            Exports the service provider SAML configuration and X.509 certificate as SAML metadata.
            </summary>
            <param name="localServiceProviderConfiguration">The local service provider configuration.</param>
            <param name="signatureCertificate">The signature X.509 certificate or <c>null</c> if none.</param>
            <param name="encryptionCertificate">The encryption X.509 certificate or <c>null</c> if none.</param>
            <param name="assertionConsumerServiceURL">The assertion consumer service URL or <c>null</c> if none.</param>
            <param name="singleLogoutServiceURL">The SLO service URL or <c>null</c> if none.</param>
            <param name="partnerIdentityProviderConfiguration">The partner identity provider configuration or <c>null</c> if none.</param>
            <returns>The SAML metadata entity descriptor.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Configuration.MetadataExporter.Export(ComponentSpace.SAML2.Configuration.LocalServiceProviderConfiguration,System.Collections.Generic.IList{System.Security.Cryptography.X509Certificates.X509Certificate2},System.Collections.Generic.IList{System.Security.Cryptography.X509Certificates.X509Certificate2},System.String,System.String,ComponentSpace.SAML2.Configuration.PartnerIdentityProviderConfiguration)">
            <summary>
            Exports the service provider SAML configuration and X.509 certificate as SAML metadata.
            </summary>
            <param name="localServiceProviderConfiguration">The local service provider configuration.</param>
            <param name="signatureCertificates">The signature X.509 certificates or <c>null</c> if none.</param>
            <param name="encryptionCertificates">The encryption X.509 certificates or <c>null</c> if none.</param>
            <param name="assertionConsumerServiceURL">The assertion consumer service URL or <c>null</c> if none.</param>
            <param name="singleLogoutServiceURL">The SLO service URL or <c>null</c> if none.</param>
            <param name="partnerIdentityProviderConfiguration">The partner identity provider configuration or <c>null</c> if none.</param>
            <returns>The SAML metadata entity descriptor.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Configuration.MetadataExporter.Export(ComponentSpace.SAML2.Configuration.SAMLConfiguration,System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.X509Certificates.X509Certificate2,System.String,System.String,System.String)">
            <summary>
            Exports the service provider SAML configuration and X.509 certificate as SAML metadata.
            </summary>
            <param name="samlConfiguration">The SAML configuration.</param>
            <param name="signatureCertificate">The signature X.509 certificate or <c>null</c> if none.</param>
            <param name="encryptionCertificate">The encryption X.509 certificate or <c>null</c> if none.</param>
            <param name="assertionConsumerServiceURL">The assertion consumer service URL or <c>null</c> if none.</param>
            <param name="singleLogoutServiceURL">The SLO service URL or <c>null</c> if none.</param>
            <param name="partnerName">The SAML configuration partner name or <c>null</c> if none.</param>
            <returns>The SAML metadata entity descriptor.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Configuration.MetadataExporter.Export(ComponentSpace.SAML2.Configuration.SAMLConfiguration,System.Collections.Generic.IList{System.Security.Cryptography.X509Certificates.X509Certificate2},System.Collections.Generic.IList{System.Security.Cryptography.X509Certificates.X509Certificate2},System.String,System.String,System.String)">
            <summary>
            Exports the service provider SAML configuration and X.509 certificate as SAML metadata.
            </summary>
            <param name="samlConfiguration">The SAML configuration.</param>
            <param name="signatureCertificates">The signature X.509 certificates or <c>null</c> if none.</param>
            <param name="encryptionCertificates">The encryption X.509 certificates or <c>null</c> if none.</param>
            <param name="assertionConsumerServiceURL">The assertion consumer service URL or <c>null</c> if none.</param>
            <param name="singleLogoutServiceURL">The SLO service URL or <c>null</c> if none.</param>
            <param name="partnerName">The SAML configuration partner name or <c>null</c> if none.</param>
            <returns>The SAML metadata entity descriptor.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Configuration.MetadataExporter.Export(System.String,System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.X509Certificates.X509Certificate2,System.String,System.String,System.String)">
            <summary>
            Exports the service provider SAML configuration and X.509 certificate as SAML metadata.
            </summary>
            <param name="configurationName">The configuration name or <c>null</c> if none.</param>
            <param name="signatureCertificate">The signature X.509 certificate or <c>null</c> if none.</param>
            <param name="encryptionCertificate">The encryption X.509 certificate or <c>null</c> if none.</param>
            <param name="assertionConsumerServiceURL">The assertion consumer service URL or <c>null</c> if none.</param>
            <param name="singleLogoutServiceURL">The SLO service URL or <c>null</c> if none.</param>
            <param name="partnerName">The SAML configuration partner name or <c>null</c> if none.</param>
            <returns>The SAML metadata entity descriptor.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Configuration.MetadataExporter.Export(System.String,System.Collections.Generic.IList{System.Security.Cryptography.X509Certificates.X509Certificate2},System.Collections.Generic.IList{System.Security.Cryptography.X509Certificates.X509Certificate2},System.String,System.String,System.String)">
            <summary>
            Exports the service provider SAML configuration and X.509 certificate as SAML metadata.
            </summary>
            <param name="configurationName">The configuration name or <c>null</c> if none.</param>
            <param name="signatureCertificates">The signature X.509 certificates or <c>null</c> if none.</param>
            <param name="encryptionCertificates">The encryption X.509 certificates or <c>null</c> if none.</param>
            <param name="assertionConsumerServiceURL">The assertion consumer service URL or <c>null</c> if none.</param>
            <param name="singleLogoutServiceURL">The SLO service URL or <c>null</c> if none.</param>
            <param name="partnerName">The SAML configuration partner name or <c>null</c> if none.</param>
            <returns>The SAML metadata entity descriptor.</returns>
        </member>
        <member name="T:ComponentSpace.SAML2.Configuration.MetadataImporter">
            <summary>
            Imports SAML metadata into the SAML configuration.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Configuration.MetadataImporter.SaveCertificate(System.Security.Cryptography.X509Certificates.X509Certificate2,System.String)">
            <summary>
            Saves the X.509 certificate to the specified file.
            </summary>
            <param name="x509Certificate">The X.509 certificate.</param>
            <param name="fileName">The file name.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Configuration.MetadataImporter.ImportIdentityProviders(ComponentSpace.SAML2.Metadata.EntityDescriptor,System.String)">
            <summary>
            Imports the SAML identity provider metadata entity descriptor.
            </summary>
            <param name="entityDescriptor">The SAML metadata entity descriptor.</param>
            <param name="certificateFolder">The folder to save certificates files to or <c>null</c> if certificates are to be saved as strings.</param>
            <returns>The list of partner identity provider configurations.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Configuration.MetadataImporter.ImportIdentityProviders(ComponentSpace.SAML2.Metadata.EntitiesDescriptor,System.String)">
            <summary>
            Imports the SAML identity provider metadata entity descriptor.
            </summary>
            <param name="entitiesDescriptor">The SAML metadata entities descriptor.</param>
            <param name="certificateFolder">The folder to save certificates files to or <c>null</c> if certificates are to be saved as strings.</param>
            <returns>The list of partner identity provider configurations.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Configuration.MetadataImporter.ImportServiceProviders(ComponentSpace.SAML2.Metadata.EntityDescriptor,System.String)">
            <summary>
            Imports the SAML service provider metadata entity descriptor.
            </summary>
            <param name="entityDescriptor">The SAML metadata entity descriptor.</param>
            <param name="certificateFolder">The folder to save certificates files to or <c>null</c> if certificates are to be saved as strings.</param>
            <returns>The list of partner service provider configurations.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Configuration.MetadataImporter.ImportServiceProviders(ComponentSpace.SAML2.Metadata.EntitiesDescriptor,System.String)">
            <summary>
            Imports the SAML service provider metadata entity descriptor.
            </summary>
            <param name="entitiesDescriptor">The SAML metadata entities descriptor.</param>
            <param name="certificateFolder">The folder to save certificates files to or <c>null</c> if certificates are to be saved as strings.</param>
            <returns>The list of partner service provider configurations.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Configuration.MetadataImporter.ImportIdentityProviders(ComponentSpace.SAML2.Metadata.EntityDescriptor,ComponentSpace.SAML2.Configuration.SAMLConfiguration,System.String)">
            <summary>
            Imports the SAML identity provider metadata entity descriptor by updating the SAML configuration.
            </summary>
            <param name="entityDescriptor">The SAML metadata entity descriptor.</param>
            <param name="samlConfiguration">The SAML configuration to be updated.</param>
            <param name="certificateFolder">The folder to save certificates files to or <c>null</c> if certificates are to be saved as strings.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Configuration.MetadataImporter.ImportIdentityProviders(ComponentSpace.SAML2.Metadata.EntitiesDescriptor,ComponentSpace.SAML2.Configuration.SAMLConfiguration,System.String)">
            <summary>
            Imports the SAML identity provider metadata entity descriptor by updating the SAML configuration and retrieving the X.509 certificates.
            </summary>
            <param name="entitiesDescriptor">The SAML metadata entities descriptor.</param>
            <param name="samlConfiguration">The SAML configuration to be updated.</param>
            <param name="certificateFolder">The folder to save certificates files to or <c>null</c> if certificates are to be saved as strings.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Configuration.MetadataImporter.ImportServiceProviders(ComponentSpace.SAML2.Metadata.EntityDescriptor,ComponentSpace.SAML2.Configuration.SAMLConfiguration,System.String)">
            <summary>
            Imports the SAML service provider metadata entity descriptor by updating the SAML configuration and retrieving the X.509 certificates.
            </summary>
            <param name="entityDescriptor">The SAML metadata entity descriptor.</param>
            <param name="samlConfiguration">The SAML configuration to be updated.</param>
            <param name="certificateFolder">The folder to save certificates files to or <c>null</c> if certificates are to be saved as strings.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Configuration.MetadataImporter.ImportServiceProviders(ComponentSpace.SAML2.Metadata.EntitiesDescriptor,ComponentSpace.SAML2.Configuration.SAMLConfiguration,System.String)">
            <summary>
            Imports the SAML service provider metadata entity descriptor by updating the SAML configuration and retrieving the X.509 certificates.
            </summary>
            <param name="entitiesDescriptor">The SAML metadata entities descriptor.</param>
            <param name="samlConfiguration">The SAML configuration to be updated.</param>
            <param name="certificateFolder">The folder to save certificates files to or <c>null</c> if certificates are to be saved as strings.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Configuration.MetadataImporter.Import(ComponentSpace.SAML2.Metadata.EntityDescriptor,ComponentSpace.SAML2.Configuration.SAMLConfiguration,System.String)">
            <summary>
            Imports the SAML identity and service provider metadata entity descriptor by updating the SAML configuration and retrieving the X.509 certificates.
            </summary>
            <param name="entityDescriptor">The SAML metadata entity descriptor.</param>
            <param name="samlConfiguration">The SAML configuration to be updated.</param>
            <param name="certificateFolder">The folder to save certificates files to or <c>null</c> if certificates are to be saved as strings.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Configuration.MetadataImporter.Import(ComponentSpace.SAML2.Metadata.EntitiesDescriptor,ComponentSpace.SAML2.Configuration.SAMLConfiguration,System.String)">
            <summary>
            Imports the SAML identity and service provider metadata entities descriptor by updating the SAML configuration and retrieving the X.509 certificates.
            </summary>
            <param name="entitiesDescriptor">The SAML metadata entities descriptor.</param>
            <param name="samlConfiguration">The SAML configuration to be updated.</param>
            <param name="certificateFolder">The folder to save certificates files to or <c>null</c> if certificates are to be saved as strings.</param>
        </member>
        <member name="T:ComponentSpace.SAML2.Configuration.PartnerIdentityProviderConfiguration">
            <summary>
            The partner identity provider configuration specifies the configuration for the partner identity provider.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Configuration.PartnerIdentityProviderConfiguration.#ctor">
            <summary>
            Constructs a partner identity provider configuration.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Configuration.PartnerIdentityProviderConfiguration.#ctor(System.Xml.XmlElement)">
            <summary>
            Constructs a partner identity provider configuration from XML.
            </summary>
            <param name="xmlElement">The partner identity provider configuration XML.</param>
        </member>
        <member name="P:ComponentSpace.SAML2.Configuration.PartnerIdentityProviderConfiguration.SingleSignOnServiceUrl">
            <summary>
            Gets or sets the partner identity provider's single sign-on service URL.
            </summary>
            <value>
            The partner identity provider's single sign-on service URL.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Configuration.PartnerIdentityProviderConfiguration.SingleSignOnServiceBinding">
            <summary>
            Gets or sets the partner identity provider's single sign-on service binding.
            <para>
            The default binding is urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect.
            </para>
            </summary>
            <value>
            The partner identity provider's single sign-on service binding.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Configuration.PartnerIdentityProviderConfiguration.SignAuthnRequest">
            <summary>
            Gets or sets the flag indicating whether to sign authn requests.
            </summary>
            <value>
            The flag indicating whether to sign authn requests.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Configuration.PartnerIdentityProviderConfiguration.ForceAuthn">
            <summary>
            Gets or sets the flag indicating whether to set the force authentication attribute in authn requests.
            </summary>
            <value>
            The flag indicating whether to set the force authentication attribute in authn requests.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Configuration.PartnerIdentityProviderConfiguration.WantAssertionOrResponseSigned">
            <summary>
            Gets or sets the flag indicating whether either SAML assertions or responses should be signed.
            </summary>
            <value>
            The flag indicating whether either SAML assertions or responses should be signed.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Configuration.PartnerIdentityProviderConfiguration.WantSAMLResponseSigned">
            <summary>
            Gets or sets the flag indicating whether SAML responses should be signed.
            </summary>
            <value>
            The flag indicating whether SAML responses should be signed.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Configuration.PartnerIdentityProviderConfiguration.WantAssertionSigned">
            <summary>
            Gets or sets the flag indicating whether SAML assertions should be signed.
            </summary>
            <value>
            The flag indicating whether SAML assertions should be signed.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Configuration.PartnerIdentityProviderConfiguration.WantAssertionEncrypted">
            <summary>
            Gets or sets the flag indicating whether SAML assertions should be encrypted.
            </summary>
            <value>
            The flag indicating whether SAML assertions should be encrypted.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Configuration.PartnerIdentityProviderConfiguration.ProviderName">
            <summary>
            Gets or sets the optional provider name to include in the authn request.
            </summary>
            <value>
            The optional provider name to include in the authn request.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Configuration.PartnerIdentityProviderConfiguration.AuthnContextComparison">
            <summary>
            Gets or sets the optional request authn context comparison.
            </summary>
            <value>
            The optional request authn context comparison.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Configuration.PartnerIdentityProviderConfiguration.OverridePendingAuthnRequest">
            <summary>
            Gets or sets the flag indicating whether a pending authentication request may be overridden and an IdP-initiated SAML response received.
            <para>
            If a service provider sends an authentication request then it expects the SAML response it receives to come from the identity provider
            it sent the authentication request to and that the SAML response is in response to this authentication request.
            If a different identity provider sends a SAML response or the expected identity provider sends a SAML response but it is not 
            in response to this authentication request, this is treated as an error if this flag is false. If this flag is true then these restrictions
            do not apply.
            </para>
            <para>
            Setting this flag to true supports an SP-initiated SSO flow being supplanted by an IdP-initiated SSO.
            </para>
            </summary>
            <value>
            The flag indicating whether a pending authentication request may be overridden.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Configuration.PartnerIdentityProviderConfiguration.DisableIdPInitiatedSso">
            <summary>
            Gets or sets the flag indicating whether IdP-initiated SSO is supported.
            </summary>
            <value>
            The flag indicating whether IdP-initiated SSO is supported.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Configuration.PartnerIdentityProviderConfiguration.DisableAssertionReplayCheck">
            <summary>
            Gets or sets the flag indicating whether to check for assertion replay.
            </summary>
            <value>
            The flag indicating whether to check for assertion replay.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Configuration.PartnerIdentityProviderConfiguration.DisableRecipientCheck">
            <summary>
            Gets or sets the flag indicating whether the SAML recipient is checked.
            </summary>
            <value>
            The flag indicating whether the SAML recipient is checked.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Configuration.PartnerIdentityProviderConfiguration.DisableTimePeriodCheck">
            <summary>
            Gets or sets the flag indicating whether the not-before/not-on-or-after time period is checked.
            </summary>
            <value>
            The flag indicating whether the not-before/not-on-or-after time period is checked.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Configuration.PartnerIdentityProviderConfiguration.DisableAudienceRestrictionCheck">
            <summary>
            Gets or sets the flag indicating whether the audience restriction condition is checked.
            </summary>
            <value>
            The flag indicating whether the audience restriction condition is checked.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Configuration.PartnerIdentityProviderConfiguration.DisableAuthnContextCheck">
            <summary>
            Gets or sets the flag indicating whether the authn context is checked.
            </summary>
            <value>
            The flag indicating whether the authn context is checked.
            </value>
        </member>
        <member name="M:ComponentSpace.SAML2.Configuration.PartnerIdentityProviderConfiguration.ToXml(System.Xml.XmlElement)">
            <summary>
            Serializes the partner identity provider configuration to XML.
            </summary>
            <param name="xmlElement">The XML element.</param>
        </member>
        <member name="T:ComponentSpace.SAML2.Configuration.PartnerProviderConfiguration">
            <summary>
            The partner provider configuration is configuration common to partner identity providers and service providers.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Configuration.PartnerProviderConfiguration.#ctor">
            <summary>
            Constructs a partner provider configuration.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Configuration.PartnerProviderConfiguration.#ctor(System.Xml.XmlElement)">
            <summary>
            Constructs a partner provider configuration from XML.
            </summary>
            <param name="xmlElement">The partner provider configuration XML.</param>
        </member>
        <member name="P:ComponentSpace.SAML2.Configuration.PartnerProviderConfiguration.SingleLogoutServiceUrl">
            <summary>
            Gets or sets the partner provider's single logout service URL.
            </summary>
            <value>
            The partner provider's single logout service URL.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Configuration.PartnerProviderConfiguration.SingleLogoutServiceResponseUrl">
            <summary>
            Gets or sets the partner provider's single logout service response URL.
            </summary>
            <value>
            The partner provider's single logout service response URL.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Configuration.PartnerProviderConfiguration.SingleLogoutServiceBinding">
            <summary>
            Gets or sets the partner provider's single logout service binding.
            <para>
            The default binding is urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect.
            </para>
            </summary>
            <value>
            The partner provider's single logout service binding.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Configuration.PartnerProviderConfiguration.LogoutRequestLifeTime">
            <summary>
            Gets or sets the logout request lifetime.
            <para>
            The default time span is 3 minutes.
            </para>
            </summary>
            <value>
            The logout request lifetime.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Configuration.PartnerProviderConfiguration.SignLogoutRequest">
            <summary>
            Gets or sets the flag indicating whether to sign sent logout responses.
            </summary>
            <value>
            The flag indicating whether to sign sent logout responses.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Configuration.PartnerProviderConfiguration.SignLogoutResponse">
            <summary>
            Gets or sets the flag indicating whether to sign sent logout responses.
            </summary>
            <value>
            The flag indicating whether to sign sent logout responses.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Configuration.PartnerProviderConfiguration.WantLogoutRequestSigned">
            <summary>
            Gets or sets the flag indicating whether received logout requests should be signed.
            </summary>
            <value>
            The flag indicating whether received logout requests should be signed.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Configuration.PartnerProviderConfiguration.WantLogoutResponseSigned">
            <summary>
            Gets or sets the flag indicating whether received logout responses should be signed.
            </summary>
            <value>
            The flag indicating whether received logout responses should be signed.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Configuration.PartnerProviderConfiguration.EncryptLogoutNameID">
            <summary>
            Gets or sets the flag indicating whether to encrypt the Name ID in the logout request.
            </summary>
            <value>
            The flag indicating whether to encrypt the Name ID in the logout request.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Configuration.PartnerProviderConfiguration.IssuerFormat">
            <summary>
            Gets or sets the issuer format.
            <para>
            The default issuer format is not explicitly specified.
            </para>
            </summary>
            <value>
            The issuer format.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Configuration.PartnerProviderConfiguration.NameIDFormat">
            <summary>
            Gets or sets the name identifier format.
            <para>
            The default name identifier format is urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified.
            </para>
            </summary>
            <value>
            The name identifier format.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Configuration.PartnerProviderConfiguration.DigestMethod">
            <summary>
            Gets or sets the XML signature digest algorithm.
            <para>
            The default algorithm is http://www.w3.org/2001/04/xmlenc#sha256.
            </para>
            </summary>
            <value>
            The XML signature digest algorithm.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Configuration.PartnerProviderConfiguration.SignatureMethod">
            <summary>
            Gets or sets the XML signature algorithm.
            <para>
            The default algorithm is http://www.w3.org/2001/04/xmldsig-more#rsa-sha256.
            </para>
            </summary>
            <value>
            The XML signature algorithm.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Configuration.PartnerProviderConfiguration.WantDigestMethod">
            <summary>
            Gets or sets the XML signature digest algorithm expected from the partner provider.
            <para>
            If not specified then any algorithm is accepted.
            </para>
            </summary>
            <value>
            The expected XML signature digest algorithm or <c>null</c> if none..
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Configuration.PartnerProviderConfiguration.WantSignatureMethod">
            <summary>
            Gets or sets the XML signature algorithm expected from the partner provider.
            <para>
            If not specified then any algorithm is accepted.
            </para>
            </summary>
            <value>
            The expected XML signature algorithm or <c>null</c> if none..
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Configuration.PartnerProviderConfiguration.KeyEncryptionMethod">
            <summary>
            Gets or sets the XML encryption key encryption algorithm.
            <para>
            The default algorithm is http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p.
            </para>
            </summary>
            <value>
            The XML encryption key encryption algorithm.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Configuration.PartnerProviderConfiguration.DataEncryptionMethod">
            <summary>
            Gets or sets the XML encryption data encryption algorithm.
            <para>
            The default algorithm is http://www.w3.org/2001/04/xmlenc#aes256-cbc.
            </para>
            </summary>
            <value>
            The XML encryption data encryption algorithm.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Configuration.PartnerProviderConfiguration.ClockSkew">
            <summary>
            Gets or sets the clock skew.
            The clock skew allows for differences between local and partner computer clocks when checking time intervals.
            <para>
            The default time span is 3 minutes.
            </para>
            </summary>
            <value>
            The clock skew.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Configuration.PartnerProviderConfiguration.AuthnContext">
            <summary>
            Gets or sets the authentication context.
            </summary>
            <value>
            The authentication context.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Configuration.PartnerProviderConfiguration.UseEmbeddedCertificate">
            <summary>
            Gets or sets the flag to indicate whether to use embedded certificates.
            </summary>
            <value>
            The flag to indicate whether to use embedded certificates.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Configuration.PartnerProviderConfiguration.DisableDestinationCheck">
            <summary>
            Gets or sets the flag indicating whether the destination is checked.
            </summary>
            <value>
            The flag indicating whether the destination is checked.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Configuration.PartnerProviderConfiguration.DisableInboundLogout">
            <summary>
            Gets or sets the flag indicating whether to disable inbound logout.
            </summary>
            <value>
            The flag indicating whether to disable inbound logout.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Configuration.PartnerProviderConfiguration.DisableOutboundLogout">
            <summary>
            Gets or sets the flag indicating whether to disable outbound logout.
            </summary>
            <value>
            The flag indicating whether to disable outbound logout.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Configuration.PartnerProviderConfiguration.DisableInResponseToCheck">
            <summary>
            Gets or sets the flag indicating whether the InResponseTo is checked.
            </summary>
            <value>
            The flag indicating whether the InResponseTo is checked.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Configuration.PartnerProviderConfiguration.DisablePendingLogoutCheck">
            <summary>
            Gets or sets the flag indicating whether a logout is pending is checked.
            </summary>
            <value>
            The flag indicating whether a logout is pending is checked.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Configuration.PartnerProviderConfiguration.DisableLogoutResponseStatusCheck">
            <summary>
            Gets or sets the flag indicating whether the logout response status is checked.
            </summary>
            <value>
            The flag indicating whether the logout response status is checked.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Configuration.PartnerProviderConfiguration.PartnerCertificates">
            <summary>
            Gets or sets the partner certificates.
            </summary>
            <value>
            The partner certificates.
            </value>
        </member>
        <member name="M:ComponentSpace.SAML2.Configuration.PartnerProviderConfiguration.ToXml(System.Xml.XmlElement)">
            <summary>
            Serializes the partner provider configuration to XML.
            </summary>
            <param name="xmlElement">The XML element.</param>
        </member>
        <member name="T:ComponentSpace.SAML2.Configuration.PartnerServiceProviderConfiguration">
            <summary>
            The partner service provider configuration specifies the configuration for the partner service provider.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Configuration.PartnerServiceProviderConfiguration.#ctor">
            <summary>
            Constructs a partner service provider configuration.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Configuration.PartnerServiceProviderConfiguration.#ctor(System.Xml.XmlElement)">
            <summary>
            Constructs a partner service provider configuration from XML.
            </summary>
            <param name="xmlElement">The partner service provider configuration XML.</param>
        </member>
        <member name="P:ComponentSpace.SAML2.Configuration.PartnerServiceProviderConfiguration.AssertionConsumerServiceUrl">
            <summary>
            Gets or sets the partner service provider's assertion consumer service URL.
            </summary>
            <value>
            The partner service provider's assertion consumer service URL.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Configuration.PartnerServiceProviderConfiguration.WantAuthnRequestSigned">
            <summary>
            Gets or sets the flag indicating whether authn requests should be signed.
            </summary>
            <value>
            The flag indicating whether authn requests should be signed.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Configuration.PartnerServiceProviderConfiguration.SignSAMLResponse">
            <summary>
            Gets or sets the flag indicating whether to sign SAML responses.
            </summary>
            <value>
            The flag indicating whether to sign SAML responses.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Configuration.PartnerServiceProviderConfiguration.SignAssertion">
            <summary>
            Gets or sets the flag indicating whether to sign SAML assertions.
            </summary>
            <value>
            The flag indicating whether to sign SAML assertions.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Configuration.PartnerServiceProviderConfiguration.EncryptAssertion">
            <summary>
            Gets or sets the flag indicating whether to encrypt SAML assertions.
            </summary>
            <value>
            The flag indicating whether to encrypt SAML assertions.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Configuration.PartnerServiceProviderConfiguration.AssertionLifeTime">
            <summary>
            Gets or sets the time span for which SAML assertions will be valid.
            <para>
            The default time span is 3 minutes.
            </para>
            </summary>
            <value>
            The time span for which SAML assertions will be valid.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Configuration.PartnerServiceProviderConfiguration.RelayState">
            <summary>
            Gets or sets the relay state sent during IdP-initiated SSO.
            </summary>
            <value>
            The relay state.
            </value>
        </member>
        <member name="M:ComponentSpace.SAML2.Configuration.PartnerServiceProviderConfiguration.ToXml(System.Xml.XmlElement)">
            <summary>
            Serializes the partner service provider configuration to XML.
            </summary>
            <param name="xmlElement">The XML element.</param>
        </member>
        <member name="T:ComponentSpace.SAML2.Configuration.ProviderConfiguration">
            <summary>
            The provider configuration is configuration common to local and partner identity providers and service providers.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Configuration.ProviderConfiguration.#ctor">
            <summary>
            Constructs a provider configuration.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Configuration.ProviderConfiguration.#ctor(System.Xml.XmlElement)">
            <summary>
            Constructs a provider configuration from XML.
            </summary>
            <param name="xmlElement">The provider configuration XML.</param>
        </member>
        <member name="P:ComponentSpace.SAML2.Configuration.ProviderConfiguration.Name">
            <summary>
            Gets or sets the provider name.
            </summary>
            <value>
            The provider name.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Configuration.ProviderConfiguration.Description">
            <summary>
            Gets or sets the provider description.
            </summary>
            <value>
            The provider description.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Configuration.ProviderConfiguration.LocalCertificates">
            <summary>
            Gets or sets the local certificates.
            </summary>
            <value>
            The local certificates.
            </value>
        </member>
        <member name="M:ComponentSpace.SAML2.Configuration.ProviderConfiguration.ToXml(System.Xml.XmlElement)">
            <summary>
            Serializes the provider configuration to XML.
            </summary>
            <param name="xmlElement">The XML element.</param>
        </member>
        <member name="T:ComponentSpace.SAML2.Configuration.Resolver.AbstractSAMLConfigurationResolver">
            <summary>
            An abstract implementation of the SAML configuration resolver.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Configuration.Resolver.AbstractSAMLConfigurationResolver.GetLocalIdentityProviderConfiguration(System.String)">
            <summary>
            Gets the <c>LocalIdentityProviderConfiguration</c>.
            </summary>
            <param name="configurationName">The configuration name or <c>null</c> if none.</param>
            <returns>The local identity provider configuration.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the local identity provider configuration cannot be found.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Configuration.Resolver.AbstractSAMLConfigurationResolver.GetLocalServiceProviderConfiguration(System.String)">
            <summary>
            Gets the <c>LocalServiceProviderConfiguration</c>.
            </summary>
            <param name="configurationName">The configuration name or <c>null</c> if none.</param>
            <returns>The local service provider configuration.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the local service provider configuration cannot be found.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Configuration.Resolver.AbstractSAMLConfigurationResolver.GetPartnerIdentityProviderConfiguration(System.String,System.String)">
            <summary>
            Gets the <c>PartnerIdentityProviderConfiguration</c> given the partner name.
            </summary>
            <param name="configurationName">The configuration name or <c>null</c> if none.</param>
            <param name="partnerName">The partner name.</param>
            <returns>The partner identity provider configuration.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the partner identity provider configuration cannot be found.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Configuration.Resolver.AbstractSAMLConfigurationResolver.GetPartnerServiceProviderConfiguration(System.String,System.String)">
            <summary>
            Gets the <c>PartnerServiceProviderConfiguration</c> given the partner name.
            </summary>
            <param name="configurationName">The configuration name or <c>null</c> if none.</param>
            <param name="partnerName">The partner name.</param>
            <returns>The partner service provider configuration.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the partner service provider configuration cannot be found.
            </exception>
        </member>
        <member name="T:ComponentSpace.SAML2.Configuration.Resolver.ISAMLConfigurationResolver">
            <summary>
            Resolves configuration.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Configuration.Resolver.ISAMLConfigurationResolver.GetLocalIdentityProviderConfiguration(System.String)">
            <summary>
            Gets the <c>LocalIdentityProviderConfiguration</c>.
            </summary>
            <param name="configurationName">The configuration name or <c>null</c> if none.</param>
            <returns>The local identity provider configuration.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the local identity provider configuration cannot be found.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Configuration.Resolver.ISAMLConfigurationResolver.GetLocalServiceProviderConfiguration(System.String)">
            <summary>
            Gets the <c>LocalServiceProviderConfiguration</c>.
            </summary>
            <param name="configurationName">The configuration name or <c>null</c> if none.</param>
            <returns>The local service provider configuration.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the local service provider configuration cannot be found.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Configuration.Resolver.ISAMLConfigurationResolver.GetPartnerIdentityProviderConfiguration(System.String,System.String)">
            <summary>
            Gets the <c>PartnerIdentityProviderConfiguration</c> given the partner name.
            </summary>
            <param name="configurationName">The configuration name or <c>null</c> if none.</param>
            <param name="partnerName">The partner name.</param>
            <returns>The partner identity provider configuration.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the partner identity provider configuration cannot be found.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Configuration.Resolver.ISAMLConfigurationResolver.GetPartnerServiceProviderConfiguration(System.String,System.String)">
            <summary>
            Gets the <c>PartnerServiceProviderConfiguration</c> given the partner name.
            </summary>
            <param name="configurationName">The configuration name or <c>null</c> if none.</param>
            <param name="partnerName">The partner name.</param>
            <returns>The partner service provider configuration.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the partner service provider configuration cannot be found.
            </exception>
        </member>
        <member name="T:ComponentSpace.SAML2.Configuration.Resolver.SAMLConfigurationResolver">
            <summary>
            Resolves configuration using the specified SAML configuration.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Configuration.Resolver.SAMLConfigurationResolver.#ctor(ComponentSpace.SAML2.Configuration.SAMLConfigurations)">
            <summary>
            Constructs a <c>SAMLConfigurationResolver</c>.
            </summary>
            <param name="samlConfigurations">The SAML configurations.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Configuration.Resolver.SAMLConfigurationResolver.GetLocalIdentityProviderConfiguration(System.String)">
            <summary>
            Gets the <c>LocalIdentityProviderConfiguration</c>.
            </summary>
            <param name="configurationName">The configuration name or <c>null</c> if none.</param>
            <returns>The local identity provider configuration.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the local identity provider configuration cannot be found.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Configuration.Resolver.SAMLConfigurationResolver.GetLocalServiceProviderConfiguration(System.String)">
            <summary>
            Gets the <c>LocalServiceProviderConfiguration</c>.
            </summary>
            <param name="configurationName">The configuration name or <c>null</c> if none.</param>
            <returns>The local service provider configuration.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the local service provider configuration cannot be found.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Configuration.Resolver.SAMLConfigurationResolver.GetPartnerIdentityProviderConfiguration(System.String,System.String)">
            <summary>
            Gets the <c>PartnerIdentityProviderConfiguration</c> given the partner name.
            </summary>
            <param name="configurationName">The configuration name or <c>null</c> if none.</param>
            <param name="partnerName">The partner name.</param>
            <returns>The partner identity provider configuration.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the partner identity provider configuration cannot be found.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Configuration.Resolver.SAMLConfigurationResolver.GetPartnerServiceProviderConfiguration(System.String,System.String)">
            <summary>
            Gets the <c>PartnerServiceProviderConfiguration</c> given the partner name.
            </summary>
            <param name="configurationName">The configuration name or <c>null</c> if none.</param>
            <param name="partnerName">The partner name.</param>
            <returns>The partner service provider configuration.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the partner service provider configuration cannot be found.
            </exception>
        </member>
        <member name="T:ComponentSpace.SAML2.Configuration.SAMLConfiguration">
            <summary>
            The SAML configuration specifies the configuration for SAML single sign-on.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Configuration.SAMLConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <c>SAMLConfiguration</c> class.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Configuration.SAMLConfiguration.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <c>SAMLConfiguration</c> class.
            </summary>
            <param name="xmlElement">The SAML configuration XML.</param>
        </member>
        <member name="P:ComponentSpace.SAML2.Configuration.SAMLConfiguration.Name">
            <summary>
            Gets or sets the configuration name.
            <para>
            The configuration name is used in multi-tenanted applications. 
            </para>
            </summary>
            <value>
            The configuration name or <c>null</c> if none.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Configuration.SAMLConfiguration.LocalIdentityProviderConfiguration">
            <summary>
            Gets or sets the local identity provider configuration.
            </summary>
            <value>
            The local identity provider configuration.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Configuration.SAMLConfiguration.LocalServiceProviderConfiguration">
            <summary>
            Gets or sets the local service provider configuration.
            </summary>
            <value>
            The local service provider configuration.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Configuration.SAMLConfiguration.PartnerIdentityProviderConfigurations">
            <summary>
            Gets or sets the partner identity provider configurations.
            </summary>
            <value>
            The partner identity provider configurations.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Configuration.SAMLConfiguration.PartnerServiceProviderConfigurations">
            <summary>
            Gets or sets the partner service provider configurations.
            </summary>
            <value>
            The partner service provider configurations.
            </value>
        </member>
        <member name="M:ComponentSpace.SAML2.Configuration.SAMLConfiguration.AddPartnerIdentityProvider(ComponentSpace.SAML2.Configuration.PartnerIdentityProviderConfiguration)">
            <summary>
            Adds the partner identity provider configuration.
            </summary>
            <param name="partnerIdentityProviderConfiguration">The partner identity provider configuration.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Configuration.SAMLConfiguration.RemovePartnerIdentityProvider(System.String)">
            <summary>
            Removes the partner identity provider configuration with the specified name.
            </summary>
            <param name="name">The partner identity provider name.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Configuration.SAMLConfiguration.GetPartnerIdentityProvider(System.String)">
            <summary>
            Gets the specified partner identity provider configuration.
            <para>
            If a single partner identity provider is configured then a name doesn't have to be specified.
            </para>
            </summary>
            <param name="name">The partner identity provider name or <c>null</c> if none.</param>
            <returns>The partner identity provider configuration.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the partner identity provider configuration cannot be found.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Configuration.SAMLConfiguration.AddPartnerServiceProvider(ComponentSpace.SAML2.Configuration.PartnerServiceProviderConfiguration)">
            <summary>
            Adds the partner service provider configuration.
            </summary>
            <param name="partnerServiceProviderConfiguration">The partner service provider configuration.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Configuration.SAMLConfiguration.RemovePartnerServiceProvider(System.String)">
            <summary>
            Removes the partner service provider configuration with the specified name.
            </summary>
            <param name="name">The partner service provider name.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Configuration.SAMLConfiguration.GetPartnerServiceProvider(System.String)">
            <summary>
            Gets the specified partner service provider configuration.
            <para>
            If a single partner service provider is configured then a name doesn't have to be specified.
            </para>
            </summary>
            <param name="name">The partner service provider name or <c>null</c> if none.</param>
            <returns>The partner service provider configuration.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the partner service provider configuration cannot be found.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Configuration.SAMLConfiguration.ToXml">
            <summary>
            Serializes the configuration to XML.
            </summary>
            <returns>The configuration as XML.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Configuration.SAMLConfiguration.ToXml(System.Xml.XmlDocument)">
            <summary>
            Serializes the configuration to XML.
            </summary>
            <param name="xmlDocument">The owning XML document.</param>
            <returns>The configuration as XML.</returns>
        </member>
        <member name="T:ComponentSpace.SAML2.Configuration.SAMLConfigurationFile">
            <summary>
            Loads and saves SAML configuration files.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Configuration.SAMLConfigurationFile.Validate(System.String)">
            <summary>
            Validates the configuration file against the XML schema.
            </summary>
            <param name="fileName">The configuration file.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the validation fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Configuration.SAMLConfigurationFile.Load">
            <summary>
            Loads the configuration from the saml.config file.
            <para>
            The configuration file path may be specified by the SAMLConfigFile application setting in web.config.
            </para>
            <para>
            Otherwise, the saml.config is assumed to be in the application folder.
            </para>
            </summary>
            <returns>The SAML configurations.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the SAML configuration cannot be loaded.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Configuration.SAMLConfigurationFile.Load(System.String)">
            <summary>
            Loads the configuration from the specified file.
            </summary>
            <param name="fileName">The configuration file.</param>
            <returns>The SAML configurations.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the SAML configuration cannot be loaded.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Configuration.SAMLConfigurationFile.Save(ComponentSpace.SAML2.Configuration.SAMLConfiguration)">
            <summary>
            Saves the configuration to the saml.config file.
            <para>
            The configuration file path may be specified by the SAMLConfigFile application setting in web.config.
            </para>
            <para>
            Otherwise, the saml.config is assumed to be in the application folder.
            </para>
            </summary>
            <param name="samlConfiguration">The SAML configuration.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the SAML configuration cannot be saved.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Configuration.SAMLConfigurationFile.Save(ComponentSpace.SAML2.Configuration.SAMLConfiguration,System.String)">
            <summary>
            Saves the configuration to the file.
            </summary>
            <param name="samlConfiguration">The SAML configuration.</param>
            <param name="fileName">The configuration file.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the SAML configuration cannot be saved.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Configuration.SAMLConfigurationFile.Save(ComponentSpace.SAML2.Configuration.SAMLConfigurations)">
            <summary>
            Saves the configurations to the saml.config file.
            <para>
            The configuration file path may be specified by the SAMLConfigFile application setting in web.config.
            </para>
            <para>
            Otherwise, the saml.config is assumed to be in the application folder.
            </para>
            </summary>
            <param name="samlConfigurations">The SAML configurations.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the SAML configurations cannot be saved.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Configuration.SAMLConfigurationFile.Save(ComponentSpace.SAML2.Configuration.SAMLConfigurations,System.String)">
            <summary>
            Saves the configurations to the file.
            </summary>
            <param name="samlConfigurations">The SAML configurations.</param>
            <param name="fileName">The configuration file.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the SAML configurations cannot be saved.
            </exception>
        </member>
        <member name="P:ComponentSpace.SAML2.Configuration.SAMLConfigurationFile.ReloadOnConfigurationChange">
            <summary>
            Gets or sets the flag indicating whether the application should be reloaded if the configuration file changes.
            </summary>
            <value>
            The flag indicating whether the application should be reloaded if the configuration file changes.
            </value>
        </member>
        <member name="T:ComponentSpace.SAML2.Configuration.SAMLConfigurations">
            <summary>
            The SAML configurations specifies the configurations for SAML single sign-on.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Configuration.SAMLConfigurations.#ctor">
            <summary>
            Initializes a new instance of the <c>SAMLConfigurations</c> class.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Configuration.SAMLConfigurations.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <c>SAMLConfigurations</c> class.
            </summary>
            <param name="xmlElement">The SAML configuration XML.</param>
        </member>
        <member name="P:ComponentSpace.SAML2.Configuration.SAMLConfigurations.ReloadOnConfigurationChange">
            <summary>
            Gets or sets the flag indicating whether the application should be reloaded if the configuration changes.
            </summary>
            <value>
            The flag indicating whether the application should be reloaded if the configuration changes.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Configuration.SAMLConfigurations.ValidateMessagesAgainstSchema">
            <summary>
            Gets or sets the flag indicating whether SAML messages should be validated against the XML schema.
            </summary>
            <value>
            The flag indicating whether SAML messages should be validated against the XML schema.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Configuration.SAMLConfigurations.Configurations">
            <summary>
            Gets or sets the list of SAML configurations.
            </summary>
            <para>
            For most applications, all users share the same SAML configuration.
            For multi-tenanted applications and other special use cases, multiple SAML configurations may be specified.
            </para>
            <value>
            The list of SAML configurations.
            </value>
        </member>
        <member name="M:ComponentSpace.SAML2.Configuration.SAMLConfigurations.AddConfiguration(ComponentSpace.SAML2.Configuration.SAMLConfiguration)">
            <summary>
            Adds a SAML configuration.
            </summary>
            <param name="samlConfiguration">The SAML configuration.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Configuration.SAMLConfigurations.RemoveConfiguration(System.String)">
            <summary>
            Removes the configuration with the specified name.
            </summary>
            <param name="name">The configuration name.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Configuration.SAMLConfigurations.GetConfiguration(System.String)">
            <summary>
            Returns the configuration with the specified ID.
            </summary>
            <param name="name">The configuration name.</param>
            <returns>The configuration with the specified name.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLConfigurationException">
            Thrown when the configuration with the specified name cannot be retrieved.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Configuration.SAMLConfigurations.ToXml">
            <summary>
            Serializes the configurations to XML.
            </summary>
            <returns>The configurations as XML.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Configuration.SAMLConfigurations.ToXml(System.Xml.XmlDocument)">
            <summary>
            Serializes the configurations to XML.
            </summary>
            <param name="xmlDocument">The owning XML document.</param>
            <returns>The configurations as XML.</returns>
        </member>
        <member name="T:ComponentSpace.SAML2.Data.AbstractDatabaseSSOSessionStore">
            <summary>
            The abstract database single sign-on session store provides common functionality for storing single sign-on session state in a database.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Data.AbstractDatabaseSSOSessionStore.#ctor">
            <summary>
            Constructs a <c>AbstractDatabaseSSOSessionStore</c>.
            <para>
            The default database connection string name is assumed to be configured in web.config.
            </para>
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Data.AbstractDatabaseSSOSessionStore.#ctor(System.String)">
            <summary>
            Constructs a <c>AbstractDatabaseSSOSessionStore</c>.
            </summary>
            <param name="connectionStringName">The database connection string name configured in web.config.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Data.AbstractDatabaseSSOSessionStore.#ctor(System.String,System.String)">
            <summary>
            Constructs a <c>AbstractDatabaseSSOSessionStore</c>.
            </summary>
            <param name="connectionStringName">The database connection string name configured in web.config.</param>
            <param name="tableName">The database table name or <c>null</c> to use the default name.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Data.AbstractDatabaseSSOSessionStore.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructs a <c>AbstractDatabaseSSOSessionStore</c>.
            </summary>
            <param name="providerName">The database provider name.</param>
            <param name="connectionString">The database connection string.</param>
            <param name="tableName">The database table name or <c>null</c> to use the default name.</param>
        </member>
        <member name="P:ComponentSpace.SAML2.Data.AbstractDatabaseSSOSessionStore.SessionIDColumnName">
            <summary>
            Gets or sets the name of the session ID column. The default name is SessionID.
            </summary>
            <value>
            The name of the session ID column.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Data.AbstractDatabaseSSOSessionStore.UpdateDateTimeColumnName">
            <summary>
            Gets or sets the name of the update date/time column. The default name is UpdateDateTime.
            </summary>
            <value>
            The name of the update date/time column.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Data.AbstractDatabaseSSOSessionStore.SessionObjectColumnName">
            <summary>
            Gets or sets the name of the session object column. The default name is SessionObject.
            </summary>
            <value>
            The name of the session object column.
            </value>
        </member>
        <member name="M:ComponentSpace.SAML2.Data.AbstractDatabaseSSOSessionStore.Load(System.Type)">
            <summary>
            Loads the SSO session object.
            </summary>
            <param name="type">The SSO session object type.</param>
            <returns>The SSO session object or <c>null</c> if none.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Data.AbstractDatabaseSSOSessionStore.Save(System.Object)">
            <summary>
            Saves the SSO session object.
            </summary>
            <param name="ssoSession">The serializable SSO session object.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Data.AbstractDatabaseSSOSessionStore.Delete(System.Type)">
            <summary>
            Deletes the SSO session object.
            </summary>
            <param name="type">The SSO session object type.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Data.AbstractDatabaseSSOSessionStore.DeleteExpired(System.DateTime)">
            <summary>
            Deletes any expired SSO session objects from the database.
            </summary>
            <param name="expirationDateTime">The expiration UTC date/time.</param>
            <returns>The number of expired SSO session objects deleted from the database.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Data.AbstractDatabaseSSOSessionStore.Delete(System.String)">
            <summary>
            Deletes any SSO session objects for the specified session from the database.
            </summary>
            <param name="sessionID">The session ID.</param>
            <returns>The number of SSO session objects deleted from the database.</returns>
        </member>
        <member name="T:ComponentSpace.SAML2.Data.AbstractSSOSessionStore">
            <summary>
            The single sign-on session store provides common functionality for storing single sign-on session state.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Data.AbstractSSOSessionStore.Serialize(System.Object)">
            <summary>
            Serializes the SSO session to binary data.
            </summary>
            <param name="ssoSession">The serializable SSO session.</param>
            <returns>The SSO session serialized to binary data.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Data.AbstractSSOSessionStore.Deserialize(System.Byte[])">
            <summary>
            Deserializes the binary data to an SSO session.
            </summary>
            <param name="bytes">The binary data.</param>
            <returns>The SSO session.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Data.AbstractSSOSessionStore.CreateSessionIDForType(System.Type)">
            <summary>
            Creates a unique session ID for the specified type from the session ID and session object type.
            </summary>
            <param name="type">The session object type.</param>
            <returns>The unique SSO session ID for the session object type.</returns>
        </member>
        <member name="P:ComponentSpace.SAML2.Data.AbstractSSOSessionStore.SessionID">
            <summary>
            Gets the unique SSO session identifier.
            </summary>
            <value>
            The unique SSO session identifier.
            </value>
        </member>
        <member name="M:ComponentSpace.SAML2.Data.AbstractSSOSessionStore.Load(System.Type)">
            <summary>
            Loads the SSO session object.
            </summary>
            <param name="type">The SSO session object type.</param>
            <returns>The SSO session object or <c>null</c> if none.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Data.AbstractSSOSessionStore.Save(System.Object)">
            <summary>
            Saves the SSO session object.
            </summary>
            <param name="ssoSession">The serializable SSO session object.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Data.AbstractSSOSessionStore.Delete(System.Type)">
            <summary>
            Deletes the SSO session object.
            </summary>
            <param name="type">The SSO session object type.</param>
        </member>
        <member name="T:ComponentSpace.SAML2.Data.DatabaseIDCache">
            <summary>
            The database ID cache stores IDs in a database.
            <para>
            The database ID cache is suitable for applications deployed to a web farm.
            </para>
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Data.DatabaseIDCache.Dispose(System.Boolean)">
            <summary>
            Dispose of the database ID cache.
            </summary>
            <param name="disposing"><c>true</c> if called by user code; <c>false</c> if called by the runtime from within the finalizer</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Data.DatabaseIDCache.#ctor">
            <summary>
            Constructs a <c>DatabaseIDCache</c>.
            <para>
            The default database connection string name is assumed to be configured in web.config.
            </para>
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Data.DatabaseIDCache.#ctor(System.String)">
            <summary>
            Constructs a <c>DatabaseIDCache</c>.
            </summary>
            <param name="connectionStringName">The database connection string name configured in web.config.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Data.DatabaseIDCache.#ctor(System.String,System.String)">
            <summary>
            Constructs a <c>DatabaseIDCache</c>.
            </summary>
            <param name="connectionStringName">The database connection string name configured in web.config.</param>
            <param name="tableName">The database table name or <c>null</c> to use the default name.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Data.DatabaseIDCache.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructs a <c>DatabaseIDCache</c>.
            </summary>
            <param name="providerName">The database provider name.</param>
            <param name="connectionString">The database connection string.</param>
            <param name="tableName">The database table name or <c>null</c> to use the default name.</param>
        </member>
        <member name="P:ComponentSpace.SAML2.Data.DatabaseIDCache.IDColumnName">
            <summary>
            Gets or sets the name of the ID column. The default name is ID.
            </summary>
            <value>
            The name of the ID column.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Data.DatabaseIDCache.ExpirationDateTimeColumnName">
            <summary>
            Gets or sets the name of the expiration date/time column. The default name is ExpirationDateTime.
            </summary>
            <value>
            The name of the expiration date/time column.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Data.DatabaseIDCache.DeleteExpiredPriorToAdd">
            <summary>
            Gets or sets the flag indicating whether expired entries should be deleted prior to adding an entry.
            </summary>
            <value>
            The flag indicating whether expired entries should be deleted prior to adding an entry.
            </value>
        </member>
        <member name="M:ComponentSpace.SAML2.Data.DatabaseIDCache.Add(System.String,System.DateTime)">
            <summary>
            Adds the ID with an associated expiration time to the cache.
            </summary>
            <param name="id">The ID.</param>
            <param name="expirationDateTime">The expiration time or <c>null</c> if none.</param>
            <returns><c>true</c> if the ID doesn't already exist in the cache; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Data.DatabaseIDCache.DeleteExpired">
            <summary>
            Deletes any expired IDs from the cache.
            </summary>
            <returns>The number of expired IDs deleted from the cache.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Data.DatabaseIDCache.StartDeletingExpired(System.TimeSpan,System.TimeSpan)">
            <summary>
            Schedules the deletion of expired IDs starting at the due time and repeating periodically.
            </summary>
            <param name="dueTime">The due time to start deleting expired IDs.</param>
            <param name="period">The period to wait before next deleting expired IDs.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Data.DatabaseIDCache.StopDeletingExpired">
            <summary>
            Stops any scheduled deletion of expired IDs.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Data.DatabaseIDCache.Dispose">
            <summary>
            Dispose of the database ID cache.
            </summary>
        </member>
        <member name="T:ComponentSpace.SAML2.Data.DatabaseSSOSessionStore">
            <summary>
            The single sign-on session store stores single sign-on session state in a database.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Data.DatabaseSSOSessionStore.#ctor">
            <summary>
            Constructs a <c>DatabaseSSOSessionStore</c>.
            <para>
            The default database connection string name is assumed to be configured in web.config.
            </para>
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Data.DatabaseSSOSessionStore.#ctor(System.String)">
            <summary>
            Constructs a <c>DatabaseSSOSessionStore</c>.
            </summary>
            <param name="connectionStringName">The database connection string name configured in web.config.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Data.DatabaseSSOSessionStore.#ctor(System.String,System.String)">
            <summary>
            Constructs a <c>DatabaseSSOSessionStore</c>.
            </summary>
            <param name="connectionStringName">The database connection string name configured in web.config.</param>
            <param name="tableName">The database table name or <c>null</c> to use the default name.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Data.DatabaseSSOSessionStore.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructs a <c>DatabaseSSOSessionStore</c>.
            </summary>
            <param name="providerName">The database provider name.</param>
            <param name="connectionString">The database connection string.</param>
            <param name="tableName">The database table name or <c>null</c> to use the default name.</param>
        </member>
        <member name="T:ComponentSpace.SAML2.Data.HttpSSOSessionStore">
            <summary>
            The single sign-on session store stores single sign-on session state in the HTTP session.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Data.HttpSSOSessionStore.#ctor">
            <summary>
            Initializes a new instance of the <c>HttpSSOSessionStore</c> class.
            <para>
            The HTTP session ID delegate is used.
            </para>
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Data.HttpSSOSessionStore.Load(System.Type)">
            <summary>
            Loads the SSO session object.
            </summary>
            <param name="type">The SSO session object type.</param>
            <returns>The SSO session object or <c>null</c> if none.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Data.HttpSSOSessionStore.Save(System.Object)">
            <summary>
            Saves the SSO session object.
            </summary>
            <param name="ssoSession">The serializable SSO session object.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Data.HttpSSOSessionStore.Delete(System.Type)">
            <summary>
            Deletes the SSO session object.
            </summary>
            <param name="type">The SSO session object type.</param>
        </member>
        <member name="T:ComponentSpace.SAML2.Data.IIDCache">
            <summary>
            The ID cache manages IDs.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Data.IIDCache.Add(System.String,System.DateTime)">
            <summary>
            Adds the ID with an associated expiration time to the cache.
            </summary>
            <param name="id">The ID.</param>
            <param name="expirationDateTime">The expiration time or <c>null</c> if none.</param>
            <returns><c>true</c> if the ID doesn't already exist in the cache; otherwise <c>false</c>.</returns>
        </member>
        <member name="T:ComponentSpace.SAML2.Data.InMemoryIDCache">
            <summary>
            The in-memory ID cache stores IDs in-memory.
            <para>
            The in-memory ID cache is suitable for applications deployed to a single server.
            For applications deployed to a web farm, an ID cache implemented using a database or shared state server is required.
            </para>
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Data.InMemoryIDCache.Add(System.String,System.DateTime)">
            <summary>
            Adds the ID with an associated expiration time to the cache.
            </summary>
            <param name="id">The ID.</param>
            <param name="expirationDateTime">The expiration time or <c>null</c> if none.</param>
            <returns><c>true</c> if the ID doesn't already exist in the cache; otherwise <c>false</c>.</returns>
        </member>
        <member name="T:ComponentSpace.SAML2.Data.InMemorySSOSessionStore">
            <summary>
            The single sign-on session store stores single sign-on session state in memory.
            </summary>
        </member>
        <member name="P:ComponentSpace.SAML2.Data.InMemorySSOSessionStore.SlidingExpiration">
            <summary>
            Gets or sets the sliding expiration.
            </summary>
            <value>The sliding expiration.</value>
        </member>
        <member name="M:ComponentSpace.SAML2.Data.InMemorySSOSessionStore.Load(System.Type)">
            <summary>
            Loads the SSO session object.
            </summary>
            <param name="type">The SSO session object type.</param>
            <returns>The SSO session object or <c>null</c> if none.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Data.InMemorySSOSessionStore.Save(System.Object)">
            <summary>
            Saves the SSO session object.
            </summary>
            <param name="ssoSession">The serializable SSO session object.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Data.InMemorySSOSessionStore.Delete(System.Type)">
            <summary>
            Deletes the SSO session object.
            </summary>
            <param name="type">The SSO session object type.</param>
        </member>
        <member name="T:ComponentSpace.SAML2.Data.ISSOSessionStore">
            <summary>
            The single sign-on session store.
            </summary>
        </member>
        <member name="P:ComponentSpace.SAML2.Data.ISSOSessionStore.SessionID">
            <summary>
            Gets the unique SSO session identifier.
            </summary>
            <value>
            The unique SSO session identifier.
            </value>
        </member>
        <member name="M:ComponentSpace.SAML2.Data.ISSOSessionStore.Load(System.Type)">
            <summary>
            Loads the SSO session object.
            </summary>
            <param name="type">The SSO session object type.</param>
            <returns>The SSO session object or <c>null</c> if none.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Data.ISSOSessionStore.Save(System.Object)">
            <summary>
            Saves the SSO session object.
            </summary>
            <param name="ssoSession">The serializable SSO session object.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Data.ISSOSessionStore.Delete(System.Type)">
            <summary>
            Deletes the SSO session object.
            </summary>
            <param name="type">The SSO session object type.</param>
        </member>
        <member name="T:ComponentSpace.SAML2.Data.SAMLCookieOptions">
            <summary>
            The SAML cookie options.
            </summary>
        </member>
        <member name="P:ComponentSpace.SAML2.Data.SAMLCookieOptions.Name">
            <summary>
            Gets or sets the SAML cookie name.
            </summary>
            <value>The SAML cookie name.</value>
        </member>
        <member name="P:ComponentSpace.SAML2.Data.SAMLCookieOptions.Domain">
            <summary>
            Gets or sets the cookie domain.
            </summary>
            <value>
            The cookie domain.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Data.SAMLCookieOptions.Path">
            <summary>
            Gets or sets the cookie path.
            </summary>
            <value>
            The cookie path.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Data.SAMLCookieOptions.HttpOnly">
            <summary>
            Gets or sets the flag indicating whether the cookie is accessible by client-side script.
            </summary>
            <value>
            The flag indicating whether the cookie is accessible by client-side script.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Data.SAMLCookieOptions.Secure">
            <summary>
            Gets or sets the flag to secure (ie HTTPS only) the SAML cookie.
            </summary>
            <value>The the flag to secure (ie HTTPS only) the SAML cookie.</value>
        </member>
        <member name="P:ComponentSpace.SAML2.Data.SAMLCookieOptions.SameSite">
            <summary>
            Gets or sets the SameSite mode.
            </summary>
            <value>
            The SameSite mode.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Data.SAMLCookieOptions.Expiry">
            <summary>
            Gets or sets the SAML cookie expiry.
            This is required if a permanent rather than session cookie is to be created. 
            </summary>
            <value>The SAML cookie expiry.</value>
        </member>
        <member name="P:ComponentSpace.SAML2.Data.SAMLCookieOptions.RefreshExpiry">
            <summary>
            Gets or sets the flag indicating whether the SAML cookie expiry should be refreshed.
            </summary>
            <value>The flag indicating whether the SAML cookie expiry should be refreshed.</value>
        </member>
        <member name="T:ComponentSpace.SAML2.Data.SessionIDDelegate">
            <summary>
            The session ID delegate returns a unique SSO session identifier.
            <para>
            The SSO session identifier must be unique for the user's browser session.
            It's used to identify which SSO session information is specific to the user's browser session.
            </para>
            </summary>
            <returns>The unique SSO session identifier.</returns>
        </member>
        <member name="T:ComponentSpace.SAML2.Data.AddSAMLCookieDelegate">
            <summary>
            The add cookie delegate adds the SAML session cookie to the HTTP response.
            </summary>
            <param name="httpCookie">The HTTP cookie.</param>
        </member>
        <member name="T:ComponentSpace.SAML2.Data.SessionIDDelegates">
            <summary>
            The standard session ID delegates.
            </summary>
        </member>
        <member name="P:ComponentSpace.SAML2.Data.SessionIDDelegates.SessionIDDelegate">
            <summary>
            Gets or sets the session ID delegate.
            <para>
            The SSO session identifier must be unique for the user's browser session.
            It's used to identify which SSO session information is specific to the user's browser session.
            </para>
            <para>
            By default <c>GetSessionIDFromSAMLCookie</c> is used.
            </para>
            </summary>
            <value>
            The session ID delegate.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Data.SessionIDDelegates.AddSAMLCookieDelegate">
            <summary>
            Gets or sets the add SAML cookie delegate.
            <para>
            The delegate adds the SAML session cookie to the HTTP response.
            </para>
            </summary>
            <value>
            The session ID delegate.
            </value>
        </member>
        <member name="M:ComponentSpace.SAML2.Data.SessionIDDelegates.GetSessionIDFromHttpSessionState">
            <summary>
            Gets the SSO session identifier by returning the ASP.NET session state identifier.
            <para>
            This is the <c>System.Web.HttpSessionState.SessionID</c>.
            </para>
            <para>
            ASP.NET session state must be enabled.
            </para>
            <para>
            The default setting of &lt;sessionState cookieless="UseCookies"/&gt; in web.config is required.
            </para>
            </summary>
            <returns>The SSO session identifier.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Data.SessionIDDelegates.GetSessionIDFromAnonymousID">
            <summary>
            Gets the SSO session identifier by returning the ASP.NET anonymous identifier.
            <para>
            This is the <c>System.Web.HttpContext.Request.AnonymousID</c>.
            </para>
            <para>
            ASP.NET anonymous identification must be enabled.
            </para>
            <para>
            The web.config must include &lt;anonymousIdentification enabled="true"/&gt;.
            </para>
            </summary>
            <returns>The SSO session identifier.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Data.SessionIDDelegates.GetSessionIDFromSAMLCookie">
            <summary>
            Gets the SSO session identifier stored in a SAML cookie.
            </summary>
            <returns>The SSO session identifier.</returns>
        </member>
        <member name="T:ComponentSpace.SAML2.Exceptions.SAMLBindingException">
            <summary>
            The exception that is thrown when a SAML binding error occurs.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Exceptions.SAMLBindingException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>SAMLBindingException</c> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Exceptions.SAMLBindingException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <c>SAMLBindingException</c> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Exceptions.SAMLBindingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <c>SAMLBindingException</c> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:ComponentSpace.SAML2.Exceptions.SAMLCertificateException">
            <summary>
            The exception that is thrown when a SAML X.509 certificate error occurs.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Exceptions.SAMLCertificateException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>SAMLCertificateException</c> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Exceptions.SAMLCertificateException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <c>SAMLCertificateException</c> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Exceptions.SAMLCertificateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <c>SAMLCertificateException</c> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:ComponentSpace.SAML2.Exceptions.SAMLConfigurationException">
            <summary>
            The exception that is thrown when a SAML configuration error occurs.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Exceptions.SAMLConfigurationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>SAMLConfigurationException</c> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Exceptions.SAMLConfigurationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <c>SAMLConfigurationException</c> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Exceptions.SAMLConfigurationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <c>SAMLConfigurationException</c> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:ComponentSpace.SAML2.Exceptions.SAMLDatabaseException">
            <summary>
            The exception that is thrown when a SAML database error occurs.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Exceptions.SAMLDatabaseException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>SAMLDatabaseException</c> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Exceptions.SAMLDatabaseException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <c>SAMLDatabaseException</c> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Exceptions.SAMLDatabaseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <c>SAMLDatabaseException</c> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:ComponentSpace.SAML2.Exceptions.SAMLEncryptionException">
            <summary>
            The exception that is thrown when a SAML encryption or decryption fails.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Exceptions.SAMLEncryptionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>SAMLEncryptionException</c> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Exceptions.SAMLEncryptionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <c>SAMLEncryptionException</c> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Exceptions.SAMLEncryptionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <c>SAMLEncryptionException</c> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:ComponentSpace.SAML2.Exceptions.SAMLEnvironmentException">
            <summary>
            The exception that is thrown when a SAML environment error occurs.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Exceptions.SAMLEnvironmentException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>SAMLEnvironmentException</c> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Exceptions.SAMLEnvironmentException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <c>SAMLEnvironmentException</c> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Exceptions.SAMLEnvironmentException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <c>SAMLEnvironmentException</c> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:ComponentSpace.SAML2.Exceptions.SAMLErrorStatusException">
            <summary>
            The exception that is thrown when a SAML error status is returned in a response message.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Exceptions.SAMLErrorStatusException.#ctor(System.String,ComponentSpace.SAML2.Protocols.Status)">
            <summary>
            Initializes a new instance of the <c>SAMLErrorStatusException</c> class.
            </summary>
            <param name="message">The message.</param>
            <param name="status">The error status.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Exceptions.SAMLErrorStatusException.#ctor(System.String,System.Exception,ComponentSpace.SAML2.Protocols.Status)">
            <summary>
            Initializes a new instance of the <c>SAMLErrorStatusException</c> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
            <param name="status">The error status.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Exceptions.SAMLErrorStatusException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <c>SAMLErrorStatusException</c> class.
            </summary>
            <remarks>
            This constructor supports serialization.
            </remarks>
            <param name="info">The serialization information.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="P:ComponentSpace.SAML2.Exceptions.SAMLErrorStatusException.Status">
            <summary>
            Gets the status code. 
            </summary>
            <value>
            The status code.
            </value>
        </member>
        <member name="M:ComponentSpace.SAML2.Exceptions.SAMLErrorStatusException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialize the SAML assertion.
            </summary>
            <param name="info">The serialization information.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            <summary>
            The exception that is thrown when a SAML operation fails.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Exceptions.SAMLException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>SAMLException</c> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Exceptions.SAMLException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <c>SAMLException</c> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Exceptions.SAMLException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <c>SAMLException</c> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:ComponentSpace.SAML2.Exceptions.SAMLLicenseException">
            <summary>
            The exception that is thrown when a license error occurs.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Exceptions.SAMLLicenseException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>SAMLLicenseException</c> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Exceptions.SAMLLicenseException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <c>SAMLLicenseException</c> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Exceptions.SAMLLicenseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <c>SAMLLicenseException</c> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:ComponentSpace.SAML2.Exceptions.SAMLNotSupportedException">
            <summary>
            The exception that is thrown when a SAML operation is not supported.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Exceptions.SAMLNotSupportedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>SAMLNotSupportedException</c> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Exceptions.SAMLNotSupportedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <c>SAMLNotSupportedException</c> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Exceptions.SAMLNotSupportedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <c>SAMLNotSupportedException</c> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:ComponentSpace.SAML2.Exceptions.SAMLProfileException">
            <summary>
            The exception that is thrown when a SAML profile error occurs.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Exceptions.SAMLProfileException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>SAMLProfileException</c> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Exceptions.SAMLProfileException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <c>SAMLProfileException</c> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Exceptions.SAMLProfileException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <c>SAMLProfileException</c> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:ComponentSpace.SAML2.Exceptions.SAMLProtocolException">
            <summary>
            The exception that is thrown when a SAML protocol error occurs.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Exceptions.SAMLProtocolException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>SAMLProtocolException</c> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Exceptions.SAMLProtocolException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <c>SAMLProtocolException</c> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Exceptions.SAMLProtocolException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <c>SAMLProtocolException</c> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:ComponentSpace.SAML2.Exceptions.SAMLSchemaValidationException">
            <summary>
            The exception that is thrown when a SAML schema validation error occurs.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Exceptions.SAMLSchemaValidationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>SAMLSchemaValidationException</c> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Exceptions.SAMLSchemaValidationException.#ctor(System.String,System.Collections.Generic.IList{System.Xml.Schema.XmlSchemaException},System.Collections.Generic.IList{System.Xml.Schema.XmlSchemaException})">
            <summary>
            Initializes a new instance of the <c>SAMLSchemaValidationException</c> class.
            </summary>
            <param name="message">The message.</param>
            <param name="warnings">The list of XML schema warnings.</param>
            <param name="errors">The list of XML schema errors.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Exceptions.SAMLSchemaValidationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <c>SAMLSchemaValidationException</c> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Exceptions.SAMLSchemaValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <c>SAMLSchemaValidationException</c> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="P:ComponentSpace.SAML2.Exceptions.SAMLSchemaValidationException.Warnings">
            <summary>
            Gets the list of XML schema warnings.
            </summary>
            <value>
            The list of XML schema warnings.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Exceptions.SAMLSchemaValidationException.Errors">
            <summary>
            Gets the list of XML schema errors.
            </summary>
            <value>
            The list of XML schema errors.
            </value>
        </member>
        <member name="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            <summary>
            The exception that is thrown when a SAML serialization or deserialization operation fails.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Exceptions.SAMLSerializationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>SAMLSerializationException</c> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Exceptions.SAMLSerializationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <c>SAMLSerializationException</c> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Exceptions.SAMLSerializationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <c>SAMLSerializationException</c> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:ComponentSpace.SAML2.Exceptions.SAMLSignatureException">
            <summary>
            The exception that is thrown when a SAML signature generation or verification fails.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Exceptions.SAMLSignatureException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>SAMLSignatureException</c> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Exceptions.SAMLSignatureException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <c>SAMLSignatureException</c> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Exceptions.SAMLSignatureException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <c>SAMLSignatureException</c> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:ComponentSpace.SAML2.Metadata.AdditionalMetadataLocation">
            <summary>
            Represents an additional metadata location.
            </summary>
            <remarks>
            Refer to the Metadata for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.AdditionalMetadataLocation.IsValid(System.Xml.XmlElement)">
            <summary>
            Indicates whether the XML is an additional metadata location.
            </summary>
            <param name="xmlElement">The XML to test.</param>
            <returns><c>true</c> if the XML is an organization; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.AdditionalMetadataLocation.#ctor">
            <summary>
            Initializes a new instance of the <c>AdditionalMetadataLocation</c> class.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.AdditionalMetadataLocation.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <c>AdditionalMetadataLocation</c> class.
            </summary>
            <param name="xmlNamespace">The XML namespace.</param>
            <param name="uri">The location URI.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.AdditionalMetadataLocation.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <c>AdditionalMetadataLocation</c> class from XML.
            </summary>
            <param name="xmlElement">The additional metadata location XML.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentSpace.SAML2.Metadata.AdditionalMetadataLocation.XmlNamespace">
            <summary>
            Gets or sets the XML namespace. 
            </summary>
            <value>
            The XML namespace.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Metadata.AdditionalMetadataLocation.URI">
            <summary>
            Gets or sets the URI. 
            </summary>
            <value>
            The URI.
            </value>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.AdditionalMetadataLocation.ToXml(System.Xml.XmlDocument)">
            <summary>
            Serializes the additional metadata location to XML.
            </summary>
            <param name="xmlDocument">The owning XML document.</param>
            <returns>The additional metadata location as XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="T:ComponentSpace.SAML2.Metadata.AffiliationDescriptor">
            <summary>
            Represents an affiliation descriptor.
            </summary>
            <remarks>
            Refer to the Metadata for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.AffiliationDescriptor.IsValid(System.Xml.XmlElement)">
            <summary>
            Indicates whether the XML is an affiliation descriptor.
            </summary>
            <param name="xmlElement">The XML to test.</param>
            <returns><c>true</c> if the XML is an affiliation descriptor; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.AffiliationDescriptor.#ctor">
            <summary>
            Initializes a new instance of the <c>AffiliationDescriptor</c> class.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.AffiliationDescriptor.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <c>AffiliationDescriptor</c> class from XML.
            </summary>
            <param name="xmlElement">The affiliation descriptor XML.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentSpace.SAML2.Metadata.AffiliationDescriptor.AffiliationOwnerID">
            <summary>
            Gets or sets the affiliation owner ID. 
            </summary>
            <value>
            The affiliation owner ID.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Metadata.AffiliationDescriptor.ID">
            <summary>
            Gets or sets the ID. 
            </summary>
            <value>
            The ID.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Metadata.AffiliationDescriptor.ValidUntil">
            <summary>
            Gets or sets the valid until date/time. 
            </summary>
            <value>
            The valid until date/time.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Metadata.AffiliationDescriptor.CacheDuration">
            <summary>
            Gets or sets the cache duration. 
            </summary>
            <value>
            The cache duration.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Metadata.AffiliationDescriptor.Signature">
            <summary>
            Gets or sets the digital signature. 
            </summary>
            <value>
            The digital signature.
            </value>
            <remarks>
            To generate or verify signatures, use <see cref="T:ComponentSpace.SAML2.Metadata.SAMLMetadataSignature"/>.
            </remarks>
            <seealso cref="T:ComponentSpace.SAML2.Metadata.SAMLMetadataSignature"/>
        </member>
        <member name="P:ComponentSpace.SAML2.Metadata.AffiliationDescriptor.Extensions">
            <summary>
            Gets or sets the extensions. 
            </summary>
            <value>
            The extensions.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Metadata.AffiliationDescriptor.AffiliateMembers">
            <summary>
            Gets or sets the list of affiliate members. 
            </summary>
            <value>
            The list of affiliate members.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Metadata.AffiliationDescriptor.KeyDescriptors">
            <summary>
            Gets or sets the list of key descriptors. 
            </summary>
            <value>
            The list of key descriptors.
            </value>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.AffiliationDescriptor.ToXml">
            <summary>
            Serializes the affiliation descriptor to XML.
            </summary>
            <remarks>
            An XML document is created.
            </remarks>
            <returns>The affiliation descriptor as XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.AffiliationDescriptor.ToXml(System.Xml.XmlDocument)">
            <summary>
            Serializes the affiliation descriptor to XML.
            </summary>
            <param name="xmlDocument">The owning XML document.</param>
            <returns>The affiliation descriptor as XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="T:ComponentSpace.SAML2.Metadata.AttributeAuthorityDescriptor">
            <summary>
            Represents an attribute authority descriptor.
            </summary>
            <remarks>
            Refer to the Metadata for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.AttributeAuthorityDescriptor.IsValid(System.Xml.XmlElement)">
            <summary>
            Indicates whether the XML is an attribute authority descriptor.
            </summary>
            <param name="xmlElement">The XML to test.</param>
            <returns><c>true</c> if the XML is an attribute authority descriptor; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.AttributeAuthorityDescriptor.#ctor">
            <summary>
            Initializes a new instance of the <c>AttributeAuthorityDescriptor</c> class.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.AttributeAuthorityDescriptor.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <c>AttributeAuthorityDescriptor</c> class from XML.
            </summary>
            <param name="xmlElement">The attribute authority descriptor XML.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentSpace.SAML2.Metadata.AttributeAuthorityDescriptor.AttributeServices">
            <summary>
            Gets or sets the list of attribute services. 
            </summary>
            <value>
            The list of attribute services.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Metadata.AttributeAuthorityDescriptor.AssertionIDRequestServices">
            <summary>
            Gets or sets the list of assertion ID request services. 
            </summary>
            <value>
            The list of assertion ID request services.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Metadata.AttributeAuthorityDescriptor.NameIDFormats">
            <summary>
            Gets or sets the list of name ID formats. 
            </summary>
            <value>
            The list of name ID formats.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Metadata.AttributeAuthorityDescriptor.AttributeProfiles">
            <summary>
            Gets or sets the list of attribute profiles. 
            </summary>
            <value>
            The list of attribute profiles.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Metadata.AttributeAuthorityDescriptor.Attributes">
            <summary>
            Gets or sets the list of attributes. 
            </summary>
            <value>
            The list of attributes.
            </value>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.AttributeAuthorityDescriptor.ToXml(System.Xml.XmlDocument)">
            <summary>
            Serializes the attribute authority descriptor to XML.
            </summary>
            <param name="xmlDocument">The owning XML document.</param>
            <returns>The attribute authority descriptor as XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="T:ComponentSpace.SAML2.Metadata.AttributeConsumingService">
            <summary>
            Represents an attribute consuming service.
            </summary>
            <remarks>
            Refer to the Metadata for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.AttributeConsumingService.IsValid(System.Xml.XmlElement)">
            <summary>
            Indicates whether the XML is an attribute consuming service.
            </summary>
            <param name="xmlElement">The XML to test.</param>
            <returns><c>true</c> if the XML is an attribute consuming service; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.AttributeConsumingService.#ctor">
            <summary>
            Initializes a new instance of the <c>AttributeConsumingService</c> class.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.AttributeConsumingService.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <c>AttributeConsumingService</c> class from XML.
            </summary>
            <param name="xmlElement">The attribute consuming service XML.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentSpace.SAML2.Metadata.AttributeConsumingService.Index">
            <summary>
            Gets or sets the index. 
            </summary>
            <value>
            The index.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Metadata.AttributeConsumingService.IsDefault">
            <summary>
            Gets or sets the is default flag. 
            </summary>
            <value>
            The is default flag.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Metadata.AttributeConsumingService.ServiceNames">
            <summary>
            Gets or sets the list of service names.
            </summary>
            <value>
            The list of service names.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Metadata.AttributeConsumingService.ServiceDescriptions">
            <summary>
            Gets or sets the list of service descriptions.
            </summary>
            <value>
            The list of service descriptions.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Metadata.AttributeConsumingService.RequestedAttributes">
            <summary>
            Gets or sets the list of requested attributes. 
            </summary>
            <value>
            The list of requested attributes.
            </value>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.AttributeConsumingService.ToXml(System.Xml.XmlDocument)">
            <summary>
            Serializes the attribute consuming service to XML.
            </summary>
            <param name="xmlDocument">The owning XML document.</param>
            <returns>The attribute consuming service as XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="T:ComponentSpace.SAML2.Metadata.AuthnAuthorityDescriptor">
            <summary>
            Represents an authentication authority descriptor.
            </summary>
            <remarks>
            Refer to the Metadata for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.AuthnAuthorityDescriptor.IsValid(System.Xml.XmlElement)">
            <summary>
            Indicates whether the XML is an authentication authority descriptor.
            </summary>
            <param name="xmlElement">The XML to test.</param>
            <returns><c>true</c> if the XML is an authentication authority descriptor; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.AuthnAuthorityDescriptor.#ctor">
            <summary>
            Initializes a new instance of the <c>AuthnAuthorityDescriptor</c> class.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.AuthnAuthorityDescriptor.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <c>AuthnAuthorityDescriptor</c> class from XML.
            </summary>
            <param name="xmlElement">The authentication authority descriptor XML.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentSpace.SAML2.Metadata.AuthnAuthorityDescriptor.AuthnQueryServices">
            <summary>
            Gets or sets the list of authentication query services. 
            </summary>
            <value>
            The list of authentication query services.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Metadata.AuthnAuthorityDescriptor.AssertionIDRequestServices">
            <summary>
            Gets or sets the list of assertion ID request services. 
            </summary>
            <value>
            The list of assertion ID request services.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Metadata.AuthnAuthorityDescriptor.NameIDFormats">
            <summary>
            Gets or sets the list of name ID formats. 
            </summary>
            <value>
            The list of name ID formats.
            </value>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.AuthnAuthorityDescriptor.ToXml(System.Xml.XmlDocument)">
            <summary>
            Serializes the authentication authority descriptor to XML.
            </summary>
            <param name="xmlDocument">The owning XML document.</param>
            <returns>The authentication authority descriptor as XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="T:ComponentSpace.SAML2.Metadata.ContactPerson">
            <summary>
            Represents a contact person.
            </summary>
            <remarks>
            Refer to the Metadata for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.ContactPerson.IsValid(System.Xml.XmlElement)">
            <summary>
            Indicates whether the XML is a contact person.
            </summary>
            <param name="xmlElement">The XML to test.</param>
            <returns><c>true</c> if the XML is a contact person; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.ContactPerson.#ctor">
            <summary>
            Initializes a new instance of the <c>ContactPerson</c> class.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.ContactPerson.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <c>ContactPerson</c> class from XML.
            </summary>
            <param name="xmlElement">The contact person XML.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.ContactPerson.ToXml(System.Xml.XmlDocument)">
            <summary>
            Serializes the contact person to XML.
            </summary>
            <param name="xmlDocument">The owning XML document.</param>
            <returns>The contact person as XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="T:ComponentSpace.SAML2.Metadata.ContactType">
            <summary>
            Represents the contact type.
            </summary>
            <remarks>
            Refer to the Metadata for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="T:ComponentSpace.SAML2.Metadata.ContactType.ContactTypeValues">
            <summary>
            The contact types.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.Metadata.ContactType.ContactTypeValues.Technical">
            <summary>
            Technical.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.Metadata.ContactType.ContactTypeValues.Support">
            <summary>
            Support.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.Metadata.ContactType.ContactTypeValues.Administrative">
            <summary>
            Administrative.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.Metadata.ContactType.ContactTypeValues.Billing">
            <summary>
            Billing.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.Metadata.ContactType.ContactTypeValues.Other">
            <summary>
            Other.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.ContactType.#ctor">
            <summary>
            Initializes a new instance of the <c>ContactType</c> class.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.ContactType.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <c>ContactType</c> class from XML.
            </summary>
            <param name="xmlElement">The contact type XML.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentSpace.SAML2.Metadata.ContactType.ContactTypeValue">
            <summary>
            Gets or sets the contact type. 
            </summary>
            <value>
            The contact type.
            </value>
            <seealso cref="P:ComponentSpace.SAML2.Metadata.ContactType.ContactTypeValue"/>
        </member>
        <member name="P:ComponentSpace.SAML2.Metadata.ContactType.Extensions">
            <summary>
            Gets or sets the extensions. 
            </summary>
            <value>
            The extensions.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Metadata.ContactType.Company">
            <summary>
            Gets or sets the company name. 
            </summary>
            <value>
            The company name.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Metadata.ContactType.GivenName">
            <summary>
            Gets or sets the given name. 
            </summary>
            <value>
            The company name.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Metadata.ContactType.Surname">
            <summary>
            Gets or sets the surname. 
            </summary>
            <value>
            The surname.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Metadata.ContactType.EmailAddresses">
            <summary>
            Gets or sets the list of email addresses. 
            </summary>
            <value>
            The list of email addresses.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Metadata.ContactType.TelephoneNumbers">
            <summary>
            Gets or sets the list of telephone numbers. 
            </summary>
            <value>
            The list of telephone numbers.
            </value>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.ContactType.ToXml(System.Xml.XmlElement)">
            <summary>
            Serializes the contact type to XML.
            </summary>
            <param name="xmlElement">The owning XML element.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="T:ComponentSpace.SAML2.Metadata.Duration">
            <summary>
            Represents the XML schema duration type.
            </summary>
            <remarks>
            Refer to the XML Schema specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.Duration.#ctor">
            <summary>
            Initializes a new instance of the <c>Duration</c> class.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.Duration.#ctor(System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Decimal)">
            <summary>
            Initializes a new instance of the <c>Duration</c> class.
            </summary>
            <param name="negative"><c>true</c> if the duration is negative; otherwise <c>false</c>.</param>
            <param name="years">The number of years.</param>
            <param name="months">The number of months.</param>
            <param name="days">The number of days.</param>
            <param name="hours">The number of hours.</param>
            <param name="minutes">The number of minutes.</param>
            <param name="seconds">The number of seconds.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.Duration.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>Duration</c> class.
            </summary>
            <remarks>
            The format of the string is: [-]PnYnMnDTnHnMnS.
            </remarks>
            <param name="duration">The duration as a string.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the string format is invalid.
            </exception>
        </member>
        <member name="P:ComponentSpace.SAML2.Metadata.Duration.Negative">
            <summary>
            Gets or sets the negative duration flag. 
            </summary>
            <value>
            The negative duration flag.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Metadata.Duration.Years">
            <summary>
            Gets or sets the number of years. 
            </summary>
            <value>
            The number of years.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Metadata.Duration.Months">
            <summary>
            Gets or sets the number of months. 
            </summary>
            <value>
            The number of months.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Metadata.Duration.Days">
            <summary>
            Gets or sets the number of days. 
            </summary>
            <value>
            The number of days.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Metadata.Duration.Hours">
            <summary>
            Gets or sets the number of hours. 
            </summary>
            <value>
            The number of hours.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Metadata.Duration.Minutes">
            <summary>
            Gets or sets the number of minutes. 
            </summary>
            <value>
            The number of minutes.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Metadata.Duration.Seconds">
            <summary>
            Gets or sets the number of seconds. 
            </summary>
            <value>
            The number of seconds.
            </value>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.Duration.ToString">
            <summary>
            Returns a string that represents the duration. 
            </summary>
            <remarks>
            The format of the string is: [-]PnYnMnDTnHnMnS.
            </remarks>
            <returns>A string that represents the duration.</returns>
        </member>
        <member name="T:ComponentSpace.SAML2.Metadata.EndpointType">
            <summary>
            Represents the endpoint type.
            </summary>
            <remarks>
            Refer to the Metadata for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.EndpointType.#ctor">
            <summary>
            Initializes a new instance of the <c>EndpointType</c> class.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.EndpointType.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <c>EndpointType</c> class.
            </summary>
            <param name="binding">The binding.</param>
            <param name="location">The location.</param>
            <param name="responseLocation">The response location.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.EndpointType.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <c>EndpointType</c> class from XML.
            </summary>
            <param name="xmlElement">The endpoint XML.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentSpace.SAML2.Metadata.EndpointType.Binding">
            <summary>
            Gets or sets the binding. 
            </summary>
            <value>
            The binding.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Metadata.EndpointType.Location">
            <summary>
            Gets or sets the location. 
            </summary>
            <value>
            The location.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Metadata.EndpointType.ResponseLocation">
            <summary>
            Gets or sets the response location. 
            </summary>
            <value>
            The response location.
            </value>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.EndpointType.ToXml(System.Xml.XmlElement)">
            <summary>
            Serializes the endpoint to XML.
            </summary>
            <param name="xmlElement">The owning XML element.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="T:ComponentSpace.SAML2.Metadata.EntitiesDescriptor">
            <summary>
            Represents an entities descriptor.
            </summary>
            <remarks>
            Refer to the Metadata for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.EntitiesDescriptor.IsValid(System.Xml.XmlElement)">
            <summary>
            Indicates whether the XML is an entities descriptor.
            </summary>
            <param name="xmlElement">The XML to test.</param>
            <returns><c>true</c> if the XML is an entities descriptor; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.EntitiesDescriptor.#ctor">
            <summary>
            Initializes a new instance of the <c>EntitiesDescriptor</c> class.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.EntitiesDescriptor.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <c>EntitiesDescriptor</c> class from XML.
            </summary>
            <param name="xmlElement">The entities descriptor XML.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentSpace.SAML2.Metadata.EntitiesDescriptor.ID">
            <summary>
            Gets or sets the ID. 
            </summary>
            <value>
            The ID.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Metadata.EntitiesDescriptor.ValidUntil">
            <summary>
            Gets or sets the valid until date/time. 
            </summary>
            <value>
            The valid until date/time.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Metadata.EntitiesDescriptor.CacheDuration">
            <summary>
            Gets or sets the cache duration. 
            </summary>
            <value>
            The cache duration.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Metadata.EntitiesDescriptor.Name">
            <summary>
            Gets or sets the name. 
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Metadata.EntitiesDescriptor.Signature">
            <summary>
            Gets or sets the digital signature. 
            </summary>
            <value>
            The digital signature.
            </value>
            <remarks>
            To generate or verify signatures, use <see cref="T:ComponentSpace.SAML2.Metadata.SAMLMetadataSignature"/>.
            </remarks>
            <seealso cref="T:ComponentSpace.SAML2.Metadata.SAMLMetadataSignature"/>
        </member>
        <member name="P:ComponentSpace.SAML2.Metadata.EntitiesDescriptor.Extensions">
            <summary>
            Gets or sets the extensions. 
            </summary>
            <value>
            The extensions.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Metadata.EntitiesDescriptor.EntitiesDescriptors">
            <summary>
            Gets or sets the list of entities descriptors. 
            </summary>
            <value>
            The list of entities descriptors.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Metadata.EntitiesDescriptor.EntityDescriptors">
            <summary>
            Gets or sets the list of entity descriptors. 
            </summary>
            <value>
            The list of entity descriptors.
            </value>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.EntitiesDescriptor.GetEntityDescriptor(System.String)">
            <summary>
            Gets the entity descriptor identified by the entity ID.
            </summary>
            <param name="entityID">The entity ID of the entity descriptor.</param>
            <returns>The entity descriptor of <c>null</c> if none.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.EntitiesDescriptor.ToXml">
            <summary>
            Serializes the entities descriptor to XML.
            </summary>
            <remarks>
            An XML document is created.
            </remarks>
            <returns>The entities descriptor as XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.EntitiesDescriptor.ToXml(System.Xml.XmlDocument)">
            <summary>
            Serializes the entities descriptor to XML.
            </summary>
            <param name="xmlDocument">The owning XML document.</param>
            <returns>The entities descriptor as XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="T:ComponentSpace.SAML2.Metadata.EntityDescriptor">
            <summary>
            Represents an entity descriptor.
            </summary>
            <remarks>
            Refer to the Metadata for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.EntityDescriptor.IsValid(System.Xml.XmlElement)">
            <summary>
            Indicates whether the XML is an entity descriptor.
            </summary>
            <param name="xmlElement">The XML to test.</param>
            <returns><c>true</c> if the XML is an entity descriptor; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.EntityDescriptor.#ctor">
            <summary>
            Initializes a new instance of the <c>EntityDescriptor</c> class.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.EntityDescriptor.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <c>EntityDescriptor</c> class from XML.
            </summary>
            <param name="xmlElement">The entity descriptor XML.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentSpace.SAML2.Metadata.EntityDescriptor.EntityID">
            <summary>
            Gets or sets the entity ID. 
            </summary>
            <value>
            The entity ID.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Metadata.EntityDescriptor.ID">
            <summary>
            Gets or sets the ID. 
            </summary>
            <value>
            The ID.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Metadata.EntityDescriptor.ValidUntil">
            <summary>
            Gets or sets the valid until date/time. 
            </summary>
            <value>
            The valid until date/time.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Metadata.EntityDescriptor.CacheDuration">
            <summary>
            Gets or sets the cache duration. 
            </summary>
            <value>
            The cache duration.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Metadata.EntityDescriptor.Signature">
            <summary>
            Gets or sets the digital signature. 
            </summary>
            <value>
            The digital signature.
            </value>
            <remarks>
            To generate or verify signatures, use <see cref="T:ComponentSpace.SAML2.Metadata.SAMLMetadataSignature"/>.
            </remarks>
            <seealso cref="T:ComponentSpace.SAML2.Metadata.SAMLMetadataSignature"/>
        </member>
        <member name="P:ComponentSpace.SAML2.Metadata.EntityDescriptor.Extensions">
            <summary>
            Gets or sets the extensions. 
            </summary>
            <value>
            The extensions.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Metadata.EntityDescriptor.RoleDescriptors">
            <summary>
            Gets or sets the list of role descriptors. 
            </summary>
            <value>
            The list of role descriptors.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Metadata.EntityDescriptor.IDPSSODescriptors">
            <summary>
            Gets or sets the list of IdP SSO descriptors. 
            </summary>
            <value>
            The list of IdP SSO descriptors.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Metadata.EntityDescriptor.SPSSODescriptors">
            <summary>
            Gets or sets the list of SP SSO descriptors. 
            </summary>
            <value>
            The list of SP SSO descriptors.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Metadata.EntityDescriptor.AuthnAuthorityDescriptors">
            <summary>
            Gets or sets the list of authentication authority descriptors. 
            </summary>
            <value>
            The list of authentication authority descriptors.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Metadata.EntityDescriptor.AttributeAuthorityDescriptors">
            <summary>
            Gets or sets the list of attribute authority descriptors. 
            </summary>
            <value>
            The list of attribute authority descriptors.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Metadata.EntityDescriptor.PDPDescriptors">
            <summary>
            Gets or sets the list of PDP descriptors. 
            </summary>
            <value>
            The list of PDP descriptors.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Metadata.EntityDescriptor.AffiliationDescriptor">
            <summary>
            Gets or sets the affiliation descriptor.
            </summary>
            <value>
            The affiliation descriptor.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Metadata.EntityDescriptor.Organization">
            <summary>
            Gets or sets the organization.
            </summary>
            <value>
            The organization.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Metadata.EntityDescriptor.ContactPeople">
            <summary>
            Gets or sets the list of contact people. 
            </summary>
            <value>
            The list of contact people.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Metadata.EntityDescriptor.AdditionalMetadataLocations">
            <summary>
            Gets or sets the list of additional metadata locations. 
            </summary>
            <value>
            The list of additional metadata locations.
            </value>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.EntityDescriptor.ToXml">
            <summary>
            Serializes the entities descriptor to XML.
            </summary>
            <remarks>
            An XML document is created.
            </remarks>
            <returns>The entities descriptor as XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.EntityDescriptor.ToXml(System.Xml.XmlDocument)">
            <summary>
            Serializes the entity descriptor to XML.
            </summary>
            <param name="xmlDocument">The owning XML document.</param>
            <returns>The entity descriptor as XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="T:ComponentSpace.SAML2.Metadata.EntityIDType">
            <summary>
            Represents the entity ID type.
            </summary>
            <remarks>
            Refer to the Metadata for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="F:ComponentSpace.SAML2.Metadata.EntityIDType.MaxLength">
            <summary>
            The maximum length of an entity ID.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.EntityIDType.#ctor">
            <summary>
            Initializes a new instance of the <c>EntityIDType</c> class.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.EntityIDType.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>EntityIDType</c> class.
            </summary>
            <param name="uri">The URI.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the URI length is invalid.
            </exception>
        </member>
        <member name="P:ComponentSpace.SAML2.Metadata.EntityIDType.URI">
            <summary>
            Gets or sets the URI. 
            </summary>
            <value>
            The URI.
            </value>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.EntityIDType.ToString">
            <summary>
            Returns a string that represents the entity ID. 
            </summary>
            <returns>A string that represents the entity ID.</returns>
        </member>
        <member name="T:ComponentSpace.SAML2.Metadata.Extensions">
            <summary>
            Represents an extensions.
            </summary>
            <remarks>
            Refer to the Metadata for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.Extensions.IsValid(System.Xml.XmlElement)">
            <summary>
            Indicates whether the XML is an extensions.
            </summary>
            <param name="xmlElement">The XML to test.</param>
            <returns><c>true</c> if the XML is an extensions; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.Extensions.#ctor">
            <summary>
            Initializes a new instance of the <c>Extensions</c> class.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.Extensions.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <c>Extensions</c> class from XML.
            </summary>
            <param name="xmlElement">The extensions XML.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentSpace.SAML2.Metadata.Extensions.AnyElements">
            <summary>
            Gets or sets the list of XML elements. 
            </summary>
            <value>
            The list of XML elements.
            </value>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.Extensions.ToXml(System.Xml.XmlDocument)">
            <summary>
            Serializes the extensions to XML.
            </summary>
            <param name="xmlDocument">The owning XML document.</param>
            <returns>The extensions as XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="T:ComponentSpace.SAML2.Metadata.IDPSSODescriptor">
            <summary>
            Represents an IdP SSO descriptor.
            </summary>
            <remarks>
            Refer to the Metadata for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.IDPSSODescriptor.IsValid(System.Xml.XmlElement)">
            <summary>
            Indicates whether the XML is an IdP SSO descriptor.
            </summary>
            <param name="xmlElement">The XML to test.</param>
            <returns><c>true</c> if the XML is an IdP SSO descriptor; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.IDPSSODescriptor.#ctor">
            <summary>
            Initializes a new instance of the <c>IDPSSODescriptor</c> class.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.IDPSSODescriptor.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <c>IDPSSODescriptor</c> class from XML.
            </summary>
            <param name="xmlElement">The IdP SSO descriptor XML.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentSpace.SAML2.Metadata.IDPSSODescriptor.WantAuthnRequestsSigned">
            <summary>
            Gets or sets the flag indicating whether want authentication requests signed. 
            </summary>
            <value>
            The flag indicating whether want authentication requests signed.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Metadata.IDPSSODescriptor.SingleSignOnServices">
            <summary>
            Gets or sets the list of single sign-on services. 
            </summary>
            <value>
            The list of single sign-on services.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Metadata.IDPSSODescriptor.NameIDMappingServices">
            <summary>
            Gets or sets the list of name ID mapping services. 
            </summary>
            <value>
            The list of name ID mapping services.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Metadata.IDPSSODescriptor.AssertionIDRequestServices">
            <summary>
            Gets or sets the list of assertion ID request services. 
            </summary>
            <value>
            The list of assertion ID request services.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Metadata.IDPSSODescriptor.AttributeProfiles">
            <summary>
            Gets or sets the list of attribute profiles. 
            </summary>
            <value>
            The list of attribute profiles.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Metadata.IDPSSODescriptor.Attributes">
            <summary>
            Gets or sets the list of attributes. 
            </summary>
            <value>
            The list of attributes.
            </value>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.IDPSSODescriptor.ToXml">
            <summary>
            Serializes the IdP SSO descriptor to XML.
            </summary>
            <remarks>
            An XML document is created.
            </remarks>
            <returns>The IdP SSO descriptor as XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.IDPSSODescriptor.ToXml(System.Xml.XmlDocument)">
            <summary>
            Serializes the IdP SSO descriptor to XML.
            </summary>
            <param name="xmlDocument">The owning XML document.</param>
            <returns>The IdP SSO descriptor as XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="T:ComponentSpace.SAML2.Metadata.IndexedEndpointType">
            <summary>
            Represents the indexed endpoint type.
            </summary>
            <remarks>
            Refer to the Metadata for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.IndexedEndpointType.#ctor">
            <summary>
            Initializes a new instance of the <c>IndexedEndpointType</c> class.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.IndexedEndpointType.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <c>IndexedEndpointType</c> class.
            </summary>
            <param name="index">The index.</param>
            <param name="isDefault">The is default flag.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.IndexedEndpointType.#ctor(System.String,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <c>IndexedEndpointType</c> class.
            </summary>
            <param name="binding">The binding.</param>
            <param name="location">The location.</param>
            <param name="responseLocation">The response location.</param>
            <param name="index">The index.</param>
            <param name="isDefault">The is default flag.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.IndexedEndpointType.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <c>IndexedEndpointType</c> class from XML.
            </summary>
            <param name="xmlElement">The endpoint XML.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentSpace.SAML2.Metadata.IndexedEndpointType.Index">
            <summary>
            Gets or sets the index. 
            </summary>
            <value>
            The index.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Metadata.IndexedEndpointType.IsDefault">
            <summary>
            Gets or sets the is default flag.
            </summary>
            <value>
            The is default flag.
            </value>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.IndexedEndpointType.ToXml(System.Xml.XmlElement)">
            <summary>
            Serializes the index endpoint to XML.
            </summary>
            <param name="xmlElement">The owning XML element.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="T:ComponentSpace.SAML2.Metadata.KeyDescriptor">
            <summary>
            Represents a key descriptor.
            </summary>
            <remarks>
            Refer to the Metadata for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="T:ComponentSpace.SAML2.Metadata.KeyDescriptor.KeyTypes">
            <summary>
            The key types.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.Metadata.KeyDescriptor.KeyTypes.Encryption">
            <summary>
            Encryption.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.Metadata.KeyDescriptor.KeyTypes.Signing">
            <summary>
            Signing.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.KeyDescriptor.IsValid(System.Xml.XmlElement)">
            <summary>
            Indicates whether the XML is a key descriptor.
            </summary>
            <param name="xmlElement">The XML to test.</param>
            <returns><c>true</c> if the XML is a key descriptor; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.KeyDescriptor.GetEncryptionMethodAlgorithm(System.Xml.XmlElement)">
            <summary>
            Gets the encryption method algorithm.
            </summary>
            <param name="xmlElement">The encryption method element.</param>
            <returns>The encryption method algorithm.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.KeyDescriptor.#ctor">
            <summary>
            Initializes a new instance of the <c>KeyDescriptor</c> class.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.KeyDescriptor.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <c>KeyDescriptor</c> class from XML.
            </summary>
            <param name="xmlElement">The key descriptor XML.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentSpace.SAML2.Metadata.KeyDescriptor.Use">
            <summary>
            Gets or sets the use. 
            </summary>
            <value>
            The use.
            </value>
            <seealso cref="T:ComponentSpace.SAML2.Metadata.KeyDescriptor.KeyTypes"/>
        </member>
        <member name="P:ComponentSpace.SAML2.Metadata.KeyDescriptor.KeyInfo">
            <summary>
            Gets or sets the key info. 
            </summary>
            <value>
            The key info.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Metadata.KeyDescriptor.EncryptionMethods">
            <summary>
            Gets or sets the list of encryption methods. 
            </summary>
            <value>
            The list of encryption methods.
            </value>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.KeyDescriptor.AddEncryptionMethod(System.String)">
            <summary>
            Adds an encryption method with the specified algorithm.
            </summary>
            <param name="encryptionMethodAlgorithm">The encryption method algorithm.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.KeyDescriptor.ToXml">
            <summary>
            Serializes the entities descriptor to XML.
            </summary>
            <remarks>
            An XML document is created.
            </remarks>
            <returns>The entities descriptor as XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.KeyDescriptor.ToXml(System.Xml.XmlDocument)">
            <summary>
            Serializes the key descriptor to XML.
            </summary>
            <param name="xmlDocument">The owning XML document.</param>
            <returns>The key descriptor as XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="T:ComponentSpace.SAML2.Metadata.LocalizedNameType">
            <summary>
            Represents the localized name type.
            </summary>
            <remarks>
            Refer to the Metadata for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.LocalizedNameType.#ctor">
            <summary>
            Initializes a new instance of the <c>LocalizedNameType</c> class.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.LocalizedNameType.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <c>LocalizedNameType</c> class.
            </summary>
            <param name="name">The name.</param>
            <param name="language">The language.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.LocalizedNameType.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <c>LocalizedNameType</c> class from XML.
            </summary>
            <param name="xmlElement">The localized name XML.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentSpace.SAML2.Metadata.LocalizedNameType.Name">
            <summary>
            Gets or sets the name. 
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Metadata.LocalizedNameType.Language">
            <summary>
            Gets or sets the language. 
            </summary>
            <value>
            The language.
            </value>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.LocalizedNameType.ToXml(System.Xml.XmlElement)">
            <summary>
            Serializes the localized name to XML.
            </summary>
            <param name="xmlElement">The owning XML element.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="T:ComponentSpace.SAML2.Metadata.LocalizedURIType">
            <summary>
            Represents the localized URI type.
            </summary>
            <remarks>
            Refer to the Metadata for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.LocalizedURIType.#ctor">
            <summary>
            Initializes a new instance of the <c>LocalizedURIType</c> class.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.LocalizedURIType.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <c>LocalizedURIType</c> class.
            </summary>
            <param name="uri">The URI.</param>
            <param name="language">The language.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.LocalizedURIType.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <c>LocalizedURIType</c> class from XML.
            </summary>
            <param name="xmlElement">The localized URI XML.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentSpace.SAML2.Metadata.LocalizedURIType.URI">
            <summary>
            Gets or sets the URI. 
            </summary>
            <value>
            The URI.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Metadata.LocalizedURIType.Language">
            <summary>
            Gets or sets the language. 
            </summary>
            <value>
            The language.
            </value>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.LocalizedURIType.ToXml(System.Xml.XmlElement)">
            <summary>
            Serializes the localized URI to XML.
            </summary>
            <param name="xmlElement">The owning XML element.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="T:ComponentSpace.SAML2.Metadata.Organization">
            <summary>
            Represents an organization.
            </summary>
            <remarks>
            Refer to the Metadata for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.Organization.IsValid(System.Xml.XmlElement)">
            <summary>
            Indicates whether the XML is an organization.
            </summary>
            <param name="xmlElement">The XML to test.</param>
            <returns><c>true</c> if the XML is an organization; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.Organization.#ctor">
            <summary>
            Initializes a new instance of the <c>Organization</c> class.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.Organization.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <c>Organization</c> class from XML.
            </summary>
            <param name="xmlElement">The organization XML.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentSpace.SAML2.Metadata.Organization.Extensions">
            <summary>
            Gets or sets the extensions. 
            </summary>
            <value>
            The extensions.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Metadata.Organization.OrganizationNames">
            <summary>
            Gets or sets the list of organization names. 
            </summary>
            <value>
            The list of organization names.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Metadata.Organization.OrganizationDisplayNames">
            <summary>
            Gets or sets the list of organization display names. 
            </summary>
            <value>
            The list of organization display names.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Metadata.Organization.OrganizationURLs">
            <summary>
            Gets or sets the list of organization URLs.
            </summary>
            <value>
            The list of organization URLs.
            </value>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.Organization.ToXml(System.Xml.XmlDocument)">
            <summary>
            Serializes the organization to XML.
            </summary>
            <param name="xmlDocument">The owning XML document.</param>
            <returns>The organization as XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="T:ComponentSpace.SAML2.Metadata.OrganizationDisplayName">
            <summary>
            Represents an organization display name.
            </summary>
            <remarks>
            Refer to the Metadata for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.OrganizationDisplayName.IsValid(System.Xml.XmlElement)">
            <summary>
            Indicates whether the XML is an organization display name.
            </summary>
            <param name="xmlElement">The XML to test.</param>
            <returns><c>true</c> if the XML is an organization display name; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.OrganizationDisplayName.#ctor">
            <summary>
            Initializes a new instance of the <c>OrganizationDisplayName</c> class.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.OrganizationDisplayName.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <c>OrganizationDisplayName</c> class.
            </summary>
            <param name="name">The name.</param>
            <param name="language">The language.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.OrganizationDisplayName.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <c>OrganizationDisplayName</c> class from XML.
            </summary>
            <param name="xmlElement">The organization display name XML.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.OrganizationDisplayName.ToXml(System.Xml.XmlDocument)">
            <summary>
            Serializes the organization display name to XML.
            </summary>
            <param name="xmlDocument">The owning XML document.</param>
            <returns>The organization display name as XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="T:ComponentSpace.SAML2.Metadata.OrganizationName">
            <summary>
            Represents an organization name.
            </summary>
            <remarks>
            Refer to the Metadata for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.OrganizationName.IsValid(System.Xml.XmlElement)">
            <summary>
            Indicates whether the XML is an organization name.
            </summary>
            <param name="xmlElement">The XML to test.</param>
            <returns><c>true</c> if the XML is an organization name; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.OrganizationName.#ctor">
            <summary>
            Initializes a new instance of the <c>OrganizationName</c> class.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.OrganizationName.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <c>OrganizationName</c> class.
            </summary>
            <param name="name">The name.</param>
            <param name="language">The language.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.OrganizationName.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <c>OrganizationName</c> class from XML.
            </summary>
            <param name="xmlElement">The organization name XML.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.OrganizationName.ToXml(System.Xml.XmlDocument)">
            <summary>
            Serializes the organization name to XML.
            </summary>
            <param name="xmlDocument">The owning XML document.</param>
            <returns>The organization name as XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="T:ComponentSpace.SAML2.Metadata.OrganizationURL">
            <summary>
            Represents an organization URL.
            </summary>
            <remarks>
            Refer to the Metadata for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.OrganizationURL.IsValid(System.Xml.XmlElement)">
            <summary>
            Indicates whether the XML is an organization URL.
            </summary>
            <param name="xmlElement">The XML to test.</param>
            <returns><c>true</c> if the XML is an organization URL; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.OrganizationURL.#ctor">
            <summary>
            Initializes a new instance of the <c>OrganizationURL</c> class.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.OrganizationURL.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <c>OrganizationURL</c> class.
            </summary>
            <param name="uri">The URI.</param>
            <param name="language">The language.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.OrganizationURL.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <c>OrganizationURL</c> class from XML.
            </summary>
            <param name="xmlElement">The organization URL XML.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.OrganizationURL.ToXml(System.Xml.XmlDocument)">
            <summary>
            Serializes the organization URL to XML.
            </summary>
            <param name="xmlDocument">The owning XML document.</param>
            <returns>The organization URL as XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="T:ComponentSpace.SAML2.Metadata.PDPDescriptor">
            <summary>
            Represents a PDP descriptor.
            </summary>
            <remarks>
            Refer to the Metadata for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.PDPDescriptor.IsValid(System.Xml.XmlElement)">
            <summary>
            Indicates whether the XML is a PDP descriptor.
            </summary>
            <param name="xmlElement">The XML to test.</param>
            <returns><c>true</c> if the XML is a PDP descriptor; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.PDPDescriptor.#ctor">
            <summary>
            Initializes a new instance of the <c>PDPDescriptor</c> class.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.PDPDescriptor.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <c>PDPDescriptor</c> class from XML.
            </summary>
            <param name="xmlElement">The PDP descriptor XML.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentSpace.SAML2.Metadata.PDPDescriptor.AuthzServices">
            <summary>
            Gets or sets the list of authorization services. 
            </summary>
            <value>
            The list of authorization query services.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Metadata.PDPDescriptor.AssertionIDRequestServices">
            <summary>
            Gets or sets the list of assertion ID request services. 
            </summary>
            <value>
            The list of assertion ID request services.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Metadata.PDPDescriptor.NameIDFormats">
            <summary>
            Gets or sets the list of name ID formats. 
            </summary>
            <value>
            The list of name ID formats.
            </value>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.PDPDescriptor.ToXml(System.Xml.XmlDocument)">
            <summary>
            Serializes the PDP descriptor to XML.
            </summary>
            <param name="xmlDocument">The owning XML document.</param>
            <returns>The PDP descriptor as XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="T:ComponentSpace.SAML2.Metadata.RequestedAttribute">
            <summary>
            Represents a requested attribute.
            </summary>
            <remarks>
            Refer to the Metadata for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.RequestedAttribute.IsValid(System.Xml.XmlElement)">
            <summary>
            Indicates whether the XML is a requested attribute.
            </summary>
            <param name="xmlElement">The XML to test.</param>
            <returns><c>true</c> if the XML is an attribute consuming service; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.RequestedAttribute.#ctor">
            <summary>
            Initializes a new instance of the <c>RequestedAttribute</c> class.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.RequestedAttribute.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <c>RequestedAttribute</c> class from XML.
            </summary>
            <param name="xmlElement">The requested attribute XML.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentSpace.SAML2.Metadata.RequestedAttribute.IsRequired">
            <summary>
            Gets or sets the is required flag. 
            </summary>
            <value>
            The is required flag.
            </value>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.RequestedAttribute.ToXml(System.Xml.XmlDocument)">
            <summary>
            Serializes the requested attribute to XML.
            </summary>
            <param name="xmlDocument">The owning XML document.</param>
            <returns>The requested attribute as XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="T:ComponentSpace.SAML2.Metadata.RoleDescriptor">
            <summary>
            Represents a role descriptor.
            </summary>
            <remarks>
            Refer to the Metadata for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.RoleDescriptor.IsValid(System.Xml.XmlElement)">
            <summary>
            Indicates whether the XML is a role descriptor.
            </summary>
            <param name="xmlElement">The XML to test.</param>
            <returns><c>true</c> if the XML is a role descriptor; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.RoleDescriptor.#ctor">
            <summary>
            Initializes a new instance of the <c>RoleDescriptor</c> class.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.RoleDescriptor.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <c>RoleDescriptor</c> class from XML.
            </summary>
            <param name="xmlElement">The role descriptor XML.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.RoleDescriptor.ToXml">
            <summary>
            Serializes the role descriptor to XML.
            </summary>
            <remarks>
            An XML document is created.
            </remarks>
            <returns>The role descriptor as XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.RoleDescriptor.ToXml(System.Xml.XmlDocument)">
            <summary>
            Serializes the role descriptor to XML.
            </summary>
            <param name="xmlDocument">The owning XML document.</param>
            <returns>The role descriptor as XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="T:ComponentSpace.SAML2.Metadata.RoleDescriptorType">
            <summary>
            Represents the role descriptor type.
            </summary>
            <remarks>
            Refer to the Metadata for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.RoleDescriptorType.#ctor">
            <summary>
            Initializes a new instance of the <c>RoleDescriptorType</c> class.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.RoleDescriptorType.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <c>RoleDescriptorType</c> class from XML.
            </summary>
            <param name="xmlElement">The role descriptor XML.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentSpace.SAML2.Metadata.RoleDescriptorType.ID">
            <summary>
            Gets or sets the ID. 
            </summary>
            <value>
            The ID.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Metadata.RoleDescriptorType.ValidUntil">
            <summary>
            Gets or sets the valid until date/time. 
            </summary>
            <value>
            The valid until date/time.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Metadata.RoleDescriptorType.CacheDuration">
            <summary>
            Gets or sets the cache duration. 
            </summary>
            <value>
            The cache duration.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Metadata.RoleDescriptorType.ProtocolSupportEnumeration">
            <summary>
            Gets or sets the protocol support enumeration. 
            </summary>
            <value>
            The protocol support enumeration.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Metadata.RoleDescriptorType.ErrorURL">
            <summary>
            Gets or sets the error URL. 
            </summary>
            <value>
            The error URL.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Metadata.RoleDescriptorType.Signature">
            <summary>
            Gets or sets the digital signature. 
            </summary>
            <value>
            The digital signature.
            </value>
            <remarks>
            To generate or verify signatures, use <see cref="T:ComponentSpace.SAML2.Metadata.SAMLMetadataSignature"/>.
            </remarks>
            <seealso cref="T:ComponentSpace.SAML2.Metadata.SAMLMetadataSignature"/>
        </member>
        <member name="P:ComponentSpace.SAML2.Metadata.RoleDescriptorType.Extensions">
            <summary>
            Gets or sets the extensions. 
            </summary>
            <value>
            The extensions.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Metadata.RoleDescriptorType.KeyDescriptors">
            <summary>
            Gets or sets the list of key descriptors. 
            </summary>
            <value>
            The list of key descriptors.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Metadata.RoleDescriptorType.Organization">
            <summary>
            Gets or sets the organization.
            </summary>
            <value>
            The organization.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Metadata.RoleDescriptorType.ContactPeople">
            <summary>
            Gets or sets the list of contact people. 
            </summary>
            <value>
            The list of contact people.
            </value>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.RoleDescriptorType.ToXml(System.Xml.XmlElement)">
            <summary>
            Serializes the role descriptor to XML.
            </summary>
            <param name="xmlElement">The owning XML element.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="T:ComponentSpace.SAML2.Metadata.SAMLMetadataSignature">
            <summary>
            Permits XML signature generation and verification for SAML metadata.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.Metadata.SAMLMetadataSignature.DefaultInclusiveNamespacesPrefixList">
            <summary>
            The default inclusive namespace prefix list.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.SAMLMetadataSignature.GetID(System.Xml.XmlElement)">
            <summary>
            Gets the ID from the SAML metadata.
            </summary>
            <param name="xmlElement">The SAML metadata.</param>
            <returns>The ID.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.SAMLMetadataSignature.AddSignature(System.Xml.XmlElement,System.Xml.XmlElement)">
            <summary>
            Adds the XML signature to the SAML metadata.
            </summary>
            <param name="xmlElement">The SAML metadata.</param>
            <param name="xmlSignature">The XML signature.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.SAMLMetadataSignature.IsSigned(System.Xml.XmlElement)">
            <summary>
            Indicates whether the metadata contains an XML signature.
            </summary>
            <param name="xmlElement">The metadata.</param>
            <returns><c>true</c> if the XML contains an XML signature; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.SAMLMetadataSignature.RemoveSignature(System.Xml.XmlElement)">
            <summary>
            Removes the XML signature, if any, from the metadata.
            </summary>
            <param name="xmlElement">The metadata.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.SAMLMetadataSignature.Generate(System.Xml.XmlElement,System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.Xml.KeyInfo,System.String,System.String,System.String)">
            <summary>
            Generates an XML signature and adds it to the metadata.
            </summary>
            <remarks>
            An XML signature with the constraints specified in the SAML specification is generated
            and added to the metadata. The signature is created using the supplied signing key.
            The key info will be included in the signature.
            <para>
            The generated signature is added to the supplied XML element.
            </para>
            </remarks>
            <param name="xmlElement">The metadata to sign.</param>
            <param name="signingKey">The signing key.</param>
            <param name="keyInfo">The key info to include in the signature.</param>
            <param name="inclusiveNamespacesPrefixList">The inclusive namespace prefix list or <c>null</c> to default to #default md saml ds xs xsi.</param>
            <param name="digestMethod">The digest method or <c>null</c> to default to http://www.w3.org/2001/04/xmlenc#sha256. </param>
            <param name="signatureMethod">The signature method or <c>null</c> to default to http://www.w3.org/2001/04/xmldsig-more#rsa-sha256. </param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSignatureException">
            Thrown when the signature generation fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.SAMLMetadataSignature.Generate(System.Xml.XmlElement,System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.Xml.KeyInfo)">
            <summary>
            Generates an XML signature and adds it to the metadata.
            </summary>
            <remarks>
            An XML signature with the constraints specified in the SAML specification is generated
            and added to the metadata. The signature is created using the supplied signing key.
            The key info will be included in the signature.
            <para>
            The generated signature is added to the supplied XML element.
            </para>
            </remarks>
            <param name="xmlElement">The metadata to sign.</param>
            <param name="signingKey">The signing key.</param>
            <param name="keyInfo">The key info to include in the signature.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSignatureException">
            Thrown when the signature generation fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.SAMLMetadataSignature.Generate(System.Xml.XmlElement,System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.Xml.KeyInfoX509Data,System.String,System.String,System.String)">
            <summary>
            Generates an XML signature and adds it to the metadata.
            </summary>
            <remarks>
            An XML signature with the constraints specified in the SAML specification is generated
            and added to the metadata. The signature is created using the supplied signing key.
            Key info, using the supplied X.509 data, is included in the signature.
            <para>
            The generated signature is added to the supplied XML element.
            </para>
            </remarks>
            <param name="xmlElement">The metadata to sign.</param>
            <param name="signingKey">The signing key.</param>
            <param name="keyInfoX509Data">The X.509 data to include in the signature.</param>
            <param name="inclusiveNamespacesPrefixList">The inclusive namespace prefix list or <c>null</c> to default to #default md saml ds xs xsi.</param>
            <param name="digestMethod">The digest method or <c>null</c> to default to http://www.w3.org/2001/04/xmlenc#sha256. </param>
            <param name="signatureMethod">The signature method or <c>null</c> to default to http://www.w3.org/2001/04/xmldsig-more#rsa-sha256. </param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSignatureException">
            Thrown when the signature generation fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.SAMLMetadataSignature.Generate(System.Xml.XmlElement,System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.Xml.KeyInfoX509Data)">
            <summary>
            Generates an XML signature and adds it to the metadata.
            </summary>
            <remarks>
            An XML signature with the constraints specified in the SAML specification is generated
            and added to the metadata. The signature is created using the supplied signing key.
            Key info, using the supplied X.509 data, is included in the signature.
            <para>
            The generated signature is added to the supplied XML element.
            </para>
            </remarks>
            <param name="xmlElement">The metadata to sign.</param>
            <param name="signingKey">The signing key.</param>
            <param name="keyInfoX509Data">The X.509 data to include in the signature.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSignatureException">
            Thrown when the signature generation fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.SAMLMetadataSignature.Generate(System.Xml.XmlElement,System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.X509Certificates.X509Certificate2Collection,System.String,System.String,System.String)">
            <summary>
            Generates an XML signature and adds it to the metadata.
            </summary>
            <remarks>
            An XML signature with the constraints specified in the SAML specification is generated
            and added to the metadata. The signature is created using the supplied signing key.
            Key info, using the supplied X.509 certificates, is included in the signature.
            <para>
            The generated signature is added to the supplied XML element.
            </para>
            </remarks>
            <param name="xmlElement">The metadata to sign.</param>
            <param name="signingKey">The signing key.</param>
            <param name="x509Certificates">The list of X.509 certificate to include in the key info.</param>
            <param name="inclusiveNamespacesPrefixList">The inclusive namespace prefix list or <c>null</c> to default to #default md saml ds xs xsi.</param>
            <param name="digestMethod">The digest method or <c>null</c> to default to http://www.w3.org/2001/04/xmlenc#sha256. </param>
            <param name="signatureMethod">The signature method or <c>null</c> to default to http://www.w3.org/2001/04/xmldsig-more#rsa-sha256. </param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSignatureException">
            Thrown when the signature generation fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.SAMLMetadataSignature.Generate(System.Xml.XmlElement,System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.X509Certificates.X509Certificate2Collection)">
            <summary>
            Generates an XML signature and adds it to the metadata.
            </summary>
            <remarks>
            An XML signature with the constraints specified in the SAML specification is generated
            and added to the metadata. The signature is created using the supplied signing key.
            Key info, using the supplied X.509 certificates, is included in the signature.
            <para>
            The generated signature is added to the supplied XML element.
            </para>
            </remarks>
            <param name="xmlElement">The metadata to sign.</param>
            <param name="signingKey">The signing key.</param>
            <param name="x509Certificates">The list of X.509 certificate to include in the key info.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSignatureException">
            Thrown when the signature generation fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.SAMLMetadataSignature.Generate(System.Xml.XmlElement,System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.X509Certificates.X509Certificate2,System.String,System.String,System.String)">
            <summary>
            Generates an XML signature and adds it to the metadata.
            </summary>
            <remarks>
            An XML signature with the constraints specified in the SAML specification is generated
            and added to the metadata. The signature is created using the supplied signing key.
            Key info, using the supplied X.509 certificate, is included in the signature.
            <para>
            The generated signature is added to the supplied XML element.
            </para>
            </remarks>
            <param name="xmlElement">The metadata to sign.</param>
            <param name="signingKey">The signing key.</param>
            <param name="x509Certificate">The X.509 certificate to include in the key info.</param>
            <param name="inclusiveNamespacesPrefixList">The inclusive namespace prefix list or <c>null</c> to default to #default md saml ds xs xsi.</param>
            <param name="digestMethod">The digest method or <c>null</c> to default to http://www.w3.org/2001/04/xmlenc#sha256. </param>
            <param name="signatureMethod">The signature method or <c>null</c> to default to http://www.w3.org/2001/04/xmldsig-more#rsa-sha256. </param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSignatureException">
            Thrown when the signature generation fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.SAMLMetadataSignature.Generate(System.Xml.XmlElement,System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Generates an XML signature and adds it to the metadata.
            </summary>
            <remarks>
            An XML signature with the constraints specified in the SAML specification is generated
            and added to the metadata. The signature is created using the supplied signing key.
            Key info, using the supplied X.509 certificate, is included in the signature.
            <para>
            The generated signature is added to the supplied XML element.
            </para>
            </remarks>
            <param name="xmlElement">The metadata to sign.</param>
            <param name="signingKey">The signing key.</param>
            <param name="x509Certificate">The X.509 certificate to include in the key info.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSignatureException">
            Thrown when the signature generation fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.SAMLMetadataSignature.Generate(System.Xml.XmlElement,System.Security.Cryptography.AsymmetricAlgorithm,System.String,System.String,System.String)">
            <summary>
            Generates an XML signature and adds it to the metadata.
            </summary>
            <remarks>
            An XML signature with the constraints specified in the SAML specification is generated
            and added to the metadata. The signature is created using the supplied signing key.
            <para>
            The generated signature is added to the supplied XML element.
            </para>
            </remarks>
            <param name="xmlElement">The metadata to sign.</param>
            <param name="signingKey">The signing key.</param>
            <param name="inclusiveNamespacesPrefixList">The inclusive namespace prefix list or <c>null</c> to default to #default md saml ds xs xsi.</param>
            <param name="digestMethod">The digest method or <c>null</c> to default to http://www.w3.org/2001/04/xmlenc#sha256. </param>
            <param name="signatureMethod">The signature method or <c>null</c> to default to http://www.w3.org/2001/04/xmldsig-more#rsa-sha256. </param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSignatureException">
            Thrown when the signature generation fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.SAMLMetadataSignature.Generate(System.Xml.XmlElement,System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>
            Generates an XML signature and adds it to the metadata.
            </summary>
            <remarks>
            An XML signature with the constraints specified in the SAML specification is generated
            and added to the metadata. The signature is created using the supplied signing key.
            <para>
            The generated signature is added to the supplied XML element.
            </para>
            </remarks>
            <param name="xmlElement">The metadata to sign.</param>
            <param name="signingKey">The signing key.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSignatureException">
            Thrown when the signature generation fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.SAMLMetadataSignature.Verify(System.Xml.XmlElement,System.Security.Cryptography.Xml.KeyInfo)">
            <summary>
            Verifies the XML signature.
            </summary>
            <remarks>
            The supplied key info is used to perform the verification.
            </remarks>
            <param name="xmlElement">The metadata containing the signature to verify.</param>
            <param name="keyInfo">The key info used to perform the verification or <c>null</c> if none.</param>
            <returns><c>true</c> if the XML signature is correct; otherwise <c>false</c>.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSignatureException">
            Thrown when the signature verification fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.SAMLMetadataSignature.Verify(System.Xml.XmlElement,System.Security.Cryptography.Xml.KeyInfoX509Data)">
            <summary>
            Verifies the XML signature.
            </summary>
            <remarks>
            The supplied X.509 data is used to perform the verification.
            </remarks>
            <param name="xmlElement">The metadata containing the signature to verify.</param>
            <param name="keyInfoX509Data">The X.509 data used to perform the verification or <c>null</c> if none.</param>
            <returns><c>true</c> if the XML signature is correct; otherwise <c>false</c>.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSignatureException">
            Thrown when the signature verification fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.SAMLMetadataSignature.Verify(System.Xml.XmlElement,System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Verifies the XML signature.
            </summary>
            <remarks>
            The supplied X.509 certificate is used to perform the verification.
            </remarks>
            <param name="xmlElement">The metadata containing the signature to verify.</param>
            <param name="x509Certificate">The X.509 certificate used to perform the verification.</param>
            <returns><c>true</c> if the XML signature is correct; otherwise <c>false</c>.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSignatureException">
            Thrown when the signature verification fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.SAMLMetadataSignature.Verify(System.Xml.XmlElement,System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>
            Verifies the XML signature.
            </summary>
            <remarks>
            The supplied public key is used to perform the verification.
            </remarks>
            <param name="xmlElement">The metadata containing the signature to verify.</param>
            <param name="signingKey">The public key used to perform the verification or <c>null</c> if none.</param>
            <returns><c>true</c> if the XML signature is correct; otherwise <c>false</c>.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSignatureException">
            Thrown when the signature verification fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.SAMLMetadataSignature.Verify(System.Xml.XmlElement)">
            <summary>
            Verifies the XML signature.
            </summary>
            <remarks>
            The key info included with the signature is used to perform the verification.
            </remarks>
            <param name="xmlElement">The metadata containing the signature to verify.</param>
            <returns><c>true</c> if the XML signature is correct; otherwise <c>false</c>.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSignatureException">
            Thrown when the signature verification fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.SAMLMetadataSignature.GetKeyInfo(System.Xml.XmlElement)">
            <summary>
            Gets the key info embedded in the XML signature or <c>null</c> if none.
            </summary>
            <param name="xmlElement">The metadata containing the signature with key info.</param>
            <returns>The key info embedded in the XML signature or <c>null</c> if none.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSignatureException">
            Thrown when the key info retrieval fails.
            </exception>
            <seealso cref="M:ComponentSpace.SAML2.Metadata.SAMLMetadataSignature.GetCertificate(System.Xml.XmlElement)"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.SAMLMetadataSignature.GetCertificate(System.Xml.XmlElement)">
            <summary>
            Gets the X.509 certificate embedded in the XML signature or <c>null</c> if none.
            </summary>
            <param name="xmlElement">The metadata containing the signature with X.509 certificate.</param>
            <returns>The X.509 certificate embedded in the XML signature or <c>null</c> if none.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSignatureException">
            Thrown when the X.509 certificate retrieval fails.
            </exception>
            <seealso cref="M:ComponentSpace.SAML2.Metadata.SAMLMetadataSignature.GetKeyInfo(System.Xml.XmlElement)"/>
        </member>
        <member name="T:ComponentSpace.SAML2.Metadata.SignedMetadata">
            <summary>
            Supports XML signatures on SAML metadata.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.SignedMetadata.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <c>SignedMetadata</c> class.
            </summary>
            <param name="xmlElement">The XML element.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.SignedMetadata.GetIdElement(System.Xml.XmlDocument,System.String)">
            <summary>
            Gets the SAML metadata with the specified ID.
            </summary>
            <param name="document">The XML document.</param>
            <param name="id">The ID.</param>
            <returns>The SAML metadata.</returns>
        </member>
        <member name="T:ComponentSpace.SAML2.Metadata.SPSSODescriptor">
            <summary>
            Represents an SP SSO descriptor.
            </summary>
            <remarks>
            Refer to the Metadata for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.SPSSODescriptor.IsValid(System.Xml.XmlElement)">
            <summary>
            Indicates whether the XML is an SP SSO descriptor.
            </summary>
            <param name="xmlElement">The XML to test.</param>
            <returns><c>true</c> if the XML is an SP SSO descriptor; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.SPSSODescriptor.#ctor">
            <summary>
            Initializes a new instance of the <c>SPSSODescriptor</c> class.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.SPSSODescriptor.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <c>SPSSODescriptor</c> class from XML.
            </summary>
            <param name="xmlElement">The SP SSO descriptor XML.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentSpace.SAML2.Metadata.SPSSODescriptor.AuthnRequestsSigned">
            <summary>
            Gets or sets the flag indicating authentication requests are signed. 
            </summary>
            <value>
            The flag indicating authentication requests are signed.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Metadata.SPSSODescriptor.WantAssertionsSigned">
            <summary>
            Gets or sets the flag indicating whether want assertions signed. 
            </summary>
            <value>
            The flag indicating whether want assertions signed.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Metadata.SPSSODescriptor.AssertionConsumerServices">
            <summary>
            Gets or sets the list of assertion consumer services. 
            </summary>
            <value>
            The list of assertion consumer services.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Metadata.SPSSODescriptor.AttributeConsumingServices">
            <summary>
            Gets or sets the list of attribute consuming services. 
            </summary>
            <value>
            The list of attribute consuming services.
            </value>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.SPSSODescriptor.ToXml">
            <summary>
            Serializes the SP SSO descriptor to XML.
            </summary>
            <remarks>
            An XML document is created.
            </remarks>
            <returns>The SP SSO descriptor as XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.SPSSODescriptor.ToXml(System.Xml.XmlDocument)">
            <summary>
            Serializes the SP SSO descriptor to XML.
            </summary>
            <param name="xmlDocument">The owning XML document.</param>
            <returns>The SP SSO descriptor as XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="T:ComponentSpace.SAML2.Metadata.SSODescriptorType">
            <summary>
            Represents the SSO descriptor type.
            </summary>
            <remarks>
            Refer to the Metadata for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.SSODescriptorType.#ctor">
            <summary>
            Initializes a new instance of the <c>SSODescriptorType</c> class.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.SSODescriptorType.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <c>SSODescriptorType</c> class from XML.
            </summary>
            <param name="xmlElement">The SSO descriptor XML.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentSpace.SAML2.Metadata.SSODescriptorType.ArtifactResolutionServices">
            <summary>
            Gets or sets the list of artifact resolution services. 
            </summary>
            <value>
            The list of artifact resolution services.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Metadata.SSODescriptorType.SingleLogoutServices">
            <summary>
            Gets or sets the list of single logout services. 
            </summary>
            <value>
            The list of single logout services.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Metadata.SSODescriptorType.ManageNameIDServices">
            <summary>
            Gets or sets the list of manage name ID services. 
            </summary>
            <value>
            The list of manage name ID services.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Metadata.SSODescriptorType.NameIDFormats">
            <summary>
            Gets or sets the list of name ID formats. 
            </summary>
            <value>
            The list of name ID formats.
            </value>
        </member>
        <member name="M:ComponentSpace.SAML2.Metadata.SSODescriptorType.ToXml(System.Xml.XmlElement)">
            <summary>
            Serializes the SSO descriptor to XML.
            </summary>
            <param name="xmlElement">The owning XML element.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="T:ComponentSpace.SAML2.Notifications.AbstractSAMLObserver">
            <summary>
            A SAML observer receives notifications as part of SAML single sign-on and logout.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Notifications.AbstractSAMLObserver.OnSAMLMessageSent(System.String,System.Xml.XmlElement,System.String,System.String)">
            <summary>
            Notifies the observer that a SAML message has been sent.
            </summary>
            <param name="partnerName">The partner name.</param>
            <param name="samlMessage">The SAML message.</param>
            <param name="relayState">The relay state.</param>
            <param name="destinationUrl">The destination URL.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Notifications.AbstractSAMLObserver.OnSAMLMessageReceived(System.String,System.Xml.XmlElement,System.String)">
            <summary>
            Notifies the observer that a SAML message has been received.
            </summary>
            <param name="partnerName">The partner name.</param>
            <param name="samlMessage">The SAML message.</param>
            <param name="relayState">The relay state.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Notifications.AbstractSAMLObserver.OnAuthnRequestCreated(System.String,ComponentSpace.SAML2.Protocols.AuthnRequest)">
            <summary>
            Notifies the observer that an authn request has been created.
            <para>
            The observer may return an updated authn request.
            </para>
            </summary>
            <param name="partnerName">The partner name.</param>
            <param name="authnRequest">The authn request.</param>
            <returns>The authn request.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Notifications.AbstractSAMLObserver.OnAuthnRequestReceived(System.String,ComponentSpace.SAML2.Protocols.AuthnRequest)">
            <summary>
            Notifies the observer that an authn request has been received.
            </summary>
            <param name="partnerName">The partner name.</param>
            <param name="authnRequest">The authn request.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Notifications.AbstractSAMLObserver.OnSAMLAssertionCreated(System.String,ComponentSpace.SAML2.Assertions.SAMLAssertion)">
            <summary>
            Notifies the observer that a SAML assertion has been created.
            <para>
            The observer may return an updated SAML assertion.
            </para>
            </summary>
            <param name="partnerName">The partner name.</param>
            <param name="samlAssertion">The SAML assertion.</param>
            <returns>The SAML assertion.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Notifications.AbstractSAMLObserver.OnSAMLAssertionReceived(System.String,ComponentSpace.SAML2.Assertions.SAMLAssertion)">
            <summary>
            Notifies the observer that a SAML assertion has been received.
            </summary>
            <param name="partnerName">The partner name.</param>
            <param name="samlAssertion">The SAML assertion.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Notifications.AbstractSAMLObserver.OnSAMLResponseCreated(System.String,ComponentSpace.SAML2.Protocols.SAMLResponse)">
            <summary>
            Notifies the observer that a SAML response has been created.
            <para>
            The observer may return an updated SAML response.
            </para>
            </summary>
            <param name="partnerName">The partner name.</param>
            <param name="samlResponse">The SAML response.</param>
            <returns>The SAML response.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Notifications.AbstractSAMLObserver.OnSAMLResponseReceived(System.String,ComponentSpace.SAML2.Protocols.SAMLResponse)">
            <summary>
            Notifies the observer that a SAML response has been received.
            </summary>
            <param name="partnerName">The partner name.</param>
            <param name="samlResponse">The SAML response.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Notifications.AbstractSAMLObserver.OnLogoutRequestCreated(System.String,ComponentSpace.SAML2.Protocols.LogoutRequest)">
            <summary>
            Notifies the observer that a logout request has been created.
            <para>
            The observer may return an updated logout request.
            </para>
            </summary>
            <param name="partnerName">The partner name.</param>
            <param name="logoutRequest">The logout request.</param>
            <returns>The logout request.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Notifications.AbstractSAMLObserver.OnLogoutRequestReceived(System.String,ComponentSpace.SAML2.Protocols.LogoutRequest)">
            <summary>
            Notifies the observer that a logout request has been received.
            </summary>
            <param name="partnerName">The partner name.</param>
            <param name="logoutRequest">The logout request.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Notifications.AbstractSAMLObserver.OnLogoutResponseCreated(System.String,ComponentSpace.SAML2.Protocols.LogoutResponse)">
            <summary>
            Notifies the observer that a logout response has been created.
            <para>
            The observer may return an updated logout response.
            </para>
            </summary>
            <param name="partnerName">The partner name.</param>
            <param name="logoutResponse">The logout response.</param>
            <returns>The logout response.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Notifications.AbstractSAMLObserver.OnLogoutResponseReceived(System.String,ComponentSpace.SAML2.Protocols.LogoutResponse)">
            <summary>
            Notifies the observer that a logout response has been received.
            </summary>
            <param name="partnerName">The partner name.</param>
            <param name="logoutResponse">The logout response.</param>
        </member>
        <member name="T:ComponentSpace.SAML2.Notifications.ISAMLObserver">
            <summary>
            A SAML observer receives notifications as part of SAML single sign-on and logout.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Notifications.ISAMLObserver.OnSAMLMessageSent(System.String,System.Xml.XmlElement,System.String,System.String)">
            <summary>
            Notifies the observer that a SAML message has been sent.
            </summary>
            <param name="partnerName">The partner name.</param>
            <param name="samlMessage">The SAML message.</param>
            <param name="relayState">The relay state.</param>
            <param name="destinationUrl">The destination URL.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Notifications.ISAMLObserver.OnSAMLMessageReceived(System.String,System.Xml.XmlElement,System.String)">
            <summary>
            Notifies the observer that a SAML message has been received.
            </summary>
            <param name="partnerName">The partner name.</param>
            <param name="samlMessage">The SAML message.</param>
            <param name="relayState">The relay state.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Notifications.ISAMLObserver.OnAuthnRequestCreated(System.String,ComponentSpace.SAML2.Protocols.AuthnRequest)">
            <summary>
            Notifies the observer that an authn request has been created.
            <para>
            The observer may return an updated authn request.
            </para>
            </summary>
            <param name="partnerName">The partner name.</param>
            <param name="authnRequest">The authn request.</param>
            <returns>The authn request.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Notifications.ISAMLObserver.OnAuthnRequestReceived(System.String,ComponentSpace.SAML2.Protocols.AuthnRequest)">
            <summary>
            Notifies the observer that an authn request has been received.
            </summary>
            <param name="partnerName">The partner name.</param>
            <param name="authnRequest">The authn request.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Notifications.ISAMLObserver.OnSAMLAssertionCreated(System.String,ComponentSpace.SAML2.Assertions.SAMLAssertion)">
            <summary>
            Notifies the observer that a SAML assertion has been created.
            <para>
            The observer may return an updated SAML assertion.
            </para>
            </summary>
            <param name="partnerName">The partner name.</param>
            <param name="samlAssertion">The SAML assertion.</param>
            <returns>The SAML assertion.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Notifications.ISAMLObserver.OnSAMLAssertionReceived(System.String,ComponentSpace.SAML2.Assertions.SAMLAssertion)">
            <summary>
            Notifies the observer that a SAML assertion has been received.
            </summary>
            <param name="partnerName">The partner name.</param>
            <param name="samlAssertion">The SAML assertion.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Notifications.ISAMLObserver.OnSAMLResponseCreated(System.String,ComponentSpace.SAML2.Protocols.SAMLResponse)">
            <summary>
            Notifies the observer that a SAML response has been created.
            <para>
            The observer may return an updated SAML response.
            </para>
            </summary>
            <param name="partnerName">The partner name.</param>
            <param name="samlResponse">The SAML response.</param>
            <returns>The SAML response.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Notifications.ISAMLObserver.OnSAMLResponseReceived(System.String,ComponentSpace.SAML2.Protocols.SAMLResponse)">
            <summary>
            Notifies the observer that a SAML response has been received.
            </summary>
            <param name="partnerName">The partner name.</param>
            <param name="samlResponse">The SAML response.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Notifications.ISAMLObserver.OnLogoutRequestCreated(System.String,ComponentSpace.SAML2.Protocols.LogoutRequest)">
            <summary>
            Notifies the observer that a logout request has been created.
            <para>
            The observer may return an updated logout request.
            </para>
            </summary>
            <param name="partnerName">The partner name.</param>
            <param name="logoutRequest">The logout request.</param>
            <returns>The logout request.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Notifications.ISAMLObserver.OnLogoutRequestReceived(System.String,ComponentSpace.SAML2.Protocols.LogoutRequest)">
            <summary>
            Notifies the observer that a logout request has been received.
            </summary>
            <param name="partnerName">The partner name.</param>
            <param name="logoutRequest">The logout request.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Notifications.ISAMLObserver.OnLogoutResponseCreated(System.String,ComponentSpace.SAML2.Protocols.LogoutResponse)">
            <summary>
            Notifies the observer that a logout response has been created.
            <para>
            The observer may return an updated logout response.
            </para>
            </summary>
            <param name="partnerName">The partner name.</param>
            <param name="logoutResponse">The logout response.</param>
            <returns>The logout response.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Notifications.ISAMLObserver.OnLogoutResponseReceived(System.String,ComponentSpace.SAML2.Protocols.LogoutResponse)">
            <summary>
            Notifies the observer that a logout response has been received.
            </summary>
            <param name="partnerName">The partner name.</param>
            <param name="logoutResponse">The logout response.</param>
        </member>
        <member name="T:ComponentSpace.SAML2.Notifications.SAMLObservable">
            <summary>
            A SAML observable sends notifications to observers as part of SAML single sign-on and logout.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Notifications.SAMLObservable.Subscribe(ComponentSpace.SAML2.Notifications.ISAMLObserver)">
            <summary>
            Subscribe the SAML observer to receive notifications.
            </summary>
            <param name="samlObserver">The SAML observer.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Notifications.SAMLObservable.Unsubscribe(ComponentSpace.SAML2.Notifications.ISAMLObserver)">
            <summary>
            Unsubscribe the SAML observer so events are no longer received.
            </summary>
            <param name="samlObserver">The SAML observer.</param>
        </member>
        <member name="T:ComponentSpace.SAML2.Notifications.TraceSAMLObserver">
            <summary>
            A trace SAML observer writes notifications to the trace log.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Notifications.TraceSAMLObserver.OnSAMLMessageSent(System.String,System.Xml.XmlElement,System.String,System.String)">
            <summary>
            Notifies the observer that a SAML message has been sent.
            </summary>
            <param name="partnerName">The partner name.</param>
            <param name="samlMessage">The SAML message.</param>
            <param name="relayState">The relay state.</param>
            <param name="destinationUrl">The destination URL.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Notifications.TraceSAMLObserver.OnSAMLMessageReceived(System.String,System.Xml.XmlElement,System.String)">
            <summary>
            Notifies the observer that a SAML message has been received.
            </summary>
            <param name="partnerName">The partner name.</param>
            <param name="samlMessage">The SAML message.</param>
            <param name="relayState">The relay state.</param>
        </member>
        <member name="T:ComponentSpace.SAML2.Profiles.ArtifactResolution.ArtifactResolver">
            <summary>
            Supports the artifact resolution profile.
            </summary>
            <remarks>
            Refer to the Profiles for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Profiles.ArtifactResolution.ArtifactResolver.SendRequestReceiveResponse(System.String,System.Xml.XmlElement)">
            <summary>
            Sends an artifact resolve request and receives an artifact response over SOAP.
            </summary>
            <param name="destinationURL">The destination URL.</param>
            <param name="artifactResolve">The artifact resolve request.</param>
            <returns>The artifact response.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLProfileException">
            Thrown when the send/receive fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Profiles.ArtifactResolution.ArtifactResolver.SendRequestReceiveResponse(System.Net.WebRequest,System.Xml.XmlElement)">
            <summary>
            Sends an artifact resolve request and receives an artifact response over SOAP.
            </summary>
            <param name="webRequest">The <c>WebRequest</c> used to send the request and receive the response.</param>
            <param name="artifactResolve">The artifact resolve request.</param>
            <returns>The artifact response.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLProfileException">
            Thrown when the send/receive fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Profiles.ArtifactResolution.ArtifactResolver.ReceiveArtifactResolve(System.Web.HttpRequestBase)">
            <summary>
            Receives an artifact resolve request.
            </summary>
            <param name="httpRequest">The HTTP request on which to receive the artifact resolve request.</param>
            <returns>The artifact resolve request.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLProfileException">
            Thrown when the receive fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Profiles.ArtifactResolution.ArtifactResolver.ReceiveArtifactResolve(System.Web.HttpRequest)">
            <summary>
            Receives an artifact resolve request.
            </summary>
            <param name="httpRequest">The HTTP request on which to receive the artifact resolve request.</param>
            <returns>The artifact resolve request.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLProfileException">
            Thrown when the receive fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Profiles.ArtifactResolution.ArtifactResolver.SendArtifactResponse(System.Web.HttpResponseBase,System.Xml.XmlElement)">
            <summary>
            Sends an artifact response containing the SAML message associated with the artifact.
            </summary>
            <param name="httpResponse">The HTTP response used to send the SAML response.</param>
            <param name="artifactResponse">The artifact response.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLProfileException">
            Thrown when the send fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Profiles.ArtifactResolution.ArtifactResolver.SendArtifactResponse(System.Web.HttpResponse,System.Xml.XmlElement)">
            <summary>
            Sends an artifact response containing the SAML message associated with the artifact.
            </summary>
            <param name="httpResponse">The HTTP response used to send the SAML response.</param>
            <param name="artifactResponse">The artifact response.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLProfileException">
            Thrown when the send fails.
            </exception>
        </member>
        <member name="T:ComponentSpace.SAML2.Profiles.AttributeQuery.AttributeQueryRequester">
            <summary>
            Supports the attribute query profile.
            </summary>
            <remarks>
            Refer to the Profiles for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Profiles.AttributeQuery.AttributeQueryRequester.SendAttributeQueryReceiveResponseBySOAP(System.String,System.Xml.XmlElement)">
            <summary>
            Sends the attribute query and receives a SAML response over SOAP.
            </summary>
            <param name="destinationURL">The destination URL.</param>
            <param name="attributeQuery">The attribute query.</param>
            <returns>The SAML response.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLProfileException">
            Thrown when the send/receive fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Profiles.AttributeQuery.AttributeQueryRequester.SendAttributeQueryReceiveResponseBySOAP(System.Net.WebRequest,System.Xml.XmlElement)">
            <summary>
            Sends the attribute query and receives a SAML response over SOAP.
            </summary>
            <param name="webRequest">The <c>WebRequest</c> used to send the request and receive the response.</param>
            <param name="attributeQuery">The attribute query.</param>
            <returns>The SAML response.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLProfileException">
            Thrown when the send/receive fails.
            </exception>
        </member>
        <member name="T:ComponentSpace.SAML2.Profiles.AttributeQuery.AttributeQueryResponder">
            <summary>
            Supports the attribute query profile.
            </summary>
            <remarks>
            Refer to the Profiles for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Profiles.AttributeQuery.AttributeQueryResponder.ReceiveAttributeQueryBySOAP(System.Web.HttpRequestBase)">
            <summary>
            Receives the attribute query over SOAP.
            </summary>
            <param name="httpRequest">The HTTP request containing the attribute query.</param>
            <returns>The attribute query.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLProfileException">
            Thrown when the receive fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Profiles.AttributeQuery.AttributeQueryResponder.ReceiveAttributeQueryBySOAP(System.Web.HttpRequest)">
            <summary>
            Receives the attribute query over SOAP.
            </summary>
            <param name="httpRequest">The HTTP request containing the attribute query.</param>
            <returns>The attribute query.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLProfileException">
            Thrown when the receive fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Profiles.AttributeQuery.AttributeQueryResponder.SendSAMLResponseBySOAP(System.Web.HttpResponseBase,System.Xml.XmlElement)">
            <summary>
            Sends the SAML response over SOAP.
            </summary>
            <param name="httpResponse">The HTTP response used to send the SAML response.</param>
            <param name="samlResponse">The SAML response.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLProfileException">
            Thrown when the send fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Profiles.AttributeQuery.AttributeQueryResponder.SendSAMLResponseBySOAP(System.Web.HttpResponse,System.Xml.XmlElement)">
            <summary>
            Sends the SAML response over SOAP.
            </summary>
            <param name="httpResponse">The HTTP response used to send the SAML response.</param>
            <param name="samlResponse">The SAML response.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLProfileException">
            Thrown when the send fails.
            </exception>
        </member>
        <member name="T:ComponentSpace.SAML2.Profiles.AuthenticationQuery.AuthenticationQueryRequester">
            <summary>
            Supports the authentication query profile.
            </summary>
            <remarks>
            Refer to the Profiles for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Profiles.AuthenticationQuery.AuthenticationQueryRequester.SendAuthenticationQueryReceiveResponseBySOAP(System.String,System.Xml.XmlElement)">
            <summary>
            Sends the authentication query and receives a SAML response over SOAP.
            </summary>
            <param name="destinationURL">The destination URL.</param>
            <param name="authenticationQuery">The authentication query.</param>
            <returns>The SAML response.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLProfileException">
            Thrown when the send/receive fails.
            </exception>
        </member>
        <member name="T:ComponentSpace.SAML2.Profiles.AuthenticationQuery.AuthenticationQueryResponder">
            <summary>
            Supports the authentication query profile.
            </summary>
            <remarks>
            Refer to the Profiles for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Profiles.AuthenticationQuery.AuthenticationQueryResponder.ReceiveAuthenticationQueryBySOAP(System.Web.HttpRequestBase)">
            <summary>
            Receives the authentication query over SOAP.
            </summary>
            <param name="httpRequest">The HTTP request containing the authentication query.</param>
            <returns>The authentication query.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLProfileException">
            Thrown when the receive fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Profiles.AuthenticationQuery.AuthenticationQueryResponder.ReceiveAuthenticationQueryBySOAP(System.Web.HttpRequest)">
            <summary>
            Receives the authentication query over SOAP.
            </summary>
            <param name="httpRequest">The HTTP request containing the authentication query.</param>
            <returns>The authentication query.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLProfileException">
            Thrown when the receive fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Profiles.AuthenticationQuery.AuthenticationQueryResponder.SendSAMLResponseBySOAP(System.Web.HttpResponseBase,System.Xml.XmlElement)">
            <summary>
            Sends the SAML response over SOAP.
            </summary>
            <param name="httpResponse">The HTTP response used to send the SAML response.</param>
            <param name="samlResponse">The SAML response.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLProfileException">
            Thrown when the send fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Profiles.AuthenticationQuery.AuthenticationQueryResponder.SendSAMLResponseBySOAP(System.Web.HttpResponse,System.Xml.XmlElement)">
            <summary>
            Sends the SAML response over SOAP.
            </summary>
            <param name="httpResponse">The HTTP response used to send the SAML response.</param>
            <param name="samlResponse">The SAML response.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLProfileException">
            Thrown when the send fails.
            </exception>
        </member>
        <member name="T:ComponentSpace.SAML2.Profiles.IdPDiscovery.CommonDomainCookie">
            <summary>
            Provides common domain cookie (CDC) functionality in the identity provider discovery profile.
            </summary>
            <remarks>
            Refer to the Profiles for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Profiles.IdPDiscovery.CommonDomainCookie.GetIdpIdentifiers(System.String)">
            <summary>
            Gets the identity provider identifiers from the cookie value.
            </summary>
            <param name="cookieValue">The cookie value.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Profiles.IdPDiscovery.CommonDomainCookie.#ctor">
            <summary>
            Initializes a new instance of the <c>CommonDomainCookie</c> class.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Profiles.IdPDiscovery.CommonDomainCookie.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <c>CommonDomainCookie</c> class from a cookie value.
            </summary>
            <param name="commonDomain">The common domain.</param>
            <param name="cookieValue">The cookie value.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Profiles.IdPDiscovery.CommonDomainCookie.#ctor(System.Web.HttpRequestBase)">
            <summary>
            Initializes a new instance of the <c>CommonDomainCookie</c> class from an HTTP request.
            </summary>
            <param name="httpRequest">The HTTP request.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Profiles.IdPDiscovery.CommonDomainCookie.#ctor(System.Web.HttpRequest)">
            <summary>
            Initializes a new instance of the <c>CommonDomainCookie</c> class from an HTTP request.
            </summary>
            <param name="httpRequest">The HTTP request.</param>
        </member>
        <member name="P:ComponentSpace.SAML2.Profiles.IdPDiscovery.CommonDomainCookie.CommonDomain">
            <summary>
            Gets or sets the common domain name.
            </summary>
            <value>
            The common domain name.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Profiles.IdPDiscovery.CommonDomainCookie.IdPIdentifiers">
            <summary>
            Gets or sets the list of identity provider IDs.
            </summary>
            <value>
            The list of identity provider IDs.
            </value>
        </member>
        <member name="M:ComponentSpace.SAML2.Profiles.IdPDiscovery.CommonDomainCookie.AddIdPIdentifier(System.String)">
            <summary>
            Adds the identity provider ID to the list of identity provider IDs.
            </summary>
            <param name="idpIdentifier">The identity provider ID.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Profiles.IdPDiscovery.CommonDomainCookie.ToString">
            <summary>
            Returns the cookie value.
            </summary>
            <returns>The cookie value.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Profiles.IdPDiscovery.CommonDomainCookie.ToCookie">
            <summary>
            Converts the <c>CommonDomainCookie</c> to an <c>HttpCookie</c>.
            </summary>
            <returns>The <c>HttpCookie</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Profiles.IdPDiscovery.CommonDomainCookie.SetCookie(System.Web.HttpResponseBase)">
            <summary>
            Sets the CDC in the HTTP response.
            </summary>
            <param name="httpResponse">The HTTP response.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Profiles.IdPDiscovery.CommonDomainCookie.SetCookie(System.Web.HttpResponse)">
            <summary>
            Sets the CDC in the HTTP response.
            </summary>
            <param name="httpResponse">The HTTP response.</param>
        </member>
        <member name="T:ComponentSpace.SAML2.Profiles.NameIdentifierManagement.ManageNameIDRequester">
            <summary>
            Supports the name identifier management profile.
            </summary>
            <remarks>
            Refer to the Profiles for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Profiles.NameIdentifierManagement.ManageNameIDRequester.SendManageNameIDRequestByHTTPRedirect(System.Web.HttpResponseBase,System.String,System.Xml.XmlElement,System.String,System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>
            Sends the manage name identifier request using HTTP redirect.
            </summary>
            <param name="httpResponse">The HTTP response used to perform the redirect.</param>
            <param name="destinationURL">The destination URL.</param>
            <param name="manageNameIDRequest">The manage name identifier request.</param>
            <param name="relayState">The relay state or <c>null</c> if none.</param>
            <param name="key">The key to generate the signature or <c>null</c> if no signature is to be generated.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLProfileException">
            Thrown when the send fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Profiles.NameIdentifierManagement.ManageNameIDRequester.SendManageNameIDRequestByHTTPRedirect(System.Web.HttpResponse,System.String,System.Xml.XmlElement,System.String,System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>
            Sends the manage name identifier request using HTTP redirect.
            </summary>
            <param name="httpResponse">The HTTP response used to perform the redirect.</param>
            <param name="destinationURL">The destination URL.</param>
            <param name="manageNameIDRequest">The manage name identifier request.</param>
            <param name="relayState">The relay state or <c>null</c> if none.</param>
            <param name="key">The key to generate the signature or <c>null</c> if no signature is to be generated.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLProfileException">
            Thrown when the send fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Profiles.NameIdentifierManagement.ManageNameIDRequester.SendManageNameIDRequestByHTTPPost(System.Web.HttpResponseBase,System.String,System.Xml.XmlElement,System.String)">
            <summary>
            Sends the manage name identifier request using HTTP post.
            </summary>
            <param name="httpResponse">The HTTP response that will return the form to post.</param>
            <param name="destinationURL">The destination URL.</param>
            <param name="manageNameIDRequest">The manage name identifier request.</param>
            <param name="relayState">The relay state or <c>null</c> if none.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLProfileException">
            Thrown when the send fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Profiles.NameIdentifierManagement.ManageNameIDRequester.SendManageNameIDRequestByHTTPPost(System.Web.HttpResponse,System.String,System.Xml.XmlElement,System.String)">
            <summary>
            Sends the manage name identifier request using HTTP post.
            </summary>
            <param name="httpResponse">The HTTP response that will return the form to post.</param>
            <param name="destinationURL">The destination URL.</param>
            <param name="manageNameIDRequest">The manage name identifier request.</param>
            <param name="relayState">The relay state or <c>null</c> if none.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLProfileException">
            Thrown when the send fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Profiles.NameIdentifierManagement.ManageNameIDRequester.SendArtifactByHTTPArtifact(System.Web.HttpResponseBase,System.String,ComponentSpace.SAML2.Bindings.HTTPArtifact,System.String,System.Boolean)">
            <summary>
            Sends an artifact using the HTTP artifact binding.
            </summary>
            <param name="httpResponse">The HTTP response that will send the artifact.</param>
            <param name="destinationURL">The destination URL.</param>
            <param name="httpArtifact">The artifact.</param>
            <param name="relayState">The relay state or <c>null</c> if none.</param>
            <param name="sendArtifactInForm">If <c>true</c> the artifact is sent in a form; otherwise it's sent in a query string.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLProfileException">
            Thrown when the send fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Profiles.NameIdentifierManagement.ManageNameIDRequester.SendArtifactByHTTPArtifact(System.Web.HttpResponse,System.String,ComponentSpace.SAML2.Bindings.HTTPArtifact,System.String,System.Boolean)">
            <summary>
            Sends an artifact using the HTTP artifact binding.
            </summary>
            <param name="httpResponse">The HTTP response that will send the artifact.</param>
            <param name="destinationURL">The destination URL.</param>
            <param name="httpArtifact">The artifact.</param>
            <param name="relayState">The relay state or <c>null</c> if none.</param>
            <param name="sendArtifactInForm">If <c>true</c> the artifact is sent in a form; otherwise it's sent in a query string.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLProfileException">
            Thrown when the send fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Profiles.NameIdentifierManagement.ManageNameIDRequester.SendManageNameIDRequestReceiveResponseBySOAP(System.String,System.Xml.XmlElement)">
            <summary>
            Sends the manage name identifier request and receives a manage name identifier response over SOAP.
            </summary>
            <param name="destinationURL">The destination URL.</param>
            <param name="manageNameIDRequest">The manage name identifier request.</param>
            <returns>The manage name identifier response.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLProfileException">
            Thrown when the send/receive fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Profiles.NameIdentifierManagement.ManageNameIDRequester.ReceiveManageNameIDResponseByHTTPRedirect(System.Web.HttpRequestBase,System.Xml.XmlElement@,System.String@,System.Boolean@,System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>
            Receives the manage name identifier response using HTTP redirect.
            </summary>
            <param name="httpRequest">The HTTP request containing the query string.</param>
            <param name="manageNameIDResponse">The returned manage name identifier response.</param>
            <param name="relayState">The returned relay state or <c>null</c> if none.</param>
            <param name="signed">Indicates whether the SAML message is signed.</param>
            <param name="key">The key to verify the signature or <c>null</c> if no signature is to be verified.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLProfileException">
            Thrown when the receive fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Profiles.NameIdentifierManagement.ManageNameIDRequester.ReceiveManageNameIDResponseByHTTPRedirect(System.Web.HttpRequest,System.Xml.XmlElement@,System.String@,System.Boolean@,System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>
            Receives the manage name identifier response using HTTP redirect.
            </summary>
            <param name="httpRequest">The HTTP request containing the query string.</param>
            <param name="manageNameIDResponse">The returned manage name identifier response.</param>
            <param name="relayState">The returned relay state or <c>null</c> if none.</param>
            <param name="signed">Indicates whether the SAML message is signed.</param>
            <param name="key">The key to verify the signature or <c>null</c> if no signature is to be verified.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLProfileException">
            Thrown when the receive fails.
            </exception>
        </member>
        <member name="T:ComponentSpace.SAML2.Profiles.NameIdentifierManagement.ManageNameIDResponder">
            <summary>
            Supports the name identifier management profile.
            </summary>
            <remarks>
            Refer to the Profiles for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Profiles.NameIdentifierManagement.ManageNameIDResponder.ReceiveManageNameIDRequestByHTTPRedirect(System.Web.HttpRequestBase,System.Xml.XmlElement@,System.String@,System.Boolean@,System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>
            Receives the manage name identifier request using HTTP redirect.
            </summary>
            <param name="httpRequest">The HTTP request containing the query string.</param>
            <param name="manageNameIDRequest">The returned manage name identifier request.</param>
            <param name="relayState">The returned relay state or <c>null</c> if none.</param>
            <param name="signed">Indicates whether the SAML message is signed.</param>
            <param name="key">The key to verify the signature or <c>null</c> if no signature is to be verified.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLProfileException">
            Thrown when the receive fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Profiles.NameIdentifierManagement.ManageNameIDResponder.ReceiveManageNameIDRequestByHTTPRedirect(System.Web.HttpRequest,System.Xml.XmlElement@,System.String@,System.Boolean@,System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>
            Receives the manage name identifier request using HTTP redirect.
            </summary>
            <param name="httpRequest">The HTTP request containing the query string.</param>
            <param name="manageNameIDRequest">The returned manage name identifier request.</param>
            <param name="relayState">The returned relay state or <c>null</c> if none.</param>
            <param name="signed">Indicates whether the SAML message is signed.</param>
            <param name="key">The key to verify the signature or <c>null</c> if no signature is to be verified.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLProfileException">
            Thrown when the receive fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Profiles.NameIdentifierManagement.ManageNameIDResponder.ReceiveManageNameIDRequestByHTTPPost(System.Web.HttpRequestBase,System.Xml.XmlElement@,System.String@)">
            <summary>
            Receives the manage name identifier request using HTTP post.
            </summary>
            <param name="httpRequest">The HTTP request containing the posted form.</param>
            <param name="manageNameIDRequest">The returned manage name identifier request.</param>
            <param name="relayState">The returned relay state or <c>null</c> if none.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLProfileException">
            Thrown when the receive fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Profiles.NameIdentifierManagement.ManageNameIDResponder.ReceiveManageNameIDRequestByHTTPPost(System.Web.HttpRequest,System.Xml.XmlElement@,System.String@)">
            <summary>
            Receives the manage name identifier request using HTTP post.
            </summary>
            <param name="httpRequest">The HTTP request containing the posted form.</param>
            <param name="manageNameIDRequest">The returned manage name identifier request.</param>
            <param name="relayState">The returned relay state or <c>null</c> if none.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLProfileException">
            Thrown when the receive fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Profiles.NameIdentifierManagement.ManageNameIDResponder.ReceiveArtifactByHTTPArtifact(System.Web.HttpRequestBase,System.Boolean,ComponentSpace.SAML2.Bindings.HTTPArtifact@,System.String@)">
            <summary>
            Receives the artifact using HTTP artifact with the artifact being in a form or query string.
            </summary>
            <param name="httpRequest">The HTTP request containing the artifact.</param>
            <param name="artifactInForm">If <c>true</c> the artifact is received in a form; otherwise it's received in a query string.</param>
            <param name="httpArtifact">The returned artifact.</param>
            <param name="relayState">The returned relay state or <c>null</c> if none.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLProfileException">
            Thrown when the receive fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Profiles.NameIdentifierManagement.ManageNameIDResponder.ReceiveArtifactByHTTPArtifact(System.Web.HttpRequest,System.Boolean,ComponentSpace.SAML2.Bindings.HTTPArtifact@,System.String@)">
            <summary>
            Receives the artifact using HTTP artifact with the artifact being in a form or query string.
            </summary>
            <param name="httpRequest">The HTTP request containing the artifact.</param>
            <param name="artifactInForm">If <c>true</c> the artifact is received in a form; otherwise it's received in a query string.</param>
            <param name="httpArtifact">The returned artifact.</param>
            <param name="relayState">The returned relay state or <c>null</c> if none.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLProfileException">
            Thrown when the receive fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Profiles.NameIdentifierManagement.ManageNameIDResponder.ReceiveManageNameIDRequestBySOAP(System.Web.HttpRequestBase)">
            <summary>
            Receives the manage name identifier request over SOAP.
            </summary>
            <param name="httpRequest">The HTTP request containing the manage name identifier request.</param>
            <returns>The manage name identifier request.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLProfileException">
            Thrown when the receive fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Profiles.NameIdentifierManagement.ManageNameIDResponder.ReceiveManageNameIDRequestBySOAP(System.Web.HttpRequest)">
            <summary>
            Receives the manage name identifier request over SOAP.
            </summary>
            <param name="httpRequest">The HTTP request containing the manage name identifier request.</param>
            <returns>The manage name identifier request.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLProfileException">
            Thrown when the receive fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Profiles.NameIdentifierManagement.ManageNameIDResponder.SendManageNameIDResponseByHTTPRedirect(System.Web.HttpResponseBase,System.String,System.Xml.XmlElement,System.String,System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>
            Sends the manage name identifier response using HTTP redirect.
            </summary>
            <param name="httpResponse">The HTTP response used to perform the redirect.</param>
            <param name="destinationURL">The destination URL.</param>
            <param name="manageNameIDResponse">The manage name identifier response.</param>
            <param name="relayState">The relay state or <c>null</c> if none.</param>
            <param name="key">The key to generate the signature or <c>null</c> if no signature is to be generated.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLProfileException">
            Thrown when the send fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Profiles.NameIdentifierManagement.ManageNameIDResponder.SendManageNameIDResponseByHTTPRedirect(System.Web.HttpResponse,System.String,System.Xml.XmlElement,System.String,System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>
            Sends the manage name identifier response using HTTP redirect.
            </summary>
            <param name="httpResponse">The HTTP response used to perform the redirect.</param>
            <param name="destinationURL">The destination URL.</param>
            <param name="manageNameIDResponse">The manage name identifier response.</param>
            <param name="relayState">The relay state or <c>null</c> if none.</param>
            <param name="key">The key to generate the signature or <c>null</c> if no signature is to be generated.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLProfileException">
            Thrown when the send fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Profiles.NameIdentifierManagement.ManageNameIDResponder.SendManageNameIDResponseBySOAP(System.Web.HttpResponseBase,System.Xml.XmlElement)">
            <summary>
            Sends the manage name identifier response over SOAP.
            </summary>
            <param name="httpResponse">The HTTP response used to send the manage name identifier response.</param>
            <param name="manageNameIDResponse">The manage name identifier response.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLProfileException">
            Thrown when the send fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Profiles.NameIdentifierManagement.ManageNameIDResponder.SendManageNameIDResponseBySOAP(System.Web.HttpResponse,System.Xml.XmlElement)">
            <summary>
            Sends the manage name identifier response over SOAP.
            </summary>
            <param name="httpResponse">The HTTP response used to send the manage name identifier response.</param>
            <param name="manageNameIDResponse">The manage name identifier response.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLProfileException">
            Thrown when the send fails.
            </exception>
        </member>
        <member name="T:ComponentSpace.SAML2.Profiles.NameIdentifierManagement.NameIDMappingResponder">
            <summary>
            Supports the name identifier mapping profile.
            </summary>
            <remarks>
            Refer to the Profiles for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Profiles.NameIdentifierManagement.NameIDMappingResponder.ReceiveNameIDMappingRequestBySOAP(System.Web.HttpRequestBase)">
            <summary>
            Receives the name identifier mapping request over SOAP.
            </summary>
            <param name="httpRequest">The HTTP request containing the name identifier mapping request.</param>
            <returns>The name identifier mapping request.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLProfileException">
            Thrown when the receive fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Profiles.NameIdentifierManagement.NameIDMappingResponder.ReceiveNameIDMappingRequestBySOAP(System.Web.HttpRequest)">
            <summary>
            Receives the name identifier mapping request over SOAP.
            </summary>
            <param name="httpRequest">The HTTP request containing the name identifier mapping request.</param>
            <returns>The name identifier mapping request.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLProfileException">
            Thrown when the receive fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Profiles.NameIdentifierManagement.NameIDMappingResponder.SendNameIDMappingResponseBySOAP(System.Web.HttpResponseBase,System.Xml.XmlElement)">
            <summary>
            Sends the name identifier mapping response over SOAP.
            </summary>
            <param name="httpResponse">The HTTP response used to send the name identifier mapping response.</param>
            <param name="nameIDMappingResponse">The name identifier mapping response.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLProfileException">
            Thrown when the send fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Profiles.NameIdentifierManagement.NameIDMappingResponder.SendNameIDMappingResponseBySOAP(System.Web.HttpResponse,System.Xml.XmlElement)">
            <summary>
            Sends the name identifier mapping response over SOAP.
            </summary>
            <param name="httpResponse">The HTTP response used to send the name identifier mapping response.</param>
            <param name="nameIDMappingResponse">The name identifier mapping response.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLProfileException">
            Thrown when the send fails.
            </exception>
        </member>
        <member name="T:ComponentSpace.SAML2.Profiles.NameIdentifierMapping.NameIDMappingRequester">
            <summary>
            Supports the name identifier mapping profile.
            </summary>
            <remarks>
            Refer to the Profiles for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Profiles.NameIdentifierMapping.NameIDMappingRequester.SendNameIDMappingRequestReceiveResponseBySOAP(System.String,System.Xml.XmlElement)">
            <summary>
            Sends the name identifier mapping request and receives a name identifier mapping response over SOAP.
            </summary>
            <param name="destinationURL">The destination URL.</param>
            <param name="nameIDMappingRequest">The name identifier mapping request.</param>
            <returns>The name identifier mapping response.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLProfileException">
            Thrown when the send/receive fails.
            </exception>
        </member>
        <member name="T:ComponentSpace.SAML2.Profiles.RequestAssertionByIdentifier.AssertionByIDRequester">
            <summary>
            Supports the request assertion by identifier profile.
            </summary>
            <remarks>
            Refer to the Profiles for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Profiles.RequestAssertionByIdentifier.AssertionByIDRequester.SendAssertionByIDRequestReceiveResponseBySOAP(System.String,System.Xml.XmlElement)">
            <summary>
            Sends the assertion by identifier request and receives a SAML response over SOAP.
            </summary>
            <param name="destinationURL">The destination URL.</param>
            <param name="assertionByIDRequest">The assertion by identifier request.</param>
            <returns>The SAML response.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLProfileException">
            Thrown when the send/receive fails.
            </exception>
        </member>
        <member name="T:ComponentSpace.SAML2.Profiles.RequestAssertionByIdentifier.AssertionByIDResponder">
            <summary>
            Supports the request assertion by identifier profile.
            </summary>
            <remarks>
            Refer to the Profiles for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Profiles.RequestAssertionByIdentifier.AssertionByIDResponder.ReceiveAssertionByIDRequestBySOAP(System.Web.HttpRequestBase)">
            <summary>
            Receives the assertion by identifier request over SOAP.
            </summary>
            <param name="httpRequest">The HTTP request containing the assertion by identifier request.</param>
            <returns>The assertion by identifier request.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLProfileException">
            Thrown when the receive fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Profiles.RequestAssertionByIdentifier.AssertionByIDResponder.ReceiveAssertionByIDRequestBySOAP(System.Web.HttpRequest)">
            <summary>
            Receives the assertion by identifier request over SOAP.
            </summary>
            <param name="httpRequest">The HTTP request containing the assertion by identifier request.</param>
            <returns>The assertion by identifier request.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLProfileException">
            Thrown when the receive fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Profiles.RequestAssertionByIdentifier.AssertionByIDResponder.SendSAMLResponseBySOAP(System.Web.HttpResponseBase,System.Xml.XmlElement)">
            <summary>
            Sends the SAML response over SOAP.
            </summary>
            <param name="httpResponse">The HTTP response used to send the SAML response.</param>
            <param name="samlResponse">The SAML response.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLProfileException">
            Thrown when the send fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Profiles.RequestAssertionByIdentifier.AssertionByIDResponder.SendSAMLResponseBySOAP(System.Web.HttpResponse,System.Xml.XmlElement)">
            <summary>
            Sends the SAML response over SOAP.
            </summary>
            <param name="httpResponse">The HTTP response used to send the SAML response.</param>
            <param name="samlResponse">The SAML response.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLProfileException">
            Thrown when the send fails.
            </exception>
        </member>
        <member name="T:ComponentSpace.SAML2.Profiles.SingleLogout.SingleLogoutService">
            <summary>
            Supports the single logout profile.
            </summary>
            <remarks>
            Refer to the Profiles for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Profiles.SingleLogout.SingleLogoutService.SendLogoutRequestByHTTPRedirect(System.Web.HttpResponseBase,System.String,System.Xml.XmlElement,System.String,System.Security.Cryptography.AsymmetricAlgorithm,System.String)">
            <summary>
            Sends the logout request using HTTP redirect.
            </summary>
            <param name="httpResponse">The HTTP response used to perform the redirect.</param>
            <param name="destinationURL">The destination URL.</param>
            <param name="logoutRequest">The logout request.</param>
            <param name="relayState">The relay state or <c>null</c> if none.</param>
            <param name="key">The key to generate the signature or <c>null</c> if no signature is to be generated.</param>
            <param name="signatureAlgorithm">The signature algorithm or <c>null</c> to default to http://www.w3.org/2001/04/xmldsig-more#rsa-sha256. </param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLProfileException">
            Thrown when the send fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Profiles.SingleLogout.SingleLogoutService.SendLogoutRequestByHTTPRedirect(System.Web.HttpResponse,System.String,System.Xml.XmlElement,System.String,System.Security.Cryptography.AsymmetricAlgorithm,System.String)">
            <summary>
            Sends the logout request using HTTP redirect.
            </summary>
            <param name="httpResponse">The HTTP response used to perform the redirect.</param>
            <param name="destinationURL">The destination URL.</param>
            <param name="logoutRequest">The logout request.</param>
            <param name="relayState">The relay state or <c>null</c> if none.</param>
            <param name="key">The key to generate the signature or <c>null</c> if no signature is to be generated.</param>
            <param name="signatureAlgorithm">The signature algorithm or <c>null</c> to default to http://www.w3.org/2001/04/xmldsig-more#rsa-sha256. </param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLProfileException">
            Thrown when the send fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Profiles.SingleLogout.SingleLogoutService.SendLogoutRequestByHTTPPost(System.Web.HttpResponseBase,System.String,System.Xml.XmlElement,System.String)">
            <summary>
            Sends the logout request using HTTP post.
            </summary>
            <param name="httpResponse">The HTTP response that will return the form to post.</param>
            <param name="destinationURL">The destination URL.</param>
            <param name="logoutRequest">The logout request.</param>
            <param name="relayState">The relay state or <c>null</c> if none.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLProfileException">
            Thrown when the send fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Profiles.SingleLogout.SingleLogoutService.SendLogoutRequestByHTTPPost(System.Web.HttpResponse,System.String,System.Xml.XmlElement,System.String)">
            <summary>
            Sends the logout request using HTTP post.
            </summary>
            <param name="httpResponse">The HTTP response that will return the form to post.</param>
            <param name="destinationURL">The destination URL.</param>
            <param name="logoutRequest">The logout request.</param>
            <param name="relayState">The relay state or <c>null</c> if none.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLProfileException">
            Thrown when the send fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Profiles.SingleLogout.SingleLogoutService.ReceiveLogoutRequestByHTTPRedirect(System.Web.HttpRequestBase,System.Xml.XmlElement@,System.String@,System.Boolean@,System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>
            Receives the logout request using HTTP redirect.
            </summary>
            <param name="httpRequest">The HTTP request containing the query string.</param>
            <param name="logoutRequest">The returned logout request.</param>
            <param name="relayState">The returned relay state or <c>null</c> if none.</param>
            <param name="signed">Indicates whether the SAML message is signed.</param>
            <param name="key">The key to verify the signature or <c>null</c> if no signature is to be verified.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLProfileException">
            Thrown when the receive fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Profiles.SingleLogout.SingleLogoutService.ReceiveLogoutRequestByHTTPRedirect(System.Web.HttpRequest,System.Xml.XmlElement@,System.String@,System.Boolean@,System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>
            Receives the logout request using HTTP redirect.
            </summary>
            <param name="httpRequest">The HTTP request containing the query string.</param>
            <param name="logoutRequest">The returned logout request.</param>
            <param name="relayState">The returned relay state or <c>null</c> if none.</param>
            <param name="signed">Indicates whether the SAML message is signed.</param>
            <param name="key">The key to verify the signature or <c>null</c> if no signature is to be verified.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLProfileException">
            Thrown when the receive fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Profiles.SingleLogout.SingleLogoutService.ReceiveLogoutRequestByHTTPPost(System.Web.HttpRequestBase,System.Xml.XmlElement@,System.String@)">
            <summary>
            Receives the logout request using HTTP post.
            </summary>
            <param name="httpRequest">The HTTP request containing the posted form.</param>
            <param name="logoutRequest">The returned logout request.</param>
            <param name="relayState">The returned relay state or <c>null</c> if none.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLProfileException">
            Thrown when the receive fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Profiles.SingleLogout.SingleLogoutService.ReceiveLogoutRequestByHTTPPost(System.Web.HttpRequest,System.Xml.XmlElement@,System.String@)">
            <summary>
            Receives the logout request using HTTP post.
            </summary>
            <param name="httpRequest">The HTTP request containing the posted form.</param>
            <param name="logoutRequest">The returned logout request.</param>
            <param name="relayState">The returned relay state or <c>null</c> if none.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLProfileException">
            Thrown when the receive fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Profiles.SingleLogout.SingleLogoutService.SendLogoutResponseByHTTPRedirect(System.Web.HttpResponseBase,System.String,System.Xml.XmlElement,System.String,System.Security.Cryptography.AsymmetricAlgorithm,System.String)">
            <summary>
            Sends the logout response using HTTP redirect.
            </summary>
            <param name="httpResponse">The HTTP response used to perform the redirect.</param>
            <param name="destinationURL">The destination URL.</param>
            <param name="logoutResponse">The logout response.</param>
            <param name="relayState">The relay state or <c>null</c> if none.</param>
            <param name="key">The key to generate the signature or <c>null</c> if no signature is to be generated.</param>
            <param name="signatureAlgorithm">The signature algorithm or <c>null</c> to default to http://www.w3.org/2001/04/xmldsig-more#rsa-sha256. </param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLProfileException">
            Thrown when the send fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Profiles.SingleLogout.SingleLogoutService.SendLogoutResponseByHTTPRedirect(System.Web.HttpResponse,System.String,System.Xml.XmlElement,System.String,System.Security.Cryptography.AsymmetricAlgorithm,System.String)">
            <summary>
            Sends the logout response using HTTP redirect.
            </summary>
            <param name="httpResponse">The HTTP response used to perform the redirect.</param>
            <param name="destinationURL">The destination URL.</param>
            <param name="logoutResponse">The logout response.</param>
            <param name="relayState">The relay state or <c>null</c> if none.</param>
            <param name="key">The key to generate the signature or <c>null</c> if no signature is to be generated.</param>
            <param name="signatureAlgorithm">The signature algorithm or <c>null</c> to default to http://www.w3.org/2001/04/xmldsig-more#rsa-sha256. </param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLProfileException">
            Thrown when the send fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Profiles.SingleLogout.SingleLogoutService.SendLogoutResponseByHTTPPost(System.Web.HttpResponseBase,System.String,System.Xml.XmlElement,System.String)">
            <summary>
            Sends the logout response using HTTP post.
            </summary>
            <param name="httpResponse">The HTTP response that will return the form to post.</param>
            <param name="destinationURL">The destination URL.</param>
            <param name="logoutResponse">The logout response.</param>
            <param name="relayState">The relay state or <c>null</c> if none.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLProfileException">
            Thrown when the send fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Profiles.SingleLogout.SingleLogoutService.SendLogoutResponseByHTTPPost(System.Web.HttpResponse,System.String,System.Xml.XmlElement,System.String)">
            <summary>
            Sends the logout response using HTTP post.
            </summary>
            <param name="httpResponse">The HTTP response that will return the form to post.</param>
            <param name="destinationURL">The destination URL.</param>
            <param name="logoutResponse">The logout response.</param>
            <param name="relayState">The relay state or <c>null</c> if none.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLProfileException">
            Thrown when the send fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Profiles.SingleLogout.SingleLogoutService.ReceiveLogoutResponseByHTTPRedirect(System.Web.HttpRequestBase,System.Xml.XmlElement@,System.String@,System.Boolean@,System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>
            Receives the logout response using HTTP redirect.
            </summary>
            <param name="httpRequest">The HTTP request containing the query string.</param>
            <param name="logoutResponse">The returned logout response.</param>
            <param name="relayState">The returned relay state or <c>null</c> if none.</param>
            <param name="signed">Indicates whether the SAML message is signed.</param>
            <param name="key">The key to verify the signature or <c>null</c> if no signature is to be verified.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLProfileException">
            Thrown when the receive fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Profiles.SingleLogout.SingleLogoutService.ReceiveLogoutResponseByHTTPRedirect(System.Web.HttpRequest,System.Xml.XmlElement@,System.String@,System.Boolean@,System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>
            Receives the logout response using HTTP redirect.
            </summary>
            <param name="httpRequest">The HTTP request containing the query string.</param>
            <param name="logoutResponse">The returned logout response.</param>
            <param name="relayState">The returned relay state or <c>null</c> if none.</param>
            <param name="signed">Indicates whether the SAML message is signed.</param>
            <param name="key">The key to verify the signature or <c>null</c> if no signature is to be verified.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLProfileException">
            Thrown when the receive fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Profiles.SingleLogout.SingleLogoutService.ReceiveLogoutResponseByHTTPPost(System.Web.HttpRequestBase,System.Xml.XmlElement@,System.String@)">
            <summary>
            Receives the logout response using HTTP post.
            </summary>
            <param name="httpRequest">The HTTP request containing the posted form.</param>
            <param name="logoutResponse">The returned logout response.</param>
            <param name="relayState">The returned relay state or <c>null</c> if none.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLProfileException">
            Thrown when the receive fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Profiles.SingleLogout.SingleLogoutService.ReceiveLogoutResponseByHTTPPost(System.Web.HttpRequest,System.Xml.XmlElement@,System.String@)">
            <summary>
            Receives the logout response using HTTP post.
            </summary>
            <param name="httpRequest">The HTTP request containing the posted form.</param>
            <param name="logoutResponse">The returned logout response.</param>
            <param name="relayState">The returned relay state or <c>null</c> if none.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLProfileException">
            Thrown when the receive fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Profiles.SingleLogout.SingleLogoutService.ReceiveLogoutMessageByHTTPRedirect(System.Web.HttpRequestBase,System.Xml.XmlElement@,System.String@,System.Boolean@,System.Boolean@,System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>
            Receives the logout request or response using HTTP redirect.
            </summary>
            <param name="httpRequest">The HTTP request containing the query string.</param>
            <param name="logoutMessage">The returned logout request or response.</param>
            <param name="relayState">The returned relay state or <c>null</c> if none.</param>
            <param name="isRequest"><c>true</c> if the message is a request; <c>false</c> if the message is a response.</param>
            <param name="signed">Indicates whether the SAML message is signed.</param>
            <param name="key">The key to verify the signature or <c>null</c> if no signature is to be verified.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLProfileException">
            Thrown when the receive fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Profiles.SingleLogout.SingleLogoutService.ReceiveLogoutMessageByHTTPRedirect(System.Web.HttpRequest,System.Xml.XmlElement@,System.String@,System.Boolean@,System.Boolean@,System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>
            Receives the logout request or response using HTTP redirect.
            </summary>
            <param name="httpRequest">The HTTP request containing the query string.</param>
            <param name="logoutMessage">The returned logout request or response.</param>
            <param name="relayState">The returned relay state or <c>null</c> if none.</param>
            <param name="isRequest"><c>true</c> if the message is a request; <c>false</c> if the message is a response.</param>
            <param name="signed">Indicates whether the SAML message is signed.</param>
            <param name="key">The key to verify the signature or <c>null</c> if no signature is to be verified.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLProfileException">
            Thrown when the receive fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Profiles.SingleLogout.SingleLogoutService.ReceiveLogoutMessageByHTTPPost(System.Web.HttpRequestBase,System.Xml.XmlElement@,System.String@,System.Boolean@)">
            <summary>
            Receives the logout request or response using HTTP post.
            </summary>
            <param name="httpRequest">The HTTP request containing the posted form.</param>
            <param name="logoutMessage">The returned logout request or response.</param>
            <param name="relayState">The returned relay state or <c>null</c> if none.</param>
            <param name="isRequest"><c>true</c> if the message is a request; <c>false</c> if the message is a response.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLProfileException">
            Thrown when the receive fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Profiles.SingleLogout.SingleLogoutService.ReceiveLogoutMessageByHTTPPost(System.Web.HttpRequest,System.Xml.XmlElement@,System.String@,System.Boolean@)">
            <summary>
            Receives the logout request or response using HTTP post.
            </summary>
            <param name="httpRequest">The HTTP request containing the posted form.</param>
            <param name="logoutMessage">The returned logout request or response.</param>
            <param name="relayState">The returned relay state or <c>null</c> if none.</param>
            <param name="isRequest"><c>true</c> if the message is a request; <c>false</c> if the message is a response.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLProfileException">
            Thrown when the receive fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Profiles.SingleLogout.SingleLogoutService.SendArtifactByHTTPArtifact(System.Web.HttpResponseBase,System.String,ComponentSpace.SAML2.Bindings.HTTPArtifact,System.String,System.Boolean)">
            <summary>
            Sends an artifact using the HTTP artifact binding.
            </summary>
            <param name="httpResponse">The HTTP response that will send the artifact.</param>
            <param name="destinationURL">The destination URL.</param>
            <param name="httpArtifact">The artifact.</param>
            <param name="relayState">The relay state or <c>null</c> if none.</param>
            <param name="sendArtifactInForm">If <c>true</c> the artifact is sent in a form; otherwise it's sent in a query string.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLProfileException">
            Thrown when the send fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Profiles.SingleLogout.SingleLogoutService.SendArtifactByHTTPArtifact(System.Web.HttpResponse,System.String,ComponentSpace.SAML2.Bindings.HTTPArtifact,System.String,System.Boolean)">
            <summary>
            Sends an artifact using the HTTP artifact binding.
            </summary>
            <param name="httpResponse">The HTTP response that will send the artifact.</param>
            <param name="destinationURL">The destination URL.</param>
            <param name="httpArtifact">The artifact.</param>
            <param name="relayState">The relay state or <c>null</c> if none.</param>
            <param name="sendArtifactInForm">If <c>true</c> the artifact is sent in a form; otherwise it's sent in a query string.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLProfileException">
            Thrown when the send fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Profiles.SingleLogout.SingleLogoutService.ReceiveArtifactByHTTPArtifact(System.Web.HttpRequestBase,System.Boolean,ComponentSpace.SAML2.Bindings.HTTPArtifact@,System.String@)">
            <summary>
            Receives the artifact using HTTP artifact with the artifact being in a form or query string.
            </summary>
            <param name="httpRequest">The HTTP request containing the artifact.</param>
            <param name="artifactInForm">If <c>true</c> the artifact is received in a form; otherwise it's received in a query string.</param>
            <param name="httpArtifact">The returned artifact.</param>
            <param name="relayState">The returned relay state or <c>null</c> if none.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLProfileException">
            Thrown when the receive fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Profiles.SingleLogout.SingleLogoutService.ReceiveArtifactByHTTPArtifact(System.Web.HttpRequest,System.Boolean,ComponentSpace.SAML2.Bindings.HTTPArtifact@,System.String@)">
            <summary>
            Receives the artifact using HTTP artifact with the artifact being in a form or query string.
            </summary>
            <param name="httpRequest">The HTTP request containing the artifact.</param>
            <param name="artifactInForm">If <c>true</c> the artifact is received in a form; otherwise it's received in a query string.</param>
            <param name="httpArtifact">The returned artifact.</param>
            <param name="relayState">The returned relay state or <c>null</c> if none.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLProfileException">
            Thrown when the receive fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Profiles.SingleLogout.SingleLogoutService.SendLogoutRequestReceiveLogoutResponseBySOAP(System.String,System.Xml.XmlElement)">
            <summary>
            Sends the logout request and receives a logout response over SOAP.
            </summary>
            <param name="destinationURL">The destination URL.</param>
            <param name="logoutRequest">The logout request.</param>
            <returns>The logout response.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLProfileException">
            Thrown when the send/receive fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Profiles.SingleLogout.SingleLogoutService.ReceiveLogoutRequestBySOAP(System.Web.HttpRequestBase)">
            <summary>
            Receives the logout request over SOAP.
            </summary>
            <param name="httpRequest">The HTTP request containing the logout request.</param>
            <returns>The logout request.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLProfileException">
            Thrown when the receive fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Profiles.SingleLogout.SingleLogoutService.ReceiveLogoutRequestBySOAP(System.Web.HttpRequest)">
            <summary>
            Receives the logout request over SOAP.
            </summary>
            <param name="httpRequest">The HTTP request containing the logout request.</param>
            <returns>The logout request.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLProfileException">
            Thrown when the receive fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Profiles.SingleLogout.SingleLogoutService.SendLogoutResponseBySOAP(System.Web.HttpResponseBase,System.Xml.XmlElement)">
            <summary>
            Sends the logout response over SOAP.
            </summary>
            <param name="httpResponse">The HTTP response used to send the logout response.</param>
            <param name="logoutResponse">The logout response.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLProfileException">
            Thrown when the send fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Profiles.SingleLogout.SingleLogoutService.SendLogoutResponseBySOAP(System.Web.HttpResponse,System.Xml.XmlElement)">
            <summary>
            Sends the logout response over SOAP.
            </summary>
            <param name="httpResponse">The HTTP response used to send the logout response.</param>
            <param name="logoutResponse">The logout response.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLProfileException">
            Thrown when the send fails.
            </exception>
        </member>
        <member name="T:ComponentSpace.SAML2.Profiles.SSOBrowser.IdentityProvider">
            <summary>
            Provides Identity Provider functionality in the SSO browser profile.
            </summary>
            <remarks>
            Refer to the Profiles for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Profiles.SSOBrowser.IdentityProvider.ReceiveAuthnRequestByHTTPRedirect(System.Web.HttpRequestBase,System.Xml.XmlElement@,System.String@,System.Boolean@,System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>
            Receives the authentication request from the SP using HTTP redirect.
            </summary>
            <param name="httpRequest">The HTTP request containing the query string.</param>
            <param name="authnRequest">The returned authentication request message</param>
            <param name="relayState">The returned relay state or <c>null</c> if none.</param>
            <param name="signed">Indicates whether the SAML request is signed.</param>
            <param name="key">The key to verify the signature or <c>null</c> if no signature is to be verified.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLProfileException">
            Thrown when the receive fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Profiles.SSOBrowser.IdentityProvider.ReceiveAuthnRequestByHTTPRedirect(System.Web.HttpRequest,System.Xml.XmlElement@,System.String@,System.Boolean@,System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>
            Receives the authentication request from the SP using HTTP redirect.
            </summary>
            <param name="httpRequest">The HTTP request containing the query string.</param>
            <param name="authnRequest">The returned authentication request message</param>
            <param name="relayState">The returned relay state or <c>null</c> if none.</param>
            <param name="signed">Indicates whether the SAML request is signed.</param>
            <param name="key">The key to verify the signature or <c>null</c> if no signature is to be verified.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLProfileException">
            Thrown when the receive fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Profiles.SSOBrowser.IdentityProvider.ReceiveAuthnRequestByHTTPPost(System.Web.HttpRequestBase,System.Xml.XmlElement@,System.String@)">
            <summary>
            Receives the authentication request from the SP using HTTP post.
            </summary>
            <param name="httpRequest">The HTTP request containing the posted form.</param>
            <param name="authnRequest">The returned authentication request message</param>
            <param name="relayState">The returned relay state or <c>null</c> if none.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLProfileException">
            Thrown when the receive fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Profiles.SSOBrowser.IdentityProvider.ReceiveAuthnRequestByHTTPPost(System.Web.HttpRequest,System.Xml.XmlElement@,System.String@)">
            <summary>
            Receives the authentication request from the SP using HTTP post.
            </summary>
            <param name="httpRequest">The HTTP request containing the posted form.</param>
            <param name="authnRequest">The returned authentication request message</param>
            <param name="relayState">The returned relay state or <c>null</c> if none.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLProfileException">
            Thrown when the receive fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Profiles.SSOBrowser.IdentityProvider.ReceiveArtifactByHTTPArtifact(System.Web.HttpRequestBase,System.Boolean,ComponentSpace.SAML2.Bindings.HTTPArtifact@,System.String@)">
            <summary>
            Receives the artifact from the SP using HTTP artifact with the artifact being in a form or query string.
            </summary>
            <param name="httpRequest">The HTTP request containing the artifact.</param>
            <param name="artifactInForm">If <c>true</c> the artifact is received in a form; otherwise it's received in a query string.</param>
            <param name="httpArtifact">The returned artifact.</param>
            <param name="relayState">The returned relay state or <c>null</c> if none.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLProfileException">
            Thrown when the receive fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Profiles.SSOBrowser.IdentityProvider.ReceiveArtifactByHTTPArtifact(System.Web.HttpRequest,System.Boolean,ComponentSpace.SAML2.Bindings.HTTPArtifact@,System.String@)">
            <summary>
            Receives the artifact from the SP using HTTP artifact with the artifact being in a form or query string.
            </summary>
            <param name="httpRequest">The HTTP request containing the artifact.</param>
            <param name="artifactInForm">If <c>true</c> the artifact is received in a form; otherwise it's received in a query string.</param>
            <param name="httpArtifact">The returned artifact.</param>
            <param name="relayState">The returned relay state or <c>null</c> if none.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLProfileException">
            Thrown when the receive fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Profiles.SSOBrowser.IdentityProvider.SendSAMLResponseByHTTPPost(System.Web.HttpResponseBase,System.String,System.Xml.XmlElement,System.String)">
            <summary>
            Sends the SAML response to the SP using HTTP post.
            </summary>
            <param name="httpResponse">The HTTP response that will return the form to post.</param>
            <param name="spURL">The SP URL.</param>
            <param name="samlResponse">The SAML response.</param>
            <param name="relayState">The relay state or <c>null</c> if none.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLProfileException">
            Thrown when the send fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Profiles.SSOBrowser.IdentityProvider.SendSAMLResponseByHTTPPost(System.Web.HttpResponse,System.String,System.Xml.XmlElement,System.String)">
            <summary>
            Sends the SAML response to the SP using HTTP post.
            </summary>
            <param name="httpResponse">The HTTP response that will return the form to post.</param>
            <param name="spURL">The SP URL.</param>
            <param name="samlResponse">The SAML response.</param>
            <param name="relayState">The relay state or <c>null</c> if none.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLProfileException">
            Thrown when the send fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Profiles.SSOBrowser.IdentityProvider.SendArtifactByHTTPArtifact(System.Web.HttpResponseBase,System.String,ComponentSpace.SAML2.Bindings.HTTPArtifact,System.String,System.Boolean)">
            <summary>
            Sends an artifact to the SP using the HTTP artifact binding.
            </summary>
            <param name="httpResponse">The HTTP response that will send the artifact.</param>
            <param name="spURL">The SP URL.</param>
            <param name="httpArtifact">The artifact.</param>
            <param name="relayState">The relay state or <c>null</c> if none.</param>
            <param name="sendArtifactInForm">If <c>true</c> the artifact is sent in a form; otherwise it's sent in a query string.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLProfileException">
            Thrown when the send fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Profiles.SSOBrowser.IdentityProvider.SendArtifactByHTTPArtifact(System.Web.HttpResponse,System.String,ComponentSpace.SAML2.Bindings.HTTPArtifact,System.String,System.Boolean)">
            <summary>
            Sends an artifact to the SP using the HTTP artifact binding.
            </summary>
            <param name="httpResponse">The HTTP response that will send the artifact.</param>
            <param name="spURL">The SP URL.</param>
            <param name="httpArtifact">The artifact.</param>
            <param name="relayState">The relay state or <c>null</c> if none.</param>
            <param name="sendArtifactInForm">If <c>true</c> the artifact is sent in a form; otherwise it's sent in a query string.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLProfileException">
            Thrown when the send fails.
            </exception>
        </member>
        <member name="T:ComponentSpace.SAML2.Profiles.SSOBrowser.ServiceProvider">
            <summary>
            Provides Service Provider functionality in the SSO browser profile.
            </summary>
            <remarks>
            Refer to the Profiles for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Profiles.SSOBrowser.ServiceProvider.SendAuthnRequestByHTTPRedirect(System.Web.HttpResponseBase,System.String,System.Xml.XmlElement,System.String,System.Security.Cryptography.AsymmetricAlgorithm,System.String)">
            <summary>
            Sends the authentication request to the IdP using HTTP redirect.
            </summary>
            <param name="httpResponse">The HTTP response used to perform the redirect.</param>
            <param name="idpURL">The IdP URL.</param>
            <param name="authnRequest">The authentication request.</param>
            <param name="relayState">The relay state or <c>null</c> if none.</param>
            <param name="key">The key to generate the signature or <c>null</c> if no signature is to be generated.</param>
            <param name="signatureAlgorithm">The signature algorithm or <c>null</c> to default to http://www.w3.org/2001/04/xmldsig-more#rsa-sha256. </param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLProfileException">
            Thrown when the send fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Profiles.SSOBrowser.ServiceProvider.SendAuthnRequestByHTTPRedirect(System.Web.HttpResponse,System.String,System.Xml.XmlElement,System.String,System.Security.Cryptography.AsymmetricAlgorithm,System.String)">
            <summary>
            Sends the authentication request to the IdP using HTTP redirect.
            </summary>
            <param name="httpResponse">The HTTP response used to perform the redirect.</param>
            <param name="idpURL">The IdP URL.</param>
            <param name="authnRequest">The authentication request.</param>
            <param name="relayState">The relay state or <c>null</c> if none.</param>
            <param name="key">The key to generate the signature or <c>null</c> if no signature is to be generated.</param>
            <param name="signatureAlgorithm">The signature algorithm or <c>null</c> to default to http://www.w3.org/2001/04/xmldsig-more#rsa-sha256. </param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLProfileException">
            Thrown when the send fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Profiles.SSOBrowser.ServiceProvider.SendAuthnRequestByHTTPRedirect(System.Web.HttpResponseBase,System.String,System.Xml.XmlElement,System.String,System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>
            Sends the authentication request to the IdP using HTTP redirect.
            </summary>
            <param name="httpResponse">The HTTP response used to perform the redirect.</param>
            <param name="idpURL">The IdP URL.</param>
            <param name="authnRequest">The authentication request.</param>
            <param name="relayState">The relay state or <c>null</c> if none.</param>
            <param name="key">The key to generate the signature or <c>null</c> if no signature is to be generated.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLProfileException">
            Thrown when the send fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Profiles.SSOBrowser.ServiceProvider.SendAuthnRequestByHTTPRedirect(System.Web.HttpResponse,System.String,System.Xml.XmlElement,System.String,System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>
            Sends the authentication request to the IdP using HTTP redirect.
            </summary>
            <param name="httpResponse">The HTTP response used to perform the redirect.</param>
            <param name="idpURL">The IdP URL.</param>
            <param name="authnRequest">The authentication request.</param>
            <param name="relayState">The relay state or <c>null</c> if none.</param>
            <param name="key">The key to generate the signature or <c>null</c> if no signature is to be generated.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLProfileException">
            Thrown when the send fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Profiles.SSOBrowser.ServiceProvider.SendAuthnRequestByHTTPPost(System.Web.HttpResponseBase,System.String,System.Xml.XmlElement,System.String)">
            <summary>
            Sends the authentication request to the IdP using HTTP post.
            </summary>
            <param name="httpResponse">The HTTP response that will return the form to post.</param>
            <param name="idpURL">The IdP URL.</param>
            <param name="authnRequest">The authentication request.</param>
            <param name="relayState">The relay state or <c>null</c> if none.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLProfileException">
            Thrown when the send fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Profiles.SSOBrowser.ServiceProvider.SendAuthnRequestByHTTPPost(System.Web.HttpResponse,System.String,System.Xml.XmlElement,System.String)">
            <summary>
            Sends the authentication request to the IdP using HTTP post.
            </summary>
            <param name="httpResponse">The HTTP response that will return the form to post.</param>
            <param name="idpURL">The IdP URL.</param>
            <param name="authnRequest">The authentication request.</param>
            <param name="relayState">The relay state or <c>null</c> if none.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLProfileException">
            Thrown when the send fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Profiles.SSOBrowser.ServiceProvider.SendArtifactByHTTPArtifact(System.Web.HttpResponseBase,System.String,ComponentSpace.SAML2.Bindings.HTTPArtifact,System.String,System.Boolean)">
            <summary>
            Sends an artifact to the IdP using the HTTP artifact binding.
            </summary>
            <param name="httpResponse">The HTTP response that will send the artifact.</param>
            <param name="idpURL">The IdP URL.</param>
            <param name="httpArtifact">The artifact.</param>
            <param name="relayState">The relay state or <c>null</c> if none.</param>
            <param name="sendArtifactInForm">If <c>true</c> the artifact is sent in a form; otherwise it's sent in a query string.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLProfileException">
            Thrown when the send fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Profiles.SSOBrowser.ServiceProvider.SendArtifactByHTTPArtifact(System.Web.HttpResponse,System.String,ComponentSpace.SAML2.Bindings.HTTPArtifact,System.String,System.Boolean)">
            <summary>
            Sends an artifact to the IdP using the HTTP artifact binding.
            </summary>
            <param name="httpResponse">The HTTP response that will send the artifact.</param>
            <param name="idpURL">The IdP URL.</param>
            <param name="httpArtifact">The artifact.</param>
            <param name="relayState">The relay state or <c>null</c> if none.</param>
            <param name="sendArtifactInForm">If <c>true</c> the artifact is sent in a form; otherwise it's sent in a query string.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLProfileException">
            Thrown when the send fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Profiles.SSOBrowser.ServiceProvider.ReceiveSAMLResponseByHTTPPost(System.Web.HttpRequestBase,System.Xml.XmlElement@,System.String@)">
            <summary>
            Receives the SAML response from the IdP using HTTP post.
            </summary>
            <param name="httpRequest">The HTTP request containing the posted form.</param>
            <param name="samlResponse">The returned SAML response message</param>
            <param name="relayState">The returned relay state or <c>null</c> if none.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLProfileException">
            Thrown when the receive fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Profiles.SSOBrowser.ServiceProvider.ReceiveSAMLResponseByHTTPPost(System.Web.HttpRequest,System.Xml.XmlElement@,System.String@)">
            <summary>
            Receives the SAML response from the IdP using HTTP post.
            </summary>
            <param name="httpRequest">The HTTP request containing the posted form.</param>
            <param name="samlResponse">The returned SAML response message</param>
            <param name="relayState">The returned relay state or <c>null</c> if none.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLProfileException">
            Thrown when the receive fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Profiles.SSOBrowser.ServiceProvider.ReceiveArtifactByHTTPArtifact(System.Web.HttpRequestBase,System.Boolean,ComponentSpace.SAML2.Bindings.HTTPArtifact@,System.String@)">
            <summary>
            Receives the artifact from the IdP using HTTP artifact with the artifact being in a form or query string.
            </summary>
            <param name="httpRequest">The HTTP request containing the artifact.</param>
            <param name="artifactInForm">If <c>true</c> the artifact is received in a form; otherwise it's received in a query string.</param>
            <param name="httpArtifact">The returned artifact.</param>
            <param name="relayState">The returned relay state or <c>null</c> if none.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLProfileException">
            Thrown when the receive fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Profiles.SSOBrowser.ServiceProvider.ReceiveArtifactByHTTPArtifact(System.Web.HttpRequest,System.Boolean,ComponentSpace.SAML2.Bindings.HTTPArtifact@,System.String@)">
            <summary>
            Receives the artifact from the IdP using HTTP artifact with the artifact being in a form or query string.
            </summary>
            <param name="httpRequest">The HTTP request containing the artifact.</param>
            <param name="artifactInForm">If <c>true</c> the artifact is received in a form; otherwise it's received in a query string.</param>
            <param name="httpArtifact">The returned artifact.</param>
            <param name="relayState">The returned relay state or <c>null</c> if none.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLProfileException">
            Thrown when the receive fails.
            </exception>
        </member>
        <member name="T:ComponentSpace.SAML2.Protocols.Artifact">
            <summary>
            Represents an artifact.
            </summary>
            <remarks>
            Refer to the Assertions and Protocol for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.Artifact.IsValid(System.Xml.XmlElement)">
            <summary>
            Indicates whether the XML is an artifact.
            </summary>
            <param name="xmlElement">The XML to test.</param>
            <returns><c>true</c> if the XML is an artifact; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.Artifact.#ctor">
            <summary>
            Initializes a new instance of the <c>Artifact</c> class.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.Artifact.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>Artifact</c> class.
            </summary>
            <param name="artifactValue">The artifact value.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.Artifact.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <c>Artifact</c> class from XML.
            </summary>
            <param name="xmlElement">The artifact XML.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentSpace.SAML2.Protocols.Artifact.ArtifactValue">
            <summary>
            Gets or sets the artifact value. 
            </summary>
            <value>
            The artifact value.
            </value>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.Artifact.ToXml(System.Xml.XmlDocument)">
            <summary>
            Serializes the artifact to XML.
            </summary>
            <param name="xmlDocument">The owning XML document.</param>
            <returns>The artifact as XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.Artifact.ToString">
            <summary>
            Returns the artifact value.
            </summary>
            <returns>The artifact value</returns>
        </member>
        <member name="T:ComponentSpace.SAML2.Protocols.ArtifactResolve">
            <summary>
            Represents an artifact resolve request.
            </summary>
            <remarks>
            Refer to the Assertions and Protocol for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.ArtifactResolve.IsValid(System.Xml.XmlElement)">
            <summary>
            Indicates whether the XML is an artifact resolve request.
            </summary>
            <param name="xmlElement">The XML to test.</param>
            <returns><c>true</c> if the XML is an artifact resolve request; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.ArtifactResolve.#ctor">
            <summary>
            Initializes a new instance of the <c>ArtifactResolve</c> class.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.ArtifactResolve.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <c>ArtifactResolve</c> class from XML.
            </summary>
            <param name="xmlElement">The artifact resolve request XML.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentSpace.SAML2.Protocols.ArtifactResolve.Artifact">
            <summary>
            Gets or sets the artifact. 
            </summary>
            <value>
            The artifact.
            </value>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.ArtifactResolve.ToXml">
            <summary>
            Serializes the artifact resolve request to XML.
            </summary>
            <remarks>
            An XML document is created.
            </remarks>
            <returns>The artifact resolve request as XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.ArtifactResolve.ToXml(System.Xml.XmlDocument)">
            <summary>
            Serializes the artifact resolve request to XML.
            </summary>
            <param name="xmlDocument">The owning XML document.</param>
            <returns>The artifact resolve request as XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.ArtifactResolve.ToString">
            <summary>
            Converts the artifact resolve request to a string.
            </summary>
            <returns>The artifact resolve request as a string.</returns>
        </member>
        <member name="T:ComponentSpace.SAML2.Protocols.ArtifactResponse">
            <summary>
            Represents an artifact response.
            </summary>
            <remarks>
            Refer to the Assertions and Protocol for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.ArtifactResponse.IsValid(System.Xml.XmlElement)">
            <summary>
            Indicates whether the XML is an artifact response.
            </summary>
            <param name="xmlElement">The XML to test.</param>
            <returns><c>true</c> if the XML is an artifact response; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.ArtifactResponse.#ctor">
            <summary>
            Initializes a new instance of the <c>ArtifactResponse</c> class.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.ArtifactResponse.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <c>ArtifactResponse</c> class from XML.
            </summary>
            <param name="xmlElement">The artifact response XML.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentSpace.SAML2.Protocols.ArtifactResponse.SAMLMessage">
            <summary>
            Gets or sets the SAML message. 
            </summary>
            <value>
            The SAML message or <c>null</c> if none.
            </value>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.ArtifactResponse.ToXml">
            <summary>
            Serializes the artifact response to XML.
            </summary>
            <remarks>
            An XML document is created.
            </remarks>
            <returns>The artifact response as XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.ArtifactResponse.ToXml(System.Xml.XmlDocument)">
            <summary>
            Serializes the artifact response to XML.
            </summary>
            <param name="xmlDocument">The owning XML document.</param>
            <returns>The artifact response as XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.ArtifactResponse.ToString">
            <summary>
            Converts the artifact response to a string.
            </summary>
            <returns>The artifact response as a string.</returns>
        </member>
        <member name="T:ComponentSpace.SAML2.Protocols.AssertionIDRequest">
            <summary>
            Represents an assertion ID request.
            </summary>
            <remarks>
            Refer to the Assertions and Protocol for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.AssertionIDRequest.IsValid(System.Xml.XmlElement)">
            <summary>
            Indicates whether the XML is an assertion ID request.
            </summary>
            <param name="xmlElement">The XML to test.</param>
            <returns><c>true</c> if the XML is an assertion ID request; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.AssertionIDRequest.#ctor">
            <summary>
            Initializes a new instance of the <c>AssertionIDRequest</c> class.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.AssertionIDRequest.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <c>AssertionIDRequest</c> class from XML.
            </summary>
            <param name="xmlElement">The assertion ID request XML.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentSpace.SAML2.Protocols.AssertionIDRequest.AssertionIDRefs">
            <summary>
            Gets or sets the assertion ID refs. 
            </summary>
            <value>
            The assertion ID refs.
            </value>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.AssertionIDRequest.ToXml">
            <summary>
            Serializes the assertion ID request to XML.
            </summary>
            <remarks>
            An XML document is created.
            </remarks>
            <returns>The assertion ID request as XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.AssertionIDRequest.ToXml(System.Xml.XmlDocument)">
            <summary>
            Serializes the assertion ID request to XML.
            </summary>
            <param name="xmlDocument">The owning XML document.</param>
            <returns>The assertion ID request as XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.AssertionIDRequest.ToString">
            <summary>
            Converts the assertion ID request to a string.
            </summary>
            <returns>The assertion ID request as a string.</returns>
        </member>
        <member name="T:ComponentSpace.SAML2.Protocols.AttributeQuery">
            <summary>
            Represents an attribute query.
            </summary>
            <remarks>
            Refer to the Assertions and Protocol for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.AttributeQuery.IsValid(System.Xml.XmlElement)">
            <summary>
            Indicates whether the XML is an attribute query.
            </summary>
            <param name="xmlElement">The XML to test.</param>
            <returns><c>true</c> if the XML is an attribute query; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.AttributeQuery.#ctor">
            <summary>
            Initializes a new instance of the <c>AttributeQuery</c> class.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.AttributeQuery.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <c>AttributeQuery</c> class from XML.
            </summary>
            <param name="xmlElement">The attribute query XML.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentSpace.SAML2.Protocols.AttributeQuery.Attributes">
            <summary>
            Gets or sets the attributes. 
            </summary>
            <value>
            The attributes.
            </value>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.AttributeQuery.ToXml">
            <summary>
            Serializes the attribute query to XML.
            </summary>
            <remarks>
            An XML document is created.
            </remarks>
            <returns>The attribute query as XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.AttributeQuery.ToXml(System.Xml.XmlDocument)">
            <summary>
            Serializes the attribute query to XML.
            </summary>
            <param name="xmlDocument">The owning XML document.</param>
            <returns>The attribute query as XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.AttributeQuery.ToString">
            <summary>
            Converts the attribute query to a string.
            </summary>
            <returns>The attribute query as a string.</returns>
        </member>
        <member name="T:ComponentSpace.SAML2.Protocols.AuthnQuery">
            <summary>
            Represents an authentication query.
            </summary>
            <remarks>
            Refer to the Assertions and Protocol for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.AuthnQuery.IsValid(System.Xml.XmlElement)">
            <summary>
            Indicates whether the XML is an authentication query.
            </summary>
            <param name="xmlElement">The XML to test.</param>
            <returns><c>true</c> if the XML is an authentication query; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.AuthnQuery.#ctor">
            <summary>
            Initializes a new instance of the <c>AuthnQuery</c> class.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.AuthnQuery.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <c>AuthnQuery</c> class from XML.
            </summary>
            <param name="xmlElement">The authentication query XML.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentSpace.SAML2.Protocols.AuthnQuery.SessionIndex">
            <summary>
            Gets or sets the session index. 
            </summary>
            <value>
            The session index.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Protocols.AuthnQuery.RequestedAuthnContext">
            <summary>
            Gets or sets the requested authentication context. 
            </summary>
            <value>
            The session index.
            </value>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.AuthnQuery.ToXml">
            <summary>
            Serializes the authentication query to XML.
            </summary>
            <remarks>
            An XML document is created.
            </remarks>
            <returns>The authentication query as XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.AuthnQuery.ToXml(System.Xml.XmlDocument)">
            <summary>
            Serializes the authentication query to XML.
            </summary>
            <param name="xmlDocument">The owning XML document.</param>
            <returns>The authentication query as XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.AuthnQuery.ToString">
            <summary>
            Converts the authentication query to a string.
            </summary>
            <returns>The authentication query as a string.</returns>
        </member>
        <member name="T:ComponentSpace.SAML2.Protocols.AuthnRequest">
            <summary>
            Represents an authentication request.
            </summary>
            <remarks>
            Refer to the Assertions and Protocol for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.AuthnRequest.IsValid(System.Xml.XmlElement)">
            <summary>
            Indicates whether the XML is an authentication request.
            </summary>
            <param name="xmlElement">The XML to test.</param>
            <returns><c>true</c> if the XML is an authentication request; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.AuthnRequest.#ctor">
            <summary>
            Initializes a new instance of the <c>AuthnRequest</c> class.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.AuthnRequest.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <c>AuthnRequest</c> class from XML.
            </summary>
            <param name="xmlElement">The authentication request XML.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentSpace.SAML2.Protocols.AuthnRequest.ForceAuthn">
            <summary>
            Gets or sets the force authentication flag. 
            </summary>
            <value>
            The force authentication flag.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Protocols.AuthnRequest.IsPassive">
            <summary>
            Gets or sets the is passive flag. 
            </summary>
            <value>
            The is passive flag.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Protocols.AuthnRequest.ProtocolBinding">
            <summary>
            Gets or sets the protocol binding. 
            </summary>
            <value>
            The protocol binding.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Protocols.AuthnRequest.AssertionConsumerServiceIndex">
            <summary>
            Gets or sets the assertion consumer service index. 
            </summary>
            <value>
            The assertion consumer service index or negative if none.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Protocols.AuthnRequest.AssertionConsumerServiceURL">
            <summary>
            Gets or sets the assertion consumer service URL. 
            </summary>
            <value>
            The assertion consumer service URL.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Protocols.AuthnRequest.AttributeConsumingServiceIndex">
            <summary>
            Gets or sets the attribute consuming service index. 
            </summary>
            <value>
            The attribute consuming service index or negative if none.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Protocols.AuthnRequest.ProviderName">
            <summary>
            Gets or sets the provider name. 
            </summary>
            <value>
            The provider name.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Protocols.AuthnRequest.Subject">
            <summary>
            Gets or sets the subject. 
            </summary>
            <value>
            The subject.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Protocols.AuthnRequest.NameIDPolicy">
            <summary>
            Gets or sets the name ID policy. 
            </summary>
            <value>
            The name ID policy.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Protocols.AuthnRequest.Conditions">
            <summary>
            Gets or sets the conditions. 
            </summary>
            <value>
            The conditions.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Protocols.AuthnRequest.RequestedAuthnContext">
            <summary>
            Gets or sets the requested authentication context. 
            </summary>
            <value>
            The requested authentication context.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Protocols.AuthnRequest.Scoping">
            <summary>
            Gets or sets the scoping. 
            </summary>
            <value>
            The scoping.
            </value>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.AuthnRequest.ToXml">
            <summary>
            Serializes the authentication request to XML.
            </summary>
            <remarks>
            An XML document is created.
            </remarks>
            <returns>The authentication request as XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.AuthnRequest.ToXml(System.Xml.XmlDocument)">
            <summary>
            Serializes the authentication request to XML.
            </summary>
            <param name="xmlDocument">The owning XML document.</param>
            <returns>The authentication request as XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.AuthnRequest.ToString">
            <summary>
            Converts the authentication request to a string.
            </summary>
            <returns>The authentication request as a string.</returns>
        </member>
        <member name="T:ComponentSpace.SAML2.Protocols.AuthzDecisionQuery">
            <summary>
            Represents an authorization decision query.
            </summary>
            <remarks>
            Refer to the Assertions and Protocol for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.AuthzDecisionQuery.IsValid(System.Xml.XmlElement)">
            <summary>
            Indicates whether the XML is an authorization decision query.
            </summary>
            <param name="xmlElement">The XML to test.</param>
            <returns><c>true</c> if the XML is an authorization decision query; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.AuthzDecisionQuery.#ctor">
            <summary>
            Initializes a new instance of the <c>AuthzDecisionQuery</c> class.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.AuthzDecisionQuery.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <c>AuthzDecisionQuery</c> class from XML.
            </summary>
            <param name="xmlElement">The authorization decision query XML.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentSpace.SAML2.Protocols.AuthzDecisionQuery.Resource">
            <summary>
            Gets or sets the resource. 
            </summary>
            <value>
            The resource.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Protocols.AuthzDecisionQuery.Actions">
            <summary>
            Gets or sets the actions. 
            </summary>
            <value>
            The actions.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Protocols.AuthzDecisionQuery.Evidence">
            <summary>
            Gets or sets the evidence. 
            </summary>
            <value>
            The evidence.
            </value>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.AuthzDecisionQuery.ToXml">
            <summary>
            Serializes the authorization decision query to XML.
            </summary>
            <remarks>
            An XML document is created.
            </remarks>
            <returns>The authorization decision query as XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.AuthzDecisionQuery.ToXml(System.Xml.XmlDocument)">
            <summary>
            Serializes the authorization decision query to XML.
            </summary>
            <param name="xmlDocument">The owning XML document.</param>
            <returns>The authorization decision query as XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.AuthzDecisionQuery.ToString">
            <summary>
            Converts the authorization decision query to a string.
            </summary>
            <returns>The authorization decision query as a string.</returns>
        </member>
        <member name="T:ComponentSpace.SAML2.Protocols.Extensions">
            <summary>
            Represents extensions.
            </summary>
            <remarks>
            Refer to the Assertions and Protocol for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.Extensions.IsValid(System.Xml.XmlElement)">
            <summary>
            Indicates whether the XML is an extensions.
            </summary>
            <param name="xmlElement">The XML to test.</param>
            <returns><c>true</c> if the XML is an extensions; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.Extensions.#ctor">
            <summary>
            Initializes a new instance of the <c>Extensions</c> class.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.Extensions.#ctor(System.Xml.XmlNodeList)">
            <summary>
            Initializes a new instance of the <c>Extensions</c> class.
            </summary>
            <param name="data">The extensions data.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.Extensions.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <c>Extensions</c> class from XML.
            </summary>
            <param name="xmlElement">The extensions element XML.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentSpace.SAML2.Protocols.Extensions.Data">
            <summary>
            Gets or sets the data. 
            </summary>
            <value>
            The data.
            </value>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.Extensions.ToXml(System.Xml.XmlDocument)">
            <summary>
            Serializes the extensions to XML.
            </summary>
            <param name="xmlDocument">The owning XML document.</param>
            <returns>The extensions as XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="T:ComponentSpace.SAML2.Protocols.GetComplete">
            <summary>
            Represents a get complete URI.
            </summary>
            <remarks>
            Refer to the Assertions and Protocol for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.GetComplete.IsValid(System.Xml.XmlElement)">
            <summary>
            Indicates whether the XML is a get complete URI.
            </summary>
            <param name="xmlElement">The XML to test.</param>
            <returns><c>true</c> if the XML is a get complete URI; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.GetComplete.#ctor">
            <summary>
            Initializes a new instance of the <c>GetComplete</c> class.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.GetComplete.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>GetComplete</c> class.
            </summary>
            <param name="uri">The URI.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.GetComplete.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <c>GetComplete</c> class from XML.
            </summary>
            <param name="xmlElement">The get complete URI XML.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentSpace.SAML2.Protocols.GetComplete.URI">
            <summary>
            Gets or sets the URI. 
            </summary>
            <value>
            The URI.
            </value>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.GetComplete.ToXml(System.Xml.XmlDocument)">
            <summary>
            Serializes the get complete URI to XML.
            </summary>
            <param name="xmlDocument">The owning XML document.</param>
            <returns>The get complete URI as XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.GetComplete.ToString">
            <summary>
            Returns the URI.
            </summary>
            <returns>The URI</returns>
        </member>
        <member name="T:ComponentSpace.SAML2.Protocols.IDPEntry">
            <summary>
            Represents an IDP entry.
            </summary>
            <remarks>
            Refer to the Assertions and Protocol for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.IDPEntry.IsValid(System.Xml.XmlElement)">
            <summary>
            Indicates whether the XML is an IDP entry.
            </summary>
            <param name="xmlElement">The XML to test.</param>
            <returns><c>true</c> if the XML is an IDP entry; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.IDPEntry.#ctor">
            <summary>
            Initializes a new instance of the <c>IDPEntry</c> class.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.IDPEntry.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <c>IDPEntry</c> class from XML.
            </summary>
            <param name="xmlElement">The IDP entry XML.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentSpace.SAML2.Protocols.IDPEntry.ProviderID">
            <summary>
            Gets or sets the provider ID. 
            </summary>
            <value>
            The provider ID.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Protocols.IDPEntry.Name">
            <summary>
            Gets or sets the name. 
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Protocols.IDPEntry.Location">
            <summary>
            Gets or sets the location. 
            </summary>
            <value>
            The location.
            </value>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.IDPEntry.ToXml(System.Xml.XmlDocument)">
            <summary>
            Serializes the IDP entry to XML.
            </summary>
            <param name="xmlDocument">The owning XML document.</param>
            <returns>The IDP entry as XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="T:ComponentSpace.SAML2.Protocols.IDPList">
            <summary>
            Represents an IDP list.
            </summary>
            <remarks>
            Refer to the Assertions and Protocol for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.IDPList.IsValid(System.Xml.XmlElement)">
            <summary>
            Indicates whether the XML is an IDP list.
            </summary>
            <param name="xmlElement">The XML to test.</param>
            <returns><c>true</c> if the XML is an IDP list; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.IDPList.#ctor">
            <summary>
            Initializes a new instance of the <c>IDPList</c> class.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.IDPList.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <c>IDPList</c> class from XML.
            </summary>
            <param name="xmlElement">The IDP list XML.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentSpace.SAML2.Protocols.IDPList.IDPEntries">
            <summary>
            Gets or sets the IDP entries. 
            </summary>
            <value>
            The IDP entries.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Protocols.IDPList.GetComplete">
            <summary>
            Gets or sets the get complete URI.
            </summary>
            <value>
            The get complete URI.
            </value>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.IDPList.ToXml(System.Xml.XmlDocument)">
            <summary>
            Serializes the IDP list to XML.
            </summary>
            <param name="xmlDocument">The owning XML document.</param>
            <returns>The IDP list as XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="T:ComponentSpace.SAML2.Protocols.LogoutRequest">
            <summary>
            Represents a logout request.
            </summary>
            <remarks>
            Refer to the Assertions and Protocol for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.LogoutRequest.IsValid(System.Xml.XmlElement)">
            <summary>
            Indicates whether the XML is a logout request.
            </summary>
            <param name="xmlElement">The XML to test.</param>
            <returns><c>true</c> if the XML is a logout request; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.LogoutRequest.#ctor">
            <summary>
            Initializes a new instance of the <c>LogoutRequest</c> class.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.LogoutRequest.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <c>LogoutRequest</c> class from XML.
            </summary>
            <param name="xmlElement">The logout request XML.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentSpace.SAML2.Protocols.LogoutRequest.Reason">
            <summary>
            Gets or sets the reason. 
            </summary>
            <value>
            The reason.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Protocols.LogoutRequest.NotOnOrAfter">
            <summary>
            Gets or sets the not on or after time. 
            </summary>
            <value>
            The not on or after time as coordinated universal time (UTC). 
            A value of DateTime.MaxValue indicates the value has not been set.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Protocols.LogoutRequest.BaseID">
            <summary>
            Gets or sets the base ID. 
            </summary>
            <value>
            The base ID.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Protocols.LogoutRequest.NameID">
            <summary>
            Gets or sets the name ID. 
            </summary>
            <value>
            The name ID.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Protocols.LogoutRequest.EncryptedID">
            <summary>
            Gets or sets the encrypted ID. 
            </summary>
            <value>
            The encrypted ID.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Protocols.LogoutRequest.SessionIndexes">
            <summary>
            Gets or sets the session indexes. 
            </summary>
            <value>
            The session indexes.
            </value>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.LogoutRequest.ToXml">
            <summary>
            Serializes the logout request to XML.
            </summary>
            <remarks>
            An XML document is created.
            </remarks>
            <returns>The logout request as XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.LogoutRequest.ToXml(System.Xml.XmlDocument)">
            <summary>
            Serializes the logout request to XML.
            </summary>
            <param name="xmlDocument">The owning XML document.</param>
            <returns>The logout request as XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.LogoutRequest.ToString">
            <summary>
            Converts the logout request to a string.
            </summary>
            <returns>The logout request as a string.</returns>
        </member>
        <member name="T:ComponentSpace.SAML2.Protocols.LogoutResponse">
            <summary>
            Represents a logout response.
            </summary>
            <remarks>
            Refer to the Assertions and Protocol for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.LogoutResponse.IsValid(System.Xml.XmlElement)">
            <summary>
            Indicates whether the XML is a logout response.
            </summary>
            <param name="xmlElement">The XML to test.</param>
            <returns><c>true</c> if the XML is a logout response; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.LogoutResponse.#ctor">
            <summary>
            Initializes a new instance of the <c>LogoutResponse</c> class.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.LogoutResponse.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <c>LogoutResponse</c> class from XML.
            </summary>
            <param name="xmlElement">The logout response XML.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.LogoutResponse.ToXml">
            <summary>
            Serializes the logout response to XML.
            </summary>
            <remarks>
            An XML document is created.
            </remarks>
            <returns>The logout response as XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.LogoutResponse.ToXml(System.Xml.XmlDocument)">
            <summary>
            Serializes the logout response to XML.
            </summary>
            <param name="xmlDocument">The owning XML document.</param>
            <returns>The logout response as XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.LogoutResponse.ToString">
            <summary>
            Converts the logout response to a string.
            </summary>
            <returns>The logout response as a string.</returns>
        </member>
        <member name="T:ComponentSpace.SAML2.Protocols.ManageNameIDRequest">
            <summary>
            Represents a manage name ID request.
            </summary>
            <remarks>
            Refer to the Assertions and Protocol for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.ManageNameIDRequest.IsValid(System.Xml.XmlElement)">
            <summary>
            Indicates whether the XML is a manage name ID request.
            </summary>
            <param name="xmlElement">The XML to test.</param>
            <returns><c>true</c> if the XML is a manage name ID request; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.ManageNameIDRequest.#ctor">
            <summary>
            Initializes a new instance of the <c>ManageNameIDRequest</c> class.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.ManageNameIDRequest.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <c>ManageNameIDRequest</c> class from XML.
            </summary>
            <param name="xmlElement">The manage name ID request XML.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentSpace.SAML2.Protocols.ManageNameIDRequest.NameID">
            <summary>
            Gets or sets the name ID. 
            </summary>
            <value>
            The name ID.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Protocols.ManageNameIDRequest.EncryptedID">
            <summary>
            Gets or sets the encrypted ID. 
            </summary>
            <value>
            The encrypted ID.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Protocols.ManageNameIDRequest.NewID">
            <summary>
            Gets or sets the new ID. 
            </summary>
            <value>
            The new ID.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Protocols.ManageNameIDRequest.NewEncryptedID">
            <summary>
            Gets or sets the new encrypted ID. 
            </summary>
            <value>
            The new encrypted ID.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Protocols.ManageNameIDRequest.Terminate">
            <summary>
            Gets or sets the terminate. 
            </summary>
            <value>
            The terminate.
            </value>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.ManageNameIDRequest.ToXml">
            <summary>
            Serializes the manage name ID request to XML.
            </summary>
            <remarks>
            An XML document is created.
            </remarks>
            <returns>The manage name ID request as XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.ManageNameIDRequest.ToXml(System.Xml.XmlDocument)">
            <summary>
            Serializes the manage name ID request to XML.
            </summary>
            <param name="xmlDocument">The owning XML document.</param>
            <returns>The manage name ID request as XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.ManageNameIDRequest.ToString">
            <summary>
            Converts the manage name ID request to a string.
            </summary>
            <returns>The manage name ID request as a string.</returns>
        </member>
        <member name="T:ComponentSpace.SAML2.Protocols.ManageNameIDResponse">
            <summary>
            Represents a manage name ID response.
            </summary>
            <remarks>
            Refer to the Assertions and Protocol for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.ManageNameIDResponse.IsValid(System.Xml.XmlElement)">
            <summary>
            Indicates whether the XML is a manage name ID response.
            </summary>
            <param name="xmlElement">The XML to test.</param>
            <returns><c>true</c> if the XML is a manage name ID response; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.ManageNameIDResponse.#ctor">
            <summary>
            Initializes a new instance of the <c>ManageNameIDResponse</c> class.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.ManageNameIDResponse.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <c>ManageNameIDResponse</c> class from XML.
            </summary>
            <param name="xmlElement">The manage name ID response XML.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.ManageNameIDResponse.ToXml">
            <summary>
            Serializes the manage name ID response to XML.
            </summary>
            <remarks>
            An XML document is created.
            </remarks>
            <returns>The manage name ID response as XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.ManageNameIDResponse.ToXml(System.Xml.XmlDocument)">
            <summary>
            Serializes the manage name ID response to XML.
            </summary>
            <param name="xmlDocument">The owning XML document.</param>
            <returns>The manage name ID response as XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.ManageNameIDResponse.ToString">
            <summary>
            Converts the manage name ID response to a string.
            </summary>
            <returns>The manage name ID response as a string.</returns>
        </member>
        <member name="T:ComponentSpace.SAML2.Protocols.NameIDMappingRequest">
            <summary>
            Represents a name ID mapping request.
            </summary>
            <remarks>
            Refer to the Assertions and Protocol for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.NameIDMappingRequest.IsValid(System.Xml.XmlElement)">
            <summary>
            Indicates whether the XML is an artifact resolve request.
            </summary>
            <param name="xmlElement">The XML to test.</param>
            <returns><c>true</c> if the XML is an artifact resolve request; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.NameIDMappingRequest.#ctor">
            <summary>
            Initializes a new instance of the <c>NameIDMappingRequest</c> class.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.NameIDMappingRequest.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <c>NameIDMappingRequest</c> class from XML.
            </summary>
            <param name="xmlElement">The name ID mapping request XML.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentSpace.SAML2.Protocols.NameIDMappingRequest.BaseID">
            <summary>
            Gets or sets the base ID. 
            </summary>
            <value>
            The base ID.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Protocols.NameIDMappingRequest.NameID">
            <summary>
            Gets or sets the name ID. 
            </summary>
            <value>
            The name ID.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Protocols.NameIDMappingRequest.EncryptedID">
            <summary>
            Gets or sets the encrypted ID. 
            </summary>
            <value>
            The encrypted ID.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Protocols.NameIDMappingRequest.NameIDPolicy">
            <summary>
            Gets or sets the name ID policy. 
            </summary>
            <value>
            The name ID policy.
            </value>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.NameIDMappingRequest.ToXml">
            <summary>
            Serializes the name ID mapping request to XML.
            </summary>
            <remarks>
            An XML document is created.
            </remarks>
            <returns>The name ID mapping request as XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.NameIDMappingRequest.ToXml(System.Xml.XmlDocument)">
            <summary>
            Serializes the name ID mapping request to XML.
            </summary>
            <param name="xmlDocument">The owning XML document.</param>
            <returns>The name ID mapping request as XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.NameIDMappingRequest.ToString">
            <summary>
            Converts the name ID mapping request to a string.
            </summary>
            <returns>The name ID mapping request as a string.</returns>
        </member>
        <member name="T:ComponentSpace.SAML2.Protocols.NameIDMappingResponse">
            <summary>
            Represents a name ID mapping response.
            </summary>
            <remarks>
            Refer to the Assertions and Protocol for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.NameIDMappingResponse.IsValid(System.Xml.XmlElement)">
            <summary>
            Indicates whether the XML is a name ID mapping response.
            </summary>
            <param name="xmlElement">The XML to test.</param>
            <returns><c>true</c> if the XML is a name ID mapping response; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.NameIDMappingResponse.#ctor">
            <summary>
            Initializes a new instance of the <c>NameIDMappingResponse</c> class.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.NameIDMappingResponse.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <c>NameIDMappingResponse</c> class from XML.
            </summary>
            <param name="xmlElement">The name ID mapping response XML.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentSpace.SAML2.Protocols.NameIDMappingResponse.NameID">
            <summary>
            Gets or sets the name ID.
            </summary>
            <value>
            The name ID.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Protocols.NameIDMappingResponse.EncryptedID">
            <summary>
            Gets or sets the encrypted ID.
            </summary>
            <value>
            The encrypted ID.
            </value>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.NameIDMappingResponse.ToXml">
            <summary>
            Serializes the name ID mapping response to XML.
            </summary>
            <remarks>
            An XML document is created.
            </remarks>
            <returns>The name ID mapping response as XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.NameIDMappingResponse.ToXml(System.Xml.XmlDocument)">
            <summary>
            Serializes the name ID mapping response to XML.
            </summary>
            <param name="xmlDocument">The owning XML document.</param>
            <returns>The name ID mapping response as XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.NameIDMappingResponse.ToString">
            <summary>
            Converts the name ID mapping response to a string.
            </summary>
            <returns>The name ID mapping response as a string.</returns>
        </member>
        <member name="T:ComponentSpace.SAML2.Protocols.NameIDPolicy">
            <summary>
            Represents a name ID policy.
            </summary>
            <remarks>
            Refer to the Assertions and Protocol for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.NameIDPolicy.IsValid(System.Xml.XmlElement)">
            <summary>
            Indicates whether the XML is a name ID policy.
            </summary>
            <param name="xmlElement">The XML to test.</param>
            <returns><c>true</c> if the XML is a name ID policy; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.NameIDPolicy.#ctor">
            <summary>
            Initializes a new instance of the <c>NameIDPolicy</c> class.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.NameIDPolicy.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <c>NameIDPolicy</c> class.
            </summary>
            <param name="format">The format.</param>
            <param name="spNameQualifier">The SP name qualifier</param>
            <param name="allowCreate">The allow create flag</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.NameIDPolicy.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <c>NameIDPolicy</c> class from XML.
            </summary>
            <param name="xmlElement">The name ID policy XML.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentSpace.SAML2.Protocols.NameIDPolicy.Format">
            <summary>
            Gets or sets the format. 
            </summary>
            <value>
            The format.
            </value>
            <seealso cref="T:ComponentSpace.SAML2.SAMLIdentifiers.NameIdentifierFormats"/>
        </member>
        <member name="P:ComponentSpace.SAML2.Protocols.NameIDPolicy.SPNameQualifier">
            <summary>
            Gets or sets the SP name qualifier. 
            </summary>
            <value>
            The SP name qualifier.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Protocols.NameIDPolicy.AllowCreate">
            <summary>
            Gets or sets the allow create flag. 
            </summary>
            <value>
            The allow create flag.
            </value>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.NameIDPolicy.ToXml(System.Xml.XmlDocument)">
            <summary>
            Serializes the name ID policy to XML.
            </summary>
            <param name="xmlDocument">The owning XML document.</param>
            <returns>The name ID policy as XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="T:ComponentSpace.SAML2.Protocols.NewID">
            <summary>
            Represents new ID.
            </summary>
            <remarks>
            Refer to the Assertions and Protocol for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.NewID.IsValid(System.Xml.XmlElement)">
            <summary>
            Indicates whether the XML is an artifact.
            </summary>
            <param name="xmlElement">The XML to test.</param>
            <returns><c>true</c> if the XML is a new ID; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.NewID.#ctor">
            <summary>
            Initializes a new instance of the <c>NewID</c> class.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.NewID.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>NewID</c> class.
            </summary>
            <param name="id">The ID.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.NewID.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <c>NewID</c> class from XML.
            </summary>
            <param name="xmlElement">The new ID XML.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentSpace.SAML2.Protocols.NewID.ID">
            <summary>
            Gets or sets the ID. 
            </summary>
            <value>
            The ID.
            </value>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.NewID.ToXml(System.Xml.XmlDocument)">
            <summary>
            Serializes the new ID to XML.
            </summary>
            <param name="xmlDocument">The owning XML document.</param>
            <returns>The new ID as XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.NewID.ToString">
            <summary>
            Returns the ID.
            </summary>
            <returns>The ID</returns>
        </member>
        <member name="T:ComponentSpace.SAML2.Protocols.RequestAbstractType">
            <summary>
            Represents the request abstract type.
            </summary>
            <remarks>
            Refer to the Assertions and Protocol for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.RequestAbstractType.GetIssuer(System.Xml.XmlElement)">
            <summary>
            Gets the issuer.
            </summary>
            <param name="xmlElement">The XML element containing the issuer as an offspring element.</param>
            <returns>The issuer or <c>null</c> if none.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.RequestAbstractType.GetIssuerName(System.Xml.XmlElement)">
            <summary>
            Gets the issuer name.
            </summary>
            <param name="xmlElement">The XML element containing the issuer as an offspring element.</param>
            <returns>The issuer name or <c>null</c> if none.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.RequestAbstractType.#ctor">
            <summary>
            Initializes a new instance of the <c>RequestAbstractType</c> class.
            </summary>
            <remarks>
            The request is initialized with a version number of 2.0,
            a random identifier, and the issue instant of now.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.RequestAbstractType.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <c>RequestAbstractType</c> class from XML.
            </summary>
            <param name="xmlElement">The request XML.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentSpace.SAML2.Protocols.RequestAbstractType.ID">
            <summary>
            Gets or sets the ID. 
            </summary>
            <value>
            The ID.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Protocols.RequestAbstractType.Version">
            <summary>
            Gets or sets the version.
            </summary>
            <value>
            The version. The default is 2.0.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Protocols.RequestAbstractType.IssueInstant">
            <summary>
            Gets or sets the issue instant. 
            </summary>
            <value>
            The issue instant as coordinated universal time (UTC).
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Protocols.RequestAbstractType.Destination">
            <summary>
            Gets or sets the destination.
            </summary>
            <value>
            The destination.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Protocols.RequestAbstractType.Consent">
            <summary>
            Gets or sets the consent.
            </summary>
            <value>
            The consent.
            </value>
            <seealso cref="T:ComponentSpace.SAML2.SAMLIdentifiers.ConsentIdentifiers"/>
        </member>
        <member name="P:ComponentSpace.SAML2.Protocols.RequestAbstractType.Issuer">
            <summary>
            Gets or sets the issuer. 
            </summary>
            <value>
            The issuer.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Protocols.RequestAbstractType.Signature">
            <summary>
            Gets or sets the digital signature. 
            </summary>
            <value>
            The digital signature.
            </value>
            <remarks>
            To generate or verify signatures, use <see cref="T:ComponentSpace.SAML2.Protocols.SAMLMessageSignature"/>.
            </remarks>
            <seealso cref="T:ComponentSpace.SAML2.Protocols.SAMLMessageSignature"/>
        </member>
        <member name="P:ComponentSpace.SAML2.Protocols.RequestAbstractType.Extensions">
            <summary>
            Gets or sets the extensions. 
            </summary>
            <value>
            The extensions.
            </value>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.RequestAbstractType.ToXml(System.Xml.XmlElement)">
            <summary>
            Serializes the request to XML.
            </summary>
            <param name="xmlElement">The owning XML element.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="T:ComponentSpace.SAML2.Protocols.RequestedAuthnContext">
            <summary>
            Represents a requested authentication context.
            </summary>
            <remarks>
            Refer to the Assertions and Protocol for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.RequestedAuthnContext.IsValid(System.Xml.XmlElement)">
            <summary>
            Indicates whether the XML is a requested authentication context.
            </summary>
            <param name="xmlElement">The XML to test.</param>
            <returns><c>true</c> if the XML is a requested authentication context; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.RequestedAuthnContext.#ctor">
            <summary>
            Initializes a new instance of the <c>RequestedAuthnContext</c> class.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.RequestedAuthnContext.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <c>RequestedAuthnContext</c> class from XML.
            </summary>
            <param name="xmlElement">The requested authentication context XML.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentSpace.SAML2.Protocols.RequestedAuthnContext.Comparison">
            <summary>
            Gets or sets the authentication context comparison. 
            </summary>
            <value>
            The authentication context comparison.
            </value>
            <seealso cref="T:ComponentSpace.SAML2.SAMLIdentifiers.AuthnContextComparison"/>
        </member>
        <member name="P:ComponentSpace.SAML2.Protocols.RequestedAuthnContext.AuthenticationContexts">
            <summary>
            Gets or sets the authentication contexts. 
            </summary>
            <value>
            The authentication contexts.
            </value>
            <seealso cref="T:ComponentSpace.SAML2.Assertions.AuthnContextClassRef"/>
            <seealso cref="T:ComponentSpace.SAML2.Assertions.AuthnContextDeclRef"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.RequestedAuthnContext.ToXml(System.Xml.XmlDocument)">
            <summary>
            Serializes the requested authentication context to XML.
            </summary>
            <param name="xmlDocument">The owning XML document.</param>
            <returns>The requested authentication context as XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="T:ComponentSpace.SAML2.Protocols.RequesterID">
            <summary>
            Represents a requester ID.
            </summary>
            <remarks>
            Refer to the Assertions and Protocol for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.RequesterID.IsValid(System.Xml.XmlElement)">
            <summary>
            Indicates whether the XML is a requester ID.
            </summary>
            <param name="xmlElement">The XML to test.</param>
            <returns><c>true</c> if the XML is a requester ID; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.RequesterID.#ctor">
            <summary>
            Initializes a new instance of the <c>RequesterID</c> class.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.RequesterID.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>RequesterID</c> class.
            </summary>
            <param name="id">The requester ID.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.RequesterID.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <c>RequesterID</c> class from XML.
            </summary>
            <param name="xmlElement">The requester ID XML.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentSpace.SAML2.Protocols.RequesterID.ID">
            <summary>
            Gets or sets the ID. 
            </summary>
            <value>
            The ID.
            </value>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.RequesterID.ToXml(System.Xml.XmlDocument)">
            <summary>
            Serializes the requester ID to XML.
            </summary>
            <param name="xmlDocument">The owning XML document.</param>
            <returns>The requester ID as XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.RequesterID.ToString">
            <summary>
            Returns the requester ID.
            </summary>
            <returns>The requester ID</returns>
        </member>
        <member name="T:ComponentSpace.SAML2.Protocols.SAMLMessageSignature">
            <summary>
            Permits XML signature generation and verification for SAML protocol request and response messages.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.Protocols.SAMLMessageSignature.DefaultInclusiveNamespacesPrefixList">
            <summary>
            The default inclusive namespace prefix list.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.SAMLMessageSignature.GetMessageId(System.Xml.XmlElement)">
            <summary>
            Gets the ID from the SAML message.
            </summary>
            <param name="xmlElement">The SAML message.</param>
            <returns>The ID.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.SAMLMessageSignature.AddSignature(System.Xml.XmlElement,System.Xml.XmlElement)">
            <summary>
            Adds the XML signature to the SAML message.
            </summary>
            <param name="xmlElement">The SAML message.</param>
            <param name="xmlSignature">The XML signature.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.SAMLMessageSignature.IsSigned(System.Xml.XmlElement)">
            <summary>
            Indicates whether the SAML message contains an XML signature.
            </summary>
            <param name="xmlElement">The SAML message.</param>
            <returns><c>true</c> if the XML contains an XML signature; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.SAMLMessageSignature.RemoveSignature(System.Xml.XmlElement)">
            <summary>
            Removes the XML signature, if any, from the SAML message.
            </summary>
            <param name="xmlElement">The SAML message.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.SAMLMessageSignature.Generate(System.Xml.XmlElement,System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.Xml.KeyInfo,System.String,System.String,System.String)">
            <summary>
            Generates an XML signature and adds it to the SAML message.
            </summary>
            <remarks>
            An XML signature with the constraints specified in the SAML specification is generated
            and added to the SAML message. The signature is created using the supplied signing key.
            The key info will be included in the signature.
            <para>
            The generated signature is added to the supplied XML element.
            </para>
            </remarks>
            <param name="xmlElement">The SAML message to sign.</param>
            <param name="signingKey">The signing key.</param>
            <param name="keyInfo">The key info to include in the signature.</param>
            <param name="inclusiveNamespacesPrefixList">The inclusive namespace prefix list or <c>null</c> to default to #default samlp saml ds xs xsi.</param>
            <param name="digestMethod">The digest method or <c>null</c> to default to http://www.w3.org/2001/04/xmlenc#sha256. </param>
            <param name="signatureMethod">The signature method or <c>null</c> to default to http://www.w3.org/2001/04/xmldsig-more#rsa-sha256. </param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSignatureException">
            Thrown when the signature generation fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.SAMLMessageSignature.Generate(System.Xml.XmlElement,System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.Xml.KeyInfo)">
            <summary>
            Generates an XML signature and adds it to the SAML message.
            </summary>
            <remarks>
            An XML signature with the constraints specified in the SAML specification is generated
            and added to the SAML message. The signature is created using the supplied signing key.
            The key info will be included in the signature.
            <para>
            The generated signature is added to the supplied XML element.
            </para>
            </remarks>
            <param name="xmlElement">The SAML message to sign.</param>
            <param name="signingKey">The signing key.</param>
            <param name="keyInfo">The key info to include in the signature.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSignatureException">
            Thrown when the signature generation fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.SAMLMessageSignature.Generate(System.Xml.XmlElement,System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.Xml.KeyInfoX509Data,System.String,System.String,System.String)">
            <summary>
            Generates an XML signature and adds it to the SAML message.
            </summary>
            <remarks>
            An XML signature with the constraints specified in the SAML specification is generated
            and added to the SAML message. The signature is created using the supplied signing key.
            Key info, using the supplied X.509 data, is included in the signature.
            <para>
            The generated signature is added to the supplied XML element.
            </para>
            </remarks>
            <param name="xmlElement">The SAML message to sign.</param>
            <param name="signingKey">The signing key.</param>
            <param name="keyInfoX509Data">The X.509 data to include in the signature.</param>
            <param name="inclusiveNamespacesPrefixList">The inclusive namespace prefix list or <c>null</c> to default to #default samlp saml ds xs xsi.</param>
            <param name="digestMethod">The digest method or <c>null</c> to default to http://www.w3.org/2001/04/xmlenc#sha256. </param>
            <param name="signatureMethod">The signature method or <c>null</c> to default to http://www.w3.org/2001/04/xmldsig-more#rsa-sha256. </param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSignatureException">
            Thrown when the signature generation fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.SAMLMessageSignature.Generate(System.Xml.XmlElement,System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.Xml.KeyInfoX509Data)">
            <summary>
            Generates an XML signature and adds it to the SAML message.
            </summary>
            <remarks>
            An XML signature with the constraints specified in the SAML specification is generated
            and added to the SAML message. The signature is created using the supplied signing key.
            Key info, using the supplied X.509 data, is included in the signature.
            <para>
            The generated signature is added to the supplied XML element.
            </para>
            </remarks>
            <param name="xmlElement">The SAML message to sign.</param>
            <param name="signingKey">The signing key.</param>
            <param name="keyInfoX509Data">The X.509 data to include in the signature.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSignatureException">
            Thrown when the signature generation fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.SAMLMessageSignature.Generate(System.Xml.XmlElement,System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.X509Certificates.X509Certificate2Collection,System.String,System.String,System.String)">
            <summary>
            Generates an XML signature and adds it to the SAML message.
            </summary>
            <remarks>
            An XML signature with the constraints specified in the SAML specification is generated
            and added to the SAML message. The signature is created using the supplied signing key.
            Key info, using the supplied X.509 certificates, is included in the signature.
            <para>
            The generated signature is added to the supplied XML element.
            </para>
            </remarks>
            <param name="xmlElement">The SAML message to sign.</param>
            <param name="signingKey">The signing key.</param>
            <param name="x509Certificates">The list of X.509 certificate to include in the key info.</param>
            <param name="inclusiveNamespacesPrefixList">The inclusive namespace prefix list or <c>null</c> to default to #default samlp saml ds xs xsi.</param>
            <param name="digestMethod">The digest method or <c>null</c> to default to http://www.w3.org/2001/04/xmlenc#sha256. </param>
            <param name="signatureMethod">The signature method or <c>null</c> to default to http://www.w3.org/2001/04/xmldsig-more#rsa-sha256. </param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSignatureException">
            Thrown when the signature generation fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.SAMLMessageSignature.Generate(System.Xml.XmlElement,System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.X509Certificates.X509Certificate2Collection)">
            <summary>
            Generates an XML signature and adds it to the SAML message.
            </summary>
            <remarks>
            An XML signature with the constraints specified in the SAML specification is generated
            and added to the SAML message. The signature is created using the supplied signing key.
            Key info, using the supplied X.509 certificates, is included in the signature.
            <para>
            The generated signature is added to the supplied XML element.
            </para>
            </remarks>
            <param name="xmlElement">The SAML message to sign.</param>
            <param name="signingKey">The signing key.</param>
            <param name="x509Certificates">The list of X.509 certificate to include in the key info.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSignatureException">
            Thrown when the signature generation fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.SAMLMessageSignature.Generate(System.Xml.XmlElement,System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.X509Certificates.X509Certificate2,System.String,System.String,System.String)">
            <summary>
            Generates an XML signature and adds it to the SAML message.
            </summary>
            <remarks>
            An XML signature with the constraints specified in the SAML specification is generated
            and added to the SAML message. The signature is created using the supplied signing key.
            Key info, using the supplied X.509 certificate, is included in the signature.
            <para>
            The generated signature is added to the supplied XML element.
            </para>
            </remarks>
            <param name="xmlElement">The SAML message to sign.</param>
            <param name="signingKey">The signing key.</param>
            <param name="x509Certificate">The X.509 certificate to include in the key info.</param>
            <param name="inclusiveNamespacesPrefixList">The inclusive namespace prefix list or <c>null</c> to default to #default samlp saml ds xs xsi.</param>
            <param name="digestMethod">The digest method or <c>null</c> to default to http://www.w3.org/2001/04/xmlenc#sha256. </param>
            <param name="signatureMethod">The signature method or <c>null</c> to default to http://www.w3.org/2001/04/xmldsig-more#rsa-sha256. </param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSignatureException">
            Thrown when the signature generation fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.SAMLMessageSignature.Generate(System.Xml.XmlElement,System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Generates an XML signature and adds it to the SAML message.
            </summary>
            <remarks>
            An XML signature with the constraints specified in the SAML specification is generated
            and added to the SAML message. The signature is created using the supplied signing key.
            Key info, using the supplied X.509 certificate, is included in the signature.
            <para>
            The generated signature is added to the supplied XML element.
            </para>
            </remarks>
            <param name="xmlElement">The SAML message to sign.</param>
            <param name="signingKey">The signing key.</param>
            <param name="x509Certificate">The X.509 certificate to include in the key info.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSignatureException">
            Thrown when the signature generation fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.SAMLMessageSignature.Generate(System.Xml.XmlElement,System.Security.Cryptography.AsymmetricAlgorithm,System.String,System.String,System.String)">
            <summary>
            Generates an XML signature and adds it to the SAML message.
            </summary>
            <remarks>
            An XML signature with the constraints specified in the SAML specification is generated
            and added to the SAML message. The signature is created using the supplied signing key.
            <para>
            The generated signature is added to the supplied XML element.
            </para>
            </remarks>
            <param name="xmlElement">The SAML message to sign.</param>
            <param name="signingKey">The signing key.</param>
            <param name="inclusiveNamespacesPrefixList">The inclusive namespace prefix list or <c>null</c> to default to #default samlp saml ds xs xsi.</param>
            <param name="digestMethod">The digest method or <c>null</c> to default to http://www.w3.org/2001/04/xmlenc#sha256. </param>
            <param name="signatureMethod">The signature method or <c>null</c> to default to http://www.w3.org/2001/04/xmldsig-more#rsa-sha256. </param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSignatureException">
            Thrown when the signature generation fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.SAMLMessageSignature.Generate(System.Xml.XmlElement,System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>
            Generates an XML signature and adds it to the SAML message.
            </summary>
            <remarks>
            An XML signature with the constraints specified in the SAML specification is generated
            and added to the SAML message. The signature is created using the supplied signing key.
            <para>
            The generated signature is added to the supplied XML element.
            </para>
            </remarks>
            <param name="xmlElement">The SAML message to sign.</param>
            <param name="signingKey">The signing key.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSignatureException">
            Thrown when the signature generation fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.SAMLMessageSignature.Verify(System.Xml.XmlElement,System.Security.Cryptography.Xml.KeyInfo)">
            <summary>
            Verifies the XML signature.
            </summary>
            <remarks>
            The supplied key info is used to perform the verification.
            </remarks>
            <param name="xmlElement">The SAML message containing the signature to verify.</param>
            <param name="keyInfo">The key info used to perform the verification or <c>null</c> if none.</param>
            <returns><c>true</c> if the XML signature is correct; otherwise <c>false</c>.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSignatureException">
            Thrown when the signature verification fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.SAMLMessageSignature.Verify(System.Xml.XmlElement,System.Security.Cryptography.Xml.KeyInfoX509Data)">
            <summary>
            Verifies the XML signature.
            </summary>
            <remarks>
            The supplied X.509 data is used to perform the verification.
            </remarks>
            <param name="xmlElement">The SAML message containing the signature to verify.</param>
            <param name="keyInfoX509Data">The X.509 data used to perform the verification or <c>null</c> if none.</param>
            <returns><c>true</c> if the XML signature is correct; otherwise <c>false</c>.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSignatureException">
            Thrown when the signature verification fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.SAMLMessageSignature.Verify(System.Xml.XmlElement,System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Verifies the XML signature.
            </summary>
            <remarks>
            The supplied X.509 certificate is used to perform the verification.
            </remarks>
            <param name="xmlElement">The SAML message containing the signature to verify.</param>
            <param name="x509Certificate">The X.509 certificate used to perform the verification.</param>
            <returns><c>true</c> if the XML signature is correct; otherwise <c>false</c>.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSignatureException">
            Thrown when the signature verification fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.SAMLMessageSignature.Verify(System.Xml.XmlElement,System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>
            Verifies the XML signature.
            </summary>
            <remarks>
            The supplied public key is used to perform the verification.
            </remarks>
            <param name="xmlElement">The SAML message containing the signature to verify.</param>
            <param name="signingKey">The public key used to perform the verification or <c>null</c> if none.</param>
            <returns><c>true</c> if the XML signature is correct; otherwise <c>false</c>.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSignatureException">
            Thrown when the signature verification fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.SAMLMessageSignature.Verify(System.Xml.XmlElement)">
            <summary>
            Verifies the XML signature.
            </summary>
            <remarks>
            The key info included with the signature is used to perform the verification.
            </remarks>
            <param name="xmlElement">The SAML message containing the signature to verify.</param>
            <returns><c>true</c> if the XML signature is correct; otherwise <c>false</c>.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSignatureException">
            Thrown when the signature verification fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.SAMLMessageSignature.GetKeyInfo(System.Xml.XmlElement)">
            <summary>
            Gets the key info embedded in the XML signature or <c>null</c> if none.
            </summary>
            <param name="xmlElement">The SAML message containing the signature with key info.</param>
            <returns>The key info embedded in the XML signature or <c>null</c> if none.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSignatureException">
            Thrown when the key info retrieval fails.
            </exception>
            <seealso cref="M:ComponentSpace.SAML2.Protocols.SAMLMessageSignature.GetCertificate(System.Xml.XmlElement)"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.SAMLMessageSignature.GetCertificate(System.Xml.XmlElement)">
            <summary>
            Gets the X.509 certificate embedded in the XML signature or <c>null</c> if none.
            </summary>
            <param name="xmlElement">The SAML message containing the signature with X.509 certificate.</param>
            <returns>The X.509 certificate embedded in the XML signature or <c>null</c> if none.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSignatureException">
            Thrown when the X.509 certificate retrieval fails.
            </exception>
            <seealso cref="M:ComponentSpace.SAML2.Protocols.SAMLMessageSignature.GetKeyInfo(System.Xml.XmlElement)"/>
        </member>
        <member name="T:ComponentSpace.SAML2.Protocols.SAMLResponse">
            <summary>
            Represents a SAML response.
            </summary>
            <remarks>
            Refer to the Assertions and Protocol for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.SAMLResponse.IsValid(System.Xml.XmlElement)">
            <summary>
            Indicates whether the XML is a SAML response.
            </summary>
            <param name="xmlElement">The XML to test.</param>
            <returns><c>true</c> if the XML is a SAML response; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.SAMLResponse.#ctor">
            <summary>
            Initializes a new instance of the <c>SAMLResponse</c> class.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.SAMLResponse.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <c>SAMLResponse</c> class from XML.
            </summary>
            <param name="xmlElement">The SAML response XML.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentSpace.SAML2.Protocols.SAMLResponse.Assertions">
            <summary>
            Gets or sets the assertions.
            <para>
            This includes all unsigned, signed and encrypted assertions. 
            </para>
            The list may contain unencrypted and unsigned SAML assertions as <c>SAMLAssertion</c> objects,
            signed SAML assertions as <c>XmlElement</c> objects, 
            and encrypted SAML assertions as <c>EncryptedAssertion</c> objects.
            <para>
            To get just the unencrypted, unsigned assertions use <c>GetUnsignedAssertions</c>.
            To get just the signed assertions use <c>GetSignedAssertions</c>. 
            To get just the encrypted assertions use <c>GetEncryptedAssertions</c>. 
            </para>
            </summary>
            <value>
            The assertions.
            </value>
            <seealso cref="T:ComponentSpace.SAML2.Assertions.SAMLAssertion"/>
            <seealso cref="T:ComponentSpace.SAML2.Assertions.EncryptedAssertion"/>
            <seealso cref="M:ComponentSpace.SAML2.Protocols.SAMLResponse.GetUnsignedAssertion"/>
            <seealso cref="M:ComponentSpace.SAML2.Protocols.SAMLResponse.GetUnsignedAssertions"/>
            <seealso cref="M:ComponentSpace.SAML2.Protocols.SAMLResponse.GetSignedAssertion(System.Security.Cryptography.X509Certificates.X509Certificate2)"/>
            <seealso cref="M:ComponentSpace.SAML2.Protocols.SAMLResponse.GetSignedAssertions"/>
            <seealso cref="M:ComponentSpace.SAML2.Protocols.SAMLResponse.GetEncryptedAssertions"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.SAMLResponse.GetUnsignedAssertion">
            <summary>
            Returns the SAML assertion.
            <para>
            It's assumed the SAML response contains a single unencrypted, unsigned SAML assertion. 
            </para>
            <para>
            To get the signed assertion use <c>GetSignedAssertion</c>. 
            To get the encrypted assertion use <c>GetEncryptedAssertion</c>. 
            </para>
            </summary>
            <returns>The SAML assertion or <c>null</c> if none.</returns>
            <seealso cref="P:ComponentSpace.SAML2.Protocols.SAMLResponse.Assertions"/>
            <seealso cref="M:ComponentSpace.SAML2.Protocols.SAMLResponse.GetSignedAssertion(System.Security.Cryptography.X509Certificates.X509Certificate2)"/>
            <seealso cref="M:ComponentSpace.SAML2.Protocols.SAMLResponse.GetSignedAssertions"/>
            <seealso cref="M:ComponentSpace.SAML2.Protocols.SAMLResponse.GetEncryptedAssertion"/>
            <seealso cref="M:ComponentSpace.SAML2.Protocols.SAMLResponse.GetEncryptedAssertions"/>
            <seealso cref="T:ComponentSpace.SAML2.Assertions.SAMLAssertion"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.SAMLResponse.GetSignedAssertion(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Returns the SAML assertion.
            <para>
            It's assumed the SAML response contains a single signed SAML assertion. 
            </para>
            <para>
            To get the unencrypted, unsigned assertion use <c>GetUnsignedAssertion</c>. 
            To get the encrypted assertion use <c>GetEncryptedAssertion</c>. 
            </para>
            </summary>
            <param name="x509Certificate">The X.509 certificate used to verify the XML signature.</param>
            <returns>The SAML assertion or <c>null</c> if none.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSignatureException">
            Thrown when the signature verification fails.
            </exception>
            <seealso cref="P:ComponentSpace.SAML2.Protocols.SAMLResponse.Assertions"/>
            <seealso cref="M:ComponentSpace.SAML2.Protocols.SAMLResponse.GetUnsignedAssertion"/>
            <seealso cref="M:ComponentSpace.SAML2.Protocols.SAMLResponse.GetSignedAssertions"/>
            <seealso cref="M:ComponentSpace.SAML2.Protocols.SAMLResponse.GetEncryptedAssertion"/>
            <seealso cref="M:ComponentSpace.SAML2.Protocols.SAMLResponse.GetEncryptedAssertions"/>
            <seealso cref="T:ComponentSpace.SAML2.Assertions.SAMLAssertion"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.SAMLResponse.GetEncryptedAssertion">
            <summary>
            Returns the encrypted SAML assertion.
            <para>
            It's assumed the SAML response contains a single encrypted SAML assertion. 
            </para>
            <para>
            To get the unencrypted, unsigned assertion use <c>GetUnsignedAssertion</c>. 
            To get the signed assertion use <c>GetSignedAssertion</c>. 
            </para>
            </summary>
            <returns>The encrypted assertion or <c>null</c> if none.</returns>
            <seealso cref="P:ComponentSpace.SAML2.Protocols.SAMLResponse.Assertions"/>
            <seealso cref="M:ComponentSpace.SAML2.Protocols.SAMLResponse.GetUnsignedAssertion"/>
            <seealso cref="M:ComponentSpace.SAML2.Protocols.SAMLResponse.GetSignedAssertion(System.Security.Cryptography.X509Certificates.X509Certificate2)"/>
            <seealso cref="M:ComponentSpace.SAML2.Protocols.SAMLResponse.GetSignedAssertions"/>
            <seealso cref="M:ComponentSpace.SAML2.Protocols.SAMLResponse.GetEncryptedAssertions"/>
            <seealso cref="T:ComponentSpace.SAML2.Assertions.EncryptedAssertion"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.SAMLResponse.GetUnsignedAssertions">
            <summary>
            Returns all unencrypted, unsigned assertions.
            <para>
            To get the signed assertions use <c>GetSignedAssertions</c>. 
            To get the encrypted assertions use <c>GetEncryptedAssertions</c>. 
            </para>
            </summary>
            <returns>The assertions.</returns>
            <seealso cref="P:ComponentSpace.SAML2.Protocols.SAMLResponse.Assertions"/>
            <seealso cref="M:ComponentSpace.SAML2.Protocols.SAMLResponse.GetUnsignedAssertion"/>
            <seealso cref="M:ComponentSpace.SAML2.Protocols.SAMLResponse.GetSignedAssertion(System.Security.Cryptography.X509Certificates.X509Certificate2)"/>
            <seealso cref="M:ComponentSpace.SAML2.Protocols.SAMLResponse.GetSignedAssertions"/>
            <seealso cref="M:ComponentSpace.SAML2.Protocols.SAMLResponse.GetEncryptedAssertion"/>
            <seealso cref="M:ComponentSpace.SAML2.Protocols.SAMLResponse.GetEncryptedAssertions"/>
            <seealso cref="T:ComponentSpace.SAML2.Assertions.SAMLAssertion"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.SAMLResponse.GetSignedAssertions">
            <summary>
            Returns all signed assertions.
            <para>
            To get the unencrypted, unsigned assertions use <c>GetUnsignedAssertions</c>. 
            To get the encrypted assertions use <c>GetEncryptedAssertions</c>. 
            </para>
            </summary>
            <returns>The signed assertions.</returns>
            <seealso cref="P:ComponentSpace.SAML2.Protocols.SAMLResponse.Assertions"/>
            <seealso cref="M:ComponentSpace.SAML2.Protocols.SAMLResponse.GetUnsignedAssertion"/>
            <seealso cref="M:ComponentSpace.SAML2.Protocols.SAMLResponse.GetUnsignedAssertions"/>
            <seealso cref="M:ComponentSpace.SAML2.Protocols.SAMLResponse.GetSignedAssertion(System.Security.Cryptography.X509Certificates.X509Certificate2)"/>
            <seealso cref="M:ComponentSpace.SAML2.Protocols.SAMLResponse.GetEncryptedAssertion"/>
            <seealso cref="M:ComponentSpace.SAML2.Protocols.SAMLResponse.GetEncryptedAssertions"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.SAMLResponse.GetEncryptedAssertions">
            <summary>
            Returns all encrypted assertions.
            <para>
            To get the unencrypted, unsigned assertions use <c>GetUnsignedAssertions</c>. 
            To get the signed assertions use <c>GetSignedAssertions</c>. 
            </para>
            </summary>
            <returns>The encrypted assertions.</returns>
            <seealso cref="P:ComponentSpace.SAML2.Protocols.SAMLResponse.Assertions"/>
            <seealso cref="M:ComponentSpace.SAML2.Protocols.SAMLResponse.GetUnsignedAssertion"/>
            <seealso cref="M:ComponentSpace.SAML2.Protocols.SAMLResponse.GetUnsignedAssertions"/>
            <seealso cref="M:ComponentSpace.SAML2.Protocols.SAMLResponse.GetSignedAssertion(System.Security.Cryptography.X509Certificates.X509Certificate2)"/>
            <seealso cref="M:ComponentSpace.SAML2.Protocols.SAMLResponse.GetSignedAssertions"/>
            <seealso cref="M:ComponentSpace.SAML2.Protocols.SAMLResponse.GetEncryptedAssertion"/>
            <seealso cref="T:ComponentSpace.SAML2.Assertions.EncryptedAssertion"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.SAMLResponse.ToXml">
            <summary>
            Serializes the SAML response to XML.
            </summary>
            <remarks>
            An XML document is created.
            </remarks>
            <returns>The SAML response as XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.SAMLResponse.ToXml(System.Xml.XmlDocument)">
            <summary>
            Serializes the SAML response to XML.
            </summary>
            <param name="xmlDocument">The owning XML document.</param>
            <returns>The SAML response as XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.SAMLResponse.ToString">
            <summary>
            Converts the SAML response to a string.
            </summary>
            <returns>The SAML response as a string.</returns>
        </member>
        <member name="T:ComponentSpace.SAML2.Protocols.Scoping">
            <summary>
            Represents a scoping.
            </summary>
            <remarks>
            Refer to the Assertions and Protocol for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.Scoping.IsValid(System.Xml.XmlElement)">
            <summary>
            Indicates whether the XML is a scoping.
            </summary>
            <param name="xmlElement">The XML to test.</param>
            <returns><c>true</c> if the XML is scoping; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.Scoping.#ctor">
            <summary>
            Initializes a new instance of the <c>Scoping</c> class.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.Scoping.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <c>Scoping</c> class from XML.
            </summary>
            <param name="xmlElement">The scoping XML.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentSpace.SAML2.Protocols.Scoping.ProxyCount">
            <summary>
            Gets or sets the proxy count. 
            </summary>
            <value>
            The proxy count or negative if none.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Protocols.Scoping.IDPList">
            <summary>
            Gets or sets the IDP list.
            </summary>
            <value>
            The IDP list.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Protocols.Scoping.RequesterIDs">
            <summary>
            Gets or sets the requester IDs.
            </summary>
            <value>
            The requester IDs.
            </value>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.Scoping.ToXml(System.Xml.XmlDocument)">
            <summary>
            Serializes the scoping to XML.
            </summary>
            <param name="xmlDocument">The owning XML document.</param>
            <returns>The scoping as XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="T:ComponentSpace.SAML2.Protocols.SessionIndex">
            <summary>
            Represents a session index.
            </summary>
            <remarks>
            Refer to the Assertions and Protocol for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.SessionIndex.IsValid(System.Xml.XmlElement)">
            <summary>
            Indicates whether the XML is a session index.
            </summary>
            <param name="xmlElement">The XML to test.</param>
            <returns><c>true</c> if the XML is a session index; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.SessionIndex.#ctor">
            <summary>
            Initializes a new instance of the <c>SessionIndex</c> class.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.SessionIndex.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>SessionIndex</c> class.
            </summary>
            <param name="index">The session index.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.SessionIndex.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <c>SessionIndex</c> class from XML.
            </summary>
            <param name="xmlElement">The session index XML.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentSpace.SAML2.Protocols.SessionIndex.Index">
            <summary>
            Gets or sets the session index. 
            </summary>
            <value>
            The session index.
            </value>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.SessionIndex.ToXml(System.Xml.XmlDocument)">
            <summary>
            Serializes the session index to XML.
            </summary>
            <param name="xmlDocument">The owning XML document.</param>
            <returns>The session index as XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.SessionIndex.ToString">
            <summary>
            Returns the session index.
            </summary>
            <returns>The session index</returns>
        </member>
        <member name="T:ComponentSpace.SAML2.Protocols.SignedMessage">
            <summary>
            Supports XML signatures on SAML messages.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.SignedMessage.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <c>SignedMessage</c> class.
            </summary>
            <param name="xmlElement">The XML element.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.SignedMessage.GetIdElement(System.Xml.XmlDocument,System.String)">
            <summary>
            Gets the SAML message with the specified ID.
            </summary>
            <param name="document">The XML document.</param>
            <param name="id">The ID.</param>
            <returns>The SAML message.</returns>
        </member>
        <member name="T:ComponentSpace.SAML2.Protocols.Status">
            <summary>
            Represents a status.
            </summary>
            <remarks>
            Refer to the Assertions and Protocol for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.Status.IsValid(System.Xml.XmlElement)">
            <summary>
            Indicates whether the XML is a status.
            </summary>
            <param name="xmlElement">The XML to test.</param>
            <returns><c>true</c> if the XML is status; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.Status.#ctor">
            <summary>
            Initializes a new instance of the <c>Status</c> class.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.Status.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <c>Status</c> class.
            </summary>
            <param name="statusCode">The status code.</param>
            <param name="statusMessage">The status message or <c>null</c> if none.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.Status.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <c>Status</c> class.
            </summary>
            <param name="statusCode">The status code.</param>
            <param name="subordinateStatusCode">The subordinate status code or <c>null</c> if none.</param>
            <param name="statusMessage">The status message or <c>null</c> if none.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.Status.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <c>Status</c> class from XML.
            </summary>
            <param name="xmlElement">The status XML.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentSpace.SAML2.Protocols.Status.StatusCode">
            <summary>
            Gets or sets the status code. 
            </summary>
            <value>
            The status code.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Protocols.Status.StatusMessage">
            <summary>
            Gets or sets the status message.
            </summary>
            <value>
            The status message.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Protocols.Status.StatusDetail">
            <summary>
            Gets or sets the status detail.
            </summary>
            <value>
            The status detail.
            </value>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.Status.ToXml">
            <summary>
            Serializes the status to XML.
            </summary>
            <returns>The status as XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.Status.ToXml(System.Xml.XmlDocument)">
            <summary>
            Serializes the status to XML.
            </summary>
            <param name="xmlDocument">The owning XML document.</param>
            <returns>The status as XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.Status.ToString">
            <summary>
            Returns the status.
            </summary>
            <returns>The status</returns>
        </member>
        <member name="T:ComponentSpace.SAML2.Protocols.StatusCode">
            <summary>
            Represents a status code.
            </summary>
            <remarks>
            Refer to the Assertions and Protocol for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.StatusCode.IsValid(System.Xml.XmlElement)">
            <summary>
            Indicates whether the XML is a status code.
            </summary>
            <param name="xmlElement">The XML to test.</param>
            <returns><c>true</c> if the XML is status code; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.StatusCode.#ctor">
            <summary>
            Initializes a new instance of the <c>StatusCode</c> class.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.StatusCode.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>StatusCode</c> class.
            </summary>
            <param name="code">The status code.</param>
            <seealso cref="T:ComponentSpace.SAML2.SAMLIdentifiers.PrimaryStatusCodes"/>
            <seealso cref="T:ComponentSpace.SAML2.SAMLIdentifiers.SecondaryStatusCodes"/>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.StatusCode.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <c>StatusCode</c> class from XML.
            </summary>
            <param name="xmlElement">The status code XML.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentSpace.SAML2.Protocols.StatusCode.Code">
            <summary>
            Gets or sets the status code. 
            </summary>
            <value>
            The status code.
            </value>
            <seealso cref="T:ComponentSpace.SAML2.SAMLIdentifiers.PrimaryStatusCodes"/>
            <seealso cref="T:ComponentSpace.SAML2.SAMLIdentifiers.SecondaryStatusCodes"/>
        </member>
        <member name="P:ComponentSpace.SAML2.Protocols.StatusCode.SubordinateStatusCode">
            <summary>
            Gets or sets the subordinate status code. 
            </summary>
            <value>
            The subordinate status code.
            </value>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.StatusCode.ToXml(System.Xml.XmlDocument)">
            <summary>
            Serializes the status code to XML.
            </summary>
            <param name="xmlDocument">The owning XML document.</param>
            <returns>The status code as XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.StatusCode.ToString">
            <summary>
            Returns the status code.
            </summary>
            <returns>The status code</returns>
        </member>
        <member name="T:ComponentSpace.SAML2.Protocols.StatusDetail">
            <summary>
            Represents status detail.
            </summary>
            <remarks>
            Refer to the Assertions and Protocol for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.StatusDetail.IsValid(System.Xml.XmlElement)">
            <summary>
            Indicates whether the XML is a status detail.
            </summary>
            <param name="xmlElement">The XML to test.</param>
            <returns><c>true</c> if the XML is a status detail; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.StatusDetail.#ctor">
            <summary>
            Initializes a new instance of the <c>StatusDetail</c> class.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.StatusDetail.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <c>StatusDetail</c> class from XML.
            </summary>
            <param name="xmlElement">The status detail XML.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentSpace.SAML2.Protocols.StatusDetail.Details">
            <summary>
            Gets or sets the details. 
            </summary>
            <value>
            The details.
            </value>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.StatusDetail.ToXml(System.Xml.XmlDocument)">
            <summary>
            Serializes the status detail to XML.
            </summary>
            <param name="xmlDocument">The owning XML document.</param>
            <returns>The status detail as XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="T:ComponentSpace.SAML2.Protocols.StatusMessage">
            <summary>
            Represents a status message.
            </summary>
            <remarks>
            Refer to the Assertions and Protocol for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.StatusMessage.IsValid(System.Xml.XmlElement)">
            <summary>
            Indicates whether the XML is a status message.
            </summary>
            <param name="xmlElement">The XML to test.</param>
            <returns><c>true</c> if the XML is a status message; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.StatusMessage.#ctor">
            <summary>
            Initializes a new instance of the <c>StatusMessage</c> class.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.StatusMessage.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>StatusMessage</c> class.
            </summary>
            <param name="message">The status message.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.StatusMessage.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <c>StatusMessage</c> class from XML.
            </summary>
            <param name="xmlElement">The status message XML.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentSpace.SAML2.Protocols.StatusMessage.Message">
            <summary>
            Gets or sets the status message. 
            </summary>
            <value>
            The status message.
            </value>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.StatusMessage.ToXml(System.Xml.XmlDocument)">
            <summary>
            Serializes the status message to XML.
            </summary>
            <param name="xmlDocument">The owning XML document.</param>
            <returns>The status message as XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.StatusMessage.ToString">
            <summary>
            Returns the status message.
            </summary>
            <returns>The status message</returns>
        </member>
        <member name="T:ComponentSpace.SAML2.Protocols.StatusResponseType">
            <summary>
            Represents the status response type.
            </summary>
            <remarks>
            Refer to the Assertions and Protocol for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.StatusResponseType.GetIssuer(System.Xml.XmlElement)">
            <summary>
            Gets the issuer.
            </summary>
            <param name="xmlElement">The XML element containing the issuer as an offspring element.</param>
            <returns>The issuer or <c>null</c> if none.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.StatusResponseType.GetIssuerName(System.Xml.XmlElement)">
            <summary>
            Gets the issuer name.
            </summary>
            <param name="xmlElement">The XML element containing the issuer as an offspring element.</param>
            <returns>The issuer name or <c>null</c> if none.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.StatusResponseType.#ctor">
            <summary>
            Initializes a new instance of the <c>StatusResponseType</c> class.
            </summary>
            <remarks>
            The status response is initialized with a version number of 2.0,
            a random identifier, and the issue instant of now.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.StatusResponseType.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <c>StatusResponseType</c> class from XML.
            </summary>
            <param name="xmlElement">The response XML.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentSpace.SAML2.Protocols.StatusResponseType.ID">
            <summary>
            Gets or sets the ID. 
            </summary>
            <value>
            The ID.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Protocols.StatusResponseType.InResponseTo">
            <summary>
            Gets or sets the in response to.
            </summary>
            <value>
            The in response to.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Protocols.StatusResponseType.Version">
            <summary>
            Gets or sets the version.
            </summary>
            <value>
            The version. The default is 2.0.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Protocols.StatusResponseType.IssueInstant">
            <summary>
            Gets or sets the issue instant. 
            </summary>
            <value>
            The issue instant as coordinated universal time (UTC).
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Protocols.StatusResponseType.Destination">
            <summary>
            Gets or sets the destination.
            </summary>
            <value>
            The destination.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Protocols.StatusResponseType.Consent">
            <summary>
            Gets or sets the consent.
            </summary>
            <value>
            The consent.
            </value>
            <seealso cref="T:ComponentSpace.SAML2.SAMLIdentifiers.ConsentIdentifiers"/>
        </member>
        <member name="P:ComponentSpace.SAML2.Protocols.StatusResponseType.Issuer">
            <summary>
            Gets or sets the issuer. 
            </summary>
            <value>
            The issuer.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Protocols.StatusResponseType.Signature">
            <summary>
            Gets or sets the digital signature. 
            </summary>
            <value>
            The digital signature.
            </value>
            <remarks>
            To generate or verify signatures, use <see cref="T:ComponentSpace.SAML2.Protocols.SAMLMessageSignature"/>.
            </remarks>
            <seealso cref="T:ComponentSpace.SAML2.Protocols.SAMLMessageSignature"/>
        </member>
        <member name="P:ComponentSpace.SAML2.Protocols.StatusResponseType.Extensions">
            <summary>
            Gets or sets the extensions. 
            </summary>
            <value>
            The extensions.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Protocols.StatusResponseType.Status">
            <summary>
            Gets or sets the status. 
            </summary>
            <value>
            The status.
            </value>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.StatusResponseType.IsSuccess">
            <summary>
            Indicates whether the status indicates success or not.
            </summary>
            <returns><c>true</c> if the status indicates success; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.StatusResponseType.ToXml(System.Xml.XmlElement)">
            <summary>
            Serializes the status response to XML.
            </summary>
            <param name="xmlElement">The owning XML element.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="T:ComponentSpace.SAML2.Protocols.SubjectQuery">
            <summary>
            Represents a subject query.
            </summary>
            <remarks>
            Refer to the Assertions and Protocol for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.SubjectQuery.IsValid(System.Xml.XmlElement)">
            <summary>
            Indicates whether the XML is a subject query.
            </summary>
            <param name="xmlElement">The XML to test.</param>
            <returns><c>true</c> if the XML is a subject query; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.SubjectQuery.#ctor">
            <summary>
            Initializes a new instance of the <c>SubjectQuery</c> class.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.SubjectQuery.#ctor(ComponentSpace.SAML2.Assertions.Subject)">
            <summary>
            Initializes a new instance of the <c>SubjectQuery</c> class.
            </summary>
            <param name="subject">The subject.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.SubjectQuery.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <c>SubjectQuery</c> class from XML.
            </summary>
            <param name="xmlElement">The subject query XML.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.SubjectQuery.ToXml">
            <summary>
            Serializes the subject query to XML.
            </summary>
            <remarks>
            An XML document is created.
            </remarks>
            <returns>The subject query as XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.SubjectQuery.ToXml(System.Xml.XmlDocument)">
            <summary>
            Serializes the subject query to XML.
            </summary>
            <param name="xmlDocument">The owning XML document.</param>
            <returns>The subject query as XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.SubjectQuery.ToString">
            <summary>
            Converts the subject query to a string.
            </summary>
            <returns>The subject query as a string.</returns>
        </member>
        <member name="T:ComponentSpace.SAML2.Protocols.SubjectQueryAbstractType">
            <summary>
            Represents the subject query abstract type.
            </summary>
            <remarks>
            Refer to the Assertions and Protocol for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.SubjectQueryAbstractType.#ctor">
            <summary>
            Initializes a new instance of the <c>SubjectQueryAbstractType</c> class.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.SubjectQueryAbstractType.#ctor(ComponentSpace.SAML2.Assertions.Subject)">
            <summary>
            Initializes a new instance of the <c>SubjectQueryAbstractType</c> class.
            </summary>
            <param name="subject">The subject.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.SubjectQueryAbstractType.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <c>SubjectQueryAbstractType</c> class from XML.
            </summary>
            <param name="xmlElement">The subject query XML.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentSpace.SAML2.Protocols.SubjectQueryAbstractType.Subject">
            <summary>
            Gets or sets the subject. 
            </summary>
            <value>
            The subject.
            </value>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.SubjectQueryAbstractType.ToXml(System.Xml.XmlElement)">
            <summary>
            Serializes the subject query to XML.
            </summary>
            <param name="xmlElement">The owning XML element.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="T:ComponentSpace.SAML2.Protocols.Terminate">
            <summary>
            Represents a terminate.
            </summary>
            <remarks>
            Refer to the Assertions and Protocol for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.Terminate.IsValid(System.Xml.XmlElement)">
            <summary>
            Indicates whether the XML is a terminate.
            </summary>
            <param name="xmlElement">The XML to test.</param>
            <returns><c>true</c> if the XML is a terminate; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.Terminate.#ctor">
            <summary>
            Initializes a new instance of the <c>Terminate</c> class.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.Terminate.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <c>Terminate</c> class from XML.
            </summary>
            <param name="xmlElement">The terminate XML.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Protocols.Terminate.ToXml(System.Xml.XmlDocument)">
            <summary>
            Serializes the terminate to XML.
            </summary>
            <param name="xmlDocument">The owning XML document.</param>
            <returns>The terminate as XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="T:ComponentSpace.SAML2.SAMLController">
            <summary>
            The SAML controller maintains the SAML configuration and other properties.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.SAMLController.Initialize">
            <summary>
            Initializes the SAML environment.
            <para>
            This occurs automatically but may be forced if required.
            </para>
            <para>
            If the configuration resolver has been set then this this will be used.
            </para>
            <para>
            Otherwise, if configuration has been set programmatically then this will be used.
            </para>
            <para>
            Otherwise, a SAML configuration file is assumed and is loaded.
            </para>
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.SAMLController.Uninitialize">
            <summary>
            Uninitializes the SAML environment.
            <para>
            Any SAML configuration is unloaded.
            </para>
            </summary>
        </member>
        <member name="P:ComponentSpace.SAML2.SAMLController.SSOSessionStore">
            <summary>
            Gets or sets the single sign-on session store.
            <para>
            By default the HTTP session is used to store the single sign-on session. 
            </para>
            </summary>
            <value>
            The single sign-on session store.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.SAMLController.IDCache">
            <summary>
            Gets or sets the ID cache.
            <para>
            By default the in-memory cache is used. 
            The in-memory cache is suitable for applications deployed to a single server.
            </para>
            </summary>
            <value>
            The ID cache.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.SAMLController.CertificateManager">
            <summary>
            Gets or sets the certificate manager.
            <para>
            By default the configuration certificate manager is used. 
            The configuration certificate manager is suitable for certificates stored on the file system 
            or Windows certificate store.
            </para>
            </summary>
            <value>
            The certificate manager.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.SAMLController.ValidateMessagesAgainstSchema">
            <summary>
            Gets or sets the flag indicating whether SAML messages should be validated against the XML schema.
            <para>
            Validating SAML messages against the XML schema is good practice but does result in a small performance hit.
            </para>
            </summary>
            <value>
            The flag indicating whether SAML messages should be validated against the XML schema.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.SAMLController.ConfigurationResolver">
            <summary>
            Gets or sets the SAML configuration resolver.
            <para>
            The SAML configuration resolver is an alternative mechanism for providing SAML configuration
            rather than specifying a <c>SAMLConfiguration</c>.
            </para>
            </summary>
            <value>
            The SAML configuration resolver.
            </value>
            <seealso cref="P:ComponentSpace.SAML2.SAMLController.Configurations"/>
            <seealso cref="P:ComponentSpace.SAML2.SAMLController.ConfigurationName"/>
            <seealso cref="P:ComponentSpace.SAML2.SAMLController.Configuration"/>
        </member>
        <member name="P:ComponentSpace.SAML2.SAMLController.Configurations">
            <summary>
            Gets or sets the SAML configurations.
            <para>
            For most applications, a single SAML configuration is required.
            For multi-tenanted applications and other special use cases, multiple SAML configurations may be specified.
            </para>
            </summary>
            <value>
            The SAML configurations.
            </value>
            <seealso cref="P:ComponentSpace.SAML2.SAMLController.ConfigurationName"/>
            <seealso cref="P:ComponentSpace.SAML2.SAMLController.Configuration"/>
        </member>
        <member name="P:ComponentSpace.SAML2.SAMLController.ConfigurationName">
            <summary>
            Gets or sets the SAML configuration name for the current SAML SSO session.
            <para>
            For most applications, a single SAML configuration is used and the SAML configuration name is not required.
            For multi-tenanted applications and other special use cases with multiple SAML configurations, 
            the SAML name specifies the configuration to use.
            </para>
            </summary>
            <value>
            The SAML configuration name or <c>null</c> if none.
            </value>
            <seealso cref="P:ComponentSpace.SAML2.SAMLController.Configurations"/>
        </member>
        <member name="P:ComponentSpace.SAML2.SAMLController.Configuration">
            <summary>
            Gets or sets the SAML configuration.
            </summary>
            <value>
            The SAML configuration or <c>null</c> if none or more than one.
            </value>
            <seealso cref="P:ComponentSpace.SAML2.SAMLController.Configurations"/>
        </member>
        <member name="M:ComponentSpace.SAML2.SAMLController.DeleteSSOSession">
            <summary>
            Deletes the SAML SSO session state.
            </summary>
        </member>
        <member name="T:ComponentSpace.SAML2.SAMLIdentifiers">
            <summary>
            Defines SAML identifiers.
            </summary>
            <remarks>
            Refer to the Assertions and Protocol for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="T:ComponentSpace.SAML2.SAMLIdentifiers.Profile">
            <summary>
            The SAML profiles.
            </summary>
            <seealso cref="T:ComponentSpace.SAML2.SAMLIdentifiers.ProfileURIs"/>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.Profile.Unspecified">
            <summary>
            A special value indicating the profile has not been specified
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.Profile.SSOBrowser">
            <summary>
            SSO browser
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.Profile.SSOECP">
            <summary>
            Enhanced client or proxy
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.Profile.SSOLogout">
            <summary>
            SSO logout
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.Profile.NameIDManagement">
            <summary>
            Name identifier management
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.Profile.Artifact">
            <summary>
            Artifact resolution
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.Profile.Query">
            <summary>
            Assertion query/request
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.Profile.NameIDMapping">
            <summary>
            Name identifier mapping
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.Profile.BasicAttribute">
            <summary>
            Basic attribute
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.Profile.X500">
            <summary>
            X.500/LDAP attribute
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.Profile.UUID">
            <summary>
            UUID attribute
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.Profile.DCE">
            <summary>
            DCE PAC attribute
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.Profile.XACML">
            <summary>
            XACML attribute
            </summary>
        </member>
        <member name="T:ComponentSpace.SAML2.SAMLIdentifiers.ProfileURIs">
            <summary>
            The SAML profile URIs.
            </summary>
            <seealso cref="T:ComponentSpace.SAML2.SAMLIdentifiers.ProfileURIs"/>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.ProfileURIs.SSOBrowser">
            <summary>
            SSO browser
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.ProfileURIs.SSOECP">
            <summary>
            Enhanced client or proxy
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.ProfileURIs.SSOLogout">
            <summary>
            SSO logout
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.ProfileURIs.NameIDManagement">
            <summary>
            Name identifier management
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.ProfileURIs.Artifact">
            <summary>
            Artifact resolution
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.ProfileURIs.Query">
            <summary>
            Assertion query/request
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.ProfileURIs.NameIDMapping">
            <summary>
            Name identifier mapping
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.ProfileURIs.BasicAttribute">
            <summary>
            Basic attribute
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.ProfileURIs.X500">
            <summary>
            X.500/LDAP attribute
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.ProfileURIs.UUID">
            <summary>
            UUID attribute
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.ProfileURIs.DCE">
            <summary>
            DCE PAC attribute
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.ProfileURIs.XACML">
            <summary>
            XACML attribute
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.SAMLIdentifiers.ProfileURIs.ProfileToURI(ComponentSpace.SAML2.SAMLIdentifiers.Profile)">
            <summary>
            Converts the profile to the corresponding profile URI.
            </summary>
            <param name="profile">The profile.</param>
            <returns>The profile URI.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLProfileException">
            Thrown when the profile is invalid.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.SAMLIdentifiers.ProfileURIs.URIToProfile(System.String)">
            <summary>
            Converts the profile URI to the corresponding profile.
            </summary>
            <param name="profileURI">The profile URI.</param>
            <returns>The profile.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLProfileException">
            Thrown when the profile URI is invalid.
            </exception>
        </member>
        <member name="T:ComponentSpace.SAML2.SAMLIdentifiers.Binding">
            <summary>
            The SAML bindings.
            </summary>
            <seealso cref="T:ComponentSpace.SAML2.SAMLIdentifiers.BindingURIs"/>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.Binding.Unspecified">
            <summary>
            A special value indicating the binding has not been specified
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.Binding.SOAP">
            <summary>
            SOAP
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.Binding.PAOS">
            <summary>
            PAOS
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.Binding.HTTPRedirect">
            <summary>
            HTTP redirect
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.Binding.HTTPPost">
            <summary>
            HTTP POST
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.Binding.HTTPArtifact">
            <summary>
            HTTP artifact
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.Binding.URI">
            <summary>
            URI
            </summary>
        </member>
        <member name="T:ComponentSpace.SAML2.SAMLIdentifiers.BindingURIs">
            <summary>
            The SAML binding URIs.
            </summary>
            <seealso cref="N:ComponentSpace.SAML2.Bindings"/>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.BindingURIs.SOAP">
            <summary>
            SOAP
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.BindingURIs.PAOS">
            <summary>
            PAOS
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.BindingURIs.HTTPRedirect">
            <summary>
            HTTP redirect
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.BindingURIs.HTTPPost">
            <summary>
            HTTP POST
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.BindingURIs.HTTPArtifact">
            <summary>
            HTTP artifact
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.BindingURIs.URI">
            <summary>
            URI
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.SAMLIdentifiers.BindingURIs.BindingToURI(ComponentSpace.SAML2.SAMLIdentifiers.Binding)">
            <summary>
            Converts the binding to the corresponding binding URI.
            </summary>
            <param name="binding">The binding.</param>
            <returns>The binding URI.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLBindingException">
            Thrown when the binding is invalid.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.SAMLIdentifiers.BindingURIs.URIToBinding(System.String)">
            <summary>
            Converts the binding URI to the corresponding binding.
            </summary>
            <param name="bindingURI">The binding URI.</param>
            <returns>The binding.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLBindingException">
            Thrown when the binding URI is invalid.
            </exception>
        </member>
        <member name="T:ComponentSpace.SAML2.SAMLIdentifiers.MessageType">
            <summary>
            The SAML message types.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.MessageType.ArtifactResolve">
            <summary>
            Artifact Resolve
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.MessageType.ArtifactResponse">
            <summary>
            Artifact Response
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.MessageType.AssertionIDRequest">
            <summary>
            Assertion ID Request
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.MessageType.AttributeQuery">
            <summary>
            Attribute Query
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.MessageType.AuthnQuery">
            <summary>
            Authn Query
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.MessageType.AuthnRequest">
            <summary>
            Authn Request
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.MessageType.AuthzDecisionQuery">
            <summary>
            Authz Decision Query
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.MessageType.LogoutRequest">
            <summary>
            Logout Request
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.MessageType.LogoutResponse">
            <summary>
            Logout Response
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.MessageType.ManageNameIDRequest">
            <summary>
            Manage Name ID Request
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.MessageType.ManageNameIDResponse">
            <summary>
            Name ID Mapping Response
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.MessageType.NameIDMappingRequest">
            <summary>
            Name ID Mapping Request
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.MessageType.NameIDMappingResponse">
            <summary>
            Name ID Mapping Response
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.MessageType.SAMLResponse">
            <summary>
            SAML Response
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.MessageType.SubjectQuery">
            <summary>
            Subject Query
            </summary>
        </member>
        <member name="T:ComponentSpace.SAML2.SAMLIdentifiers.AuthnContextClasses">
            <summary>
            Authentication context classes.
            </summary>
            <seealso cref="T:ComponentSpace.SAML2.Assertions.AuthnContextClassRef"/>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.AuthnContextClasses.InternetProtocol">
            <summary>
            InternetProtocol.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.AuthnContextClasses.InternetProtocolPassword">
            <summary>
            InternetProtocolPassword.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.AuthnContextClasses.Kerberos">
            <summary>
            Kerberos.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.AuthnContextClasses.MobileOneFactorUnregistered">
            <summary>
            MobileOneFactorUnregistered.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.AuthnContextClasses.MobileTwoFactorUnregistered">
            <summary>
            MobileTwoFactorUnregistered.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.AuthnContextClasses.MobileOneFactorContract">
            <summary>
            MobileOneFactorContract.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.AuthnContextClasses.MobileTwoFactorContract">
            <summary>
            MobileTwoFactorContract.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.AuthnContextClasses.Password">
            <summary>
            Password.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.AuthnContextClasses.PasswordProtectedTransport">
            <summary>
            PasswordProtectedTransport.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.AuthnContextClasses.PreviousSession">
            <summary>
            PreviousSession.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.AuthnContextClasses.X509">
            <summary>
            X509.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.AuthnContextClasses.PGP">
            <summary>
            PGP.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.AuthnContextClasses.SPKI">
            <summary>
            SPKI.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.AuthnContextClasses.XMLDSig">
            <summary>
            XMLDSig.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.AuthnContextClasses.Smartcard">
            <summary>
            Smartcard.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.AuthnContextClasses.SmartcardPKI">
            <summary>
            SmartcardPKI.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.AuthnContextClasses.SoftwarePKI">
            <summary>
            SoftwarePKI.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.AuthnContextClasses.Telephony">
            <summary>
            Telephony.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.AuthnContextClasses.NomadTelephony">
            <summary>
            NomadTelephony.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.AuthnContextClasses.PersonalTelephony">
            <summary>
            PersonalTelephony.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.AuthnContextClasses.AuthenticatedTelephony">
            <summary>
            AuthenticatedTelephony.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.AuthnContextClasses.SecureRemotePassword">
            <summary>
            SecureRemotePassword.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.AuthnContextClasses.TLSClient">
            <summary>
            TLSClient.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.AuthnContextClasses.TimeSyncToken">
            <summary>
            TimeSyncToken.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.AuthnContextClasses.Unspecified">
            <summary>
            Unspecified.
            </summary>
        </member>
        <member name="T:ComponentSpace.SAML2.SAMLIdentifiers.AuthnContextComparison">
            <summary>
            Authentication context comparisons.
            </summary>
            <seealso cref="T:ComponentSpace.SAML2.Protocols.RequestedAuthnContext"/>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.AuthnContextComparison.Exact">
            <summary>
            Exact.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.AuthnContextComparison.Minimum">
            <summary>
            Minimum.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.AuthnContextComparison.Maximum">
            <summary>
            Maximum.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.AuthnContextComparison.Better">
            <summary>
            Better.
            </summary>
        </member>
        <member name="T:ComponentSpace.SAML2.SAMLIdentifiers.AuthzDecision">
            <summary>
            Authorization decisions.
            </summary>
            <seealso cref="T:ComponentSpace.SAML2.Assertions.AuthzDecisionStatement"/>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.AuthzDecision.Permit">
            <summary>
            Permit.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.AuthzDecision.Deny">
            <summary>
            Deny.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.AuthzDecision.Indeterminate">
            <summary>
            Indeterminate.
            </summary>
        </member>
        <member name="T:ComponentSpace.SAML2.SAMLIdentifiers.PrimaryStatusCodes">
            <summary>
            Top level status codes.
            </summary>
            <seealso cref="T:ComponentSpace.SAML2.Protocols.StatusCode"/>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.PrimaryStatusCodes.Success">
            <summary>
            Success.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.PrimaryStatusCodes.Requester">
            <summary>
            Requester.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.PrimaryStatusCodes.Responder">
            <summary>
            Responder.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.PrimaryStatusCodes.VersionMismatch">
            <summary>
            VersionMismatch.
            </summary>
        </member>
        <member name="T:ComponentSpace.SAML2.SAMLIdentifiers.SecondaryStatusCodes">
            <summary>
            Second level status codes.
            </summary>
            <seealso cref="T:ComponentSpace.SAML2.Protocols.StatusCode"/>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.SecondaryStatusCodes.AuthnFailed">
            <summary>
            AuthnFailed.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.SecondaryStatusCodes.InvalidAttrNameOrValue">
            <summary>
            InvalidAttrNameOrValue.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.SecondaryStatusCodes.InvalidNameIDPolicy">
            <summary>
            InvalidNameIDPolicy.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.SecondaryStatusCodes.NoAuthnContext">
            <summary>
            NoAuthnContext.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.SecondaryStatusCodes.NoAvailableIDP">
            <summary>
            NoAvailableIDP.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.SecondaryStatusCodes.NoPassive">
            <summary>
            NoPassive.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.SecondaryStatusCodes.NoSupportedIDP">
            <summary>
            NoSupportedIDP.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.SecondaryStatusCodes.PartialLogout">
            <summary>
            PartialLogout.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.SecondaryStatusCodes.ProxyCountExceeded">
            <summary>
            ProxyCountExceeded.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.SecondaryStatusCodes.RequestDenied">
            <summary>
            RequestDenied.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.SecondaryStatusCodes.RequestUnsupported">
            <summary>
            RequestUnsupported.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.SecondaryStatusCodes.RequestVersionDeprecated">
            <summary>
            RequestVersionDeprecated.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.SecondaryStatusCodes.RequestVersionTooHigh">
            <summary>
            RequestVersionTooHigh.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.SecondaryStatusCodes.RequestVersionTooLow">
            <summary>
            RequestVersionTooLow.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.SecondaryStatusCodes.ResourceNotRecognized">
            <summary>
            ResourceNotRecognized.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.SecondaryStatusCodes.TooManyResponses">
            <summary>
            TooManyResponses.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.SecondaryStatusCodes.UnknownAttrProfile">
            <summary>
            UnknownAttrProfile.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.SecondaryStatusCodes.UnknownPrincipal">
            <summary>
            UnknownPrincipal.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.SecondaryStatusCodes.UnsupportedBinding">
            <summary>
            UnsupportedBinding.
            </summary>
        </member>
        <member name="T:ComponentSpace.SAML2.SAMLIdentifiers.ActionNamespaces">
            <summary>
            Action namespace identifiers.
            </summary>
            <seealso cref="T:ComponentSpace.SAML2.Assertions.Action"/>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.ActionNamespaces.RWEDC">
            <summary>
            Read/Write/Execute/Delete/Control.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.ActionNamespaces.RWEDCWithNegation">
            <summary>
            Read/Write/Execute/Delete/Control with Negation.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.ActionNamespaces.GHPP">
            <summary>
            Get/Head/Put/Post.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.ActionNamespaces.Unix">
            <summary>
            UNIX File Permissions.
            </summary>
        </member>
        <member name="T:ComponentSpace.SAML2.SAMLIdentifiers.Actions">
            <summary>
            Actions.
            </summary>
            <seealso cref="T:ComponentSpace.SAML2.Assertions.Action"/>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.Actions.Read">
            <summary>
            Read.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.Actions.Write">
            <summary>
            Write.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.Actions.Execute">
            <summary>
            Execute.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.Actions.Delete">
            <summary>
            Delete.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.Actions.Control">
            <summary>
            Control.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.Actions.NotRead">
            <summary>
            Negated Read.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.Actions.NotWrite">
            <summary>
            Negated Write.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.Actions.NotExecute">
            <summary>
            Negated Execute.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.Actions.NotDelete">
            <summary>
            Negated Delete.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.Actions.NotControl">
            <summary>
            Negated Control.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.Actions.GET">
            <summary>
            GET.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.Actions.HEAD">
            <summary>
            HEAD.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.Actions.PUT">
            <summary>
            PUT.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.Actions.POST">
            <summary>
            POST.
            </summary>
        </member>
        <member name="T:ComponentSpace.SAML2.SAMLIdentifiers.AttributeNameFormats">
            <summary>
            Attribute name format identifiers.
            </summary>
            <seealso cref="T:ComponentSpace.SAML2.Assertions.SAMLAttribute"/>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.AttributeNameFormats.Unspecified">
            <summary>
            Unspecified.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.AttributeNameFormats.URI">
            <summary>
            URI.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.AttributeNameFormats.Basic">
            <summary>
            Basic.
            </summary>
        </member>
        <member name="T:ComponentSpace.SAML2.SAMLIdentifiers.NameIdentifierFormats">
            <summary>
            Name identifier format identifiers.
            </summary>
            <seealso cref="T:ComponentSpace.SAML2.Assertions.NameIDType"/>
            <seealso cref="T:ComponentSpace.SAML2.Assertions.NameID"/>
            <seealso cref="T:ComponentSpace.SAML2.Assertions.Issuer"/>
            <seealso cref="T:ComponentSpace.SAML2.Protocols.NameIDPolicy"/>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.NameIdentifierFormats.Unspecified">
            <summary>
            Unspecified.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.NameIdentifierFormats.EmailAddress">
            <summary>
            Email Address.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.NameIdentifierFormats.X509SubjectName">
            <summary>
            X.509 Subject Name.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.NameIdentifierFormats.WindowsDomainQualifiedName">
            <summary>
            Windows Domain Qualified Name.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.NameIdentifierFormats.Kerberos">
            <summary>
            Kerberos Principal Name.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.NameIdentifierFormats.Entity">
            <summary>
            Entity Identifier.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.NameIdentifierFormats.Persistent">
            <summary>
            Persistent Identifier.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.NameIdentifierFormats.Transient">
            <summary>
            Transient Identifier.
            </summary>
        </member>
        <member name="T:ComponentSpace.SAML2.SAMLIdentifiers.ConsentIdentifiers">
            <summary>
            Consent identifiers.
            </summary>
            <seealso cref="T:ComponentSpace.SAML2.Protocols.RequestAbstractType"/>
            <seealso cref="T:ComponentSpace.SAML2.Protocols.StatusResponseType"/>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.ConsentIdentifiers.Unspecified">
            <summary>
            Unspecified.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.ConsentIdentifiers.Obtained">
            <summary>
            Obtained.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.ConsentIdentifiers.Prior">
            <summary>
            Prior.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.ConsentIdentifiers.Implicit">
            <summary>
            Implicit.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.ConsentIdentifiers.Explicit">
            <summary>
            Explicit.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.ConsentIdentifiers.Unavailable">
            <summary>
            Unavailable.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.ConsentIdentifiers.Inapplicable">
            <summary>
            Inapplicable.
            </summary>
        </member>
        <member name="T:ComponentSpace.SAML2.SAMLIdentifiers.SubjectConfirmationMethods">
            <summary>
            Consent identifiers.
            </summary>
            <seealso cref="T:ComponentSpace.SAML2.Assertions.SubjectConfirmation"/>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.SubjectConfirmationMethods.HolderOfKey">
            <summary>
            Holder of key.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.SubjectConfirmationMethods.SenderVouches">
            <summary>
            Sender vouches.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.SubjectConfirmationMethods.Bearer">
            <summary>
            Bearer.
            </summary>
        </member>
        <member name="T:ComponentSpace.SAML2.SAMLIdentifiers.DigestMethods">
            <summary>
            Digest methods.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.DigestMethods.SHA1">
            <summary>
            SHA1.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.DigestMethods.SHA256">
            <summary>
            SHA256.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.DigestMethods.SHA384">
            <summary>
            RSA-SHA384.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.DigestMethods.SHA512">
            <summary>
            RSA-SHA512.
            </summary>
        </member>
        <member name="T:ComponentSpace.SAML2.SAMLIdentifiers.SignatureMethods">
            <summary>
            Signature methods.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.SignatureMethods.DSA_SHA1">
            <summary>
            DSA-SHA1.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.SignatureMethods.RSA_SHA1">
            <summary>
            RSA-SHA1.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.SignatureMethods.RSA_SHA256">
            <summary>
            RSA-SHA256.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.SignatureMethods.RSA_SHA384">
            <summary>
            RSA-SHA384.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.SignatureMethods.RSA_SHA512">
            <summary>
            RSA-SHA512.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.SignatureMethods.RSA_MGF1_SHA1">
            <summary>
            RSA-MGF1-SHA1.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.SignatureMethods.RSA_MGF1_SHA256">
            <summary>
            RSA-MGF1-SHA256.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.SignatureMethods.RSA_MGF1_SHA384">
            <summary>
            RSA-MGF1-SHA384.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.SignatureMethods.RSA_MGF1_SHA512">
            <summary>
            RSA-MGF1-SHA512.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.SignatureMethods.ECDSA_SHA1">
            <summary>
            ECDSA-SHA1.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.SignatureMethods.ECDSA_SHA256">
            <summary>
            ECDSA-SHA256.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.SignatureMethods.ECDSA_SHA384">
            <summary>
            ECDSA-SHA384.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.SignatureMethods.ECDSA_SHA512">
            <summary>
            ECDSA-SHA512.
            </summary>
        </member>
        <member name="T:ComponentSpace.SAML2.SAMLIdentifiers.KeyEncryptionMethods">
            <summary>
            Key encryption methods.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.KeyEncryptionMethods.RSA_V1_5">
            <summary>
            RSA v1.5.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.KeyEncryptionMethods.RSA_OAEP">
            <summary>
            RSA OAEP.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.KeyEncryptionMethods.RSA_OAEP_MGF1P">
            <summary>
            RSA OAEP MGF1P.
            </summary>
        </member>
        <member name="T:ComponentSpace.SAML2.SAMLIdentifiers.DataEncryptionMethods">
            <summary>
            Data encryption methods.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.DataEncryptionMethods.TRIPLE_DES">
            <summary>
            Triple DES.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.DataEncryptionMethods.KW_TRIPLE_DES">
            <summary>
            Key wrap triple DES.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.DataEncryptionMethods.AES_128">
            <summary>
            AES 128.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.DataEncryptionMethods.KW_AES_128">
            <summary>
            Key wrap AES 128.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.DataEncryptionMethods.AES_192">
            <summary>
            AES 192.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.DataEncryptionMethods.KW_AES_192">
            <summary>
            Key wrap AES 192.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.DataEncryptionMethods.AES_256">
            <summary>
            AES 256.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.DataEncryptionMethods.KW_AES_256">
            <summary>
            Key wrap AES 256.
            </summary>
        </member>
        <member name="T:ComponentSpace.SAML2.SAMLIdentifiers.CryptographicServiceProviderNames">
            <summary>
            Windows Cryptographic Service Provider (CSP) names.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.CryptographicServiceProviderNames.MicrosoftEnhancedRSAandAESCryptographicProvider">
            <summary>
            Microsoft Enhanced RSA and AES Cryptographic Provider (type 24).
            </summary>
        </member>
        <member name="T:ComponentSpace.SAML2.SAMLIdentifiers.CryptographicServiceProviderTypes">
            <summary>
            Windows Cryptographic Service Provider (CSP) types.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.SAMLIdentifiers.CryptographicServiceProviderTypes.PROV_RSA_AES">
            <summary>
            PROV_RSA_AES.
            </summary>
        </member>
        <member name="T:ComponentSpace.SAML2.SAMLIdentityProvider">
            <summary>
            Provides Identity Provider (IdP) support for web browser single sign-on.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.SAMLIdentityProvider.IsSSO">
            <summary>
            Indicates whether the identity provider is currently single signed-on to a service provider.
            </summary>
            <returns><c>true</c> if currently single signed-on; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.SAMLIdentityProvider.IsSSO(System.String)">
            <summary>
            Indicates whether the identity provider is currently single signed-on to a service provider.
            </summary>
            <param name="partnerSP">The partner service provider name.</param>
            <returns><c>true</c> if currently single signed-on; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.SAMLIdentityProvider.IsSSOCompletionPending">
            <summary>
            Indicates whether single sign-on to a service provider is pending.
            <para>
            Single sign-on is pending if an authn request has been received from a service provider and a SAML response is pending.
            </para>
            </summary>
            <returns><c>true</c> if single sign-on is pending; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.SAMLIdentityProvider.IsSSOCompletionPending(System.String)">
            <summary>
            Indicates whether single sign-on to a service provider is pending.
            <para>
            Single sign-on is pending if an authn request has been received from the service provider and a SAML response is pending.
            </para>
            </summary>
            <param name="partnerSP">The partner service provider name.</param>
            <returns><c>true</c> if single sign-on is pending; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.SAMLIdentityProvider.CanSLO">
            <summary>
            Indicates whether the identity provider can single logout to one or more service providers.
            <para>
            To single logout, one or more service providers must have successfully completed SSO and also support SLO.
            </para>
            </summary>
            <returns><c>true</c> if single logout can occur; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.SAMLIdentityProvider.CanSLO(System.String)">
            <summary>
            Indicates whether the identity provider can single logout to a service provider.
            <para>
            To single logout, the service provider must have successfully completed SSO and also support SLO.
            </para>
            </summary>
            <param name="partnerSP">The partner service provider name.</param>
            <returns><c>true</c> if single logout can occur; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.SAMLIdentityProvider.IsSLOCompletionPending">
            <summary>
            Indicates whether a single logout response to a service provider is pending.
            <para>
            Single logout is pending if a logout request has been received from a service provider and a logout response is pending
            or a logout request has been sent to a service provider and a logout response is pending.
            </para>
            </summary>
            <returns><c>true</c> if single logout is pending; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.SAMLIdentityProvider.IsSLOCompletionPending(System.String)">
            <summary>
            Indicates whether a single logout response to a service provider is pending.
            <para>
            Single logout is pending if a logout request has been received from a service provider and a logout response is pending
            or a logout request has been sent to a service provider and a logout response is pending.
            </para>
            </summary>
            <param name="partnerSP">The partner service provider name.</param>
            <returns><c>true</c> if single logout is pending; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.SAMLIdentityProvider.GetPartnerPendingResponse">
            <summary>
            Gets the name of the partner service provider to which a single sign-on or logout response is pending.
            </summary>
            <returns>The name of the partner service provider or <c>null</c> if none.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.SAMLIdentityProvider.InitiateSSO(System.Web.HttpResponseBase,System.String,System.String)">
            <summary>
            Initiates single sign-on from the identity provider to the service provider (ie. IdP-initiated SSO).
            <para>
            A SAML response containing a SAML assertion is sent to the service provider.
            </para>
            </summary>
            <param name="httpResponse">The HTTP response.</param>
            <param name="userName">The user name to include in the SAML assertion.</param>
            <param name="relayState">The relay state (eg target URL) or <c>null</c> if none.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the single sign-on fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.SAMLIdentityProvider.InitiateSSO(System.Web.HttpResponseBase,System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String)">
            <summary>
            Initiates single sign-on from the identity provider to the service provider (ie. IdP-initiated SSO).
            <para>
            A SAML response containing a SAML assertion is sent to the service provider.
            </para>
            </summary>
            <param name="httpResponse">The HTTP response.</param>
            <param name="userName">The user name to include in the SAML assertion.</param>
            <param name="attributes">The attributes to include in the SAML assertion or <c>null</c> if none.</param>
            <param name="relayState">The relay state (eg target URL) or <c>null</c> if none.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the single sign-on fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.SAMLIdentityProvider.InitiateSSO(System.Web.HttpResponseBase,System.String,ComponentSpace.SAML2.Assertions.SAMLAttribute[],System.String)">
            <summary>
            Initiates single sign-on from the identity provider to the service provider (ie. IdP-initiated SSO).
            <para>
            A SAML response containing a SAML assertion is sent to the service provider.
            </para>
            </summary>
            <param name="httpResponse">The HTTP response.</param>
            <param name="userName">The user name to include in the SAML assertion.</param>
            <param name="attributes">The attributes to include in the SAML assertion or <c>null</c> if none.</param>
            <param name="relayState">The relay state (eg target URL) or <c>null</c> if none.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the single sign-on fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.SAMLIdentityProvider.InitiateSSO(System.Web.HttpResponseBase,System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String)">
            <summary>
            Initiates single sign-on from the identity provider to the specified service provider (ie. IdP-initiated SSO).
            <para>
            A SAML response containing a SAML assertion is sent to the service provider.
            </para>
            </summary>
            <param name="httpResponse">The HTTP response.</param>
            <param name="userName">The user name to include in the SAML assertion.</param>
            <param name="attributes">The attributes to include in the SAML assertion or <c>null</c> if none.</param>
            <param name="relayState">The relay state (eg target URL) or <c>null</c> if none.</param>
            <param name="partnerSP">The partner service provider name or <c>null</c>.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the single sign-on fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.SAMLIdentityProvider.InitiateSSO(System.Web.HttpResponseBase,System.String,ComponentSpace.SAML2.Assertions.SAMLAttribute[],System.String,System.String)">
            <summary>
            Initiates single sign-on from the identity provider to the specified service provider (ie. IdP-initiated SSO).
            <para>
            A SAML response containing a SAML assertion is sent to the service provider.
            </para>
            </summary>
            <param name="httpResponse">The HTTP response.</param>
            <param name="userName">The user name to include in the SAML assertion.</param>
            <param name="attributes">The attributes to include in the SAML assertion or <c>null</c> if none.</param>
            <param name="relayState">The relay state (eg target URL) or <c>null</c> if none.</param>
            <param name="partnerSP">The partner service provider name or <c>null</c>.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the single sign-on fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.SAMLIdentityProvider.InitiateSSO(System.Web.HttpResponseBase,System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,System.String,System.String)">
            <summary>
            Initiates single sign-on from the identity provider to the specified service provider (ie. IdP-initiated SSO).
            <para>
            A SAML response containing a SAML assertion is sent to the service provider.
            </para>
            </summary>
            <param name="httpResponse">The HTTP response.</param>
            <param name="userName">The user name to include in the SAML assertion.</param>
            <param name="attributes">The attributes to include in the SAML assertion or <c>null</c> if none.</param>
            <param name="authnContext">The authentication context identifying how the user was authenticated or <c>null</c> if the configured value is to be used.</param>
            <param name="relayState">The relay state (eg target URL) or <c>null</c> if none.</param>
            <param name="partnerSP">The partner service provider name or <c>null</c>.</param>
            <param name="assertionConsumerServiceUrl">The assertion consumer service URL or <c>null</c> if the configured URL is to be used.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the single sign-on fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.SAMLIdentityProvider.InitiateSSO(System.Web.HttpResponseBase,System.String,ComponentSpace.SAML2.Assertions.SAMLAttribute[],System.String,System.String,System.String,System.String)">
            <summary>
            Initiates single sign-on from the identity provider to the specified service provider (ie. IdP-initiated SSO).
            <para>
            A SAML response containing a SAML assertion is sent to the service provider.
            </para>
            </summary>
            <param name="httpResponse">The HTTP response.</param>
            <param name="userName">The user name to include in the SAML assertion.</param>
            <param name="attributes">The attributes to include in the SAML assertion or <c>null</c> if none.</param>
            <param name="authnContext">The authentication context identifying how the user was authenticated or <c>null</c> if the configured value is to be used.</param>
            <param name="relayState">The relay state (eg target URL) or <c>null</c> if none.</param>
            <param name="partnerSP">The partner service provider name or <c>null</c>.</param>
            <param name="assertionConsumerServiceUrl">The assertion consumer service URL or <c>null</c> if the configured URL is to be used.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the single sign-on fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.SAMLIdentityProvider.ReceiveSSO(System.Web.HttpRequestBase,System.String@)">
            <summary>
            Receives a single sign-on request from a service provider (ie. SP-initiated SSO).
            <para>
            An authn request is received from the service provider.
            </para>
            </summary>
            <param name="httpRequest">The HTTP request.</param>
            <param name="partnerSP">The partner service provider name.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the single sign-on fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.SAMLIdentityProvider.ReceiveSSO(System.Web.HttpRequestBase,System.String@,ComponentSpace.SAML2.SSOOptions@)">
            <summary>
            Receives a single sign-on request from a service provider (ie. SP-initiated SSO).
            <para>
            An authn request is received from the service provider.
            </para>
            </summary>
            <param name="httpRequest">The HTTP request.</param>
            <param name="partnerSP">The partner service provider name.</param>
            <param name="ssoOptions">The SSO options.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the single sign-on fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.SAMLIdentityProvider.SendSSO(System.Web.HttpResponseBase,System.String)">
            <summary>
            Sends a single sign-on response as part of SP-initiated SSO.
            <para>
            A SAML response containing a SAML assertion is sent to the service provider.
            </para>
            </summary>
            <param name="httpResponse">The HTTP response</param>
            <param name="userName">The user name to include in the SAML assertion.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the single sign-on fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.SAMLIdentityProvider.SendSSO(System.Web.HttpResponseBase,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Sends a single sign-on response as part of SP-initiated SSO.
            <para>
            A SAML response containing a SAML assertion is sent to the service provider.
            </para>
            </summary>
            <param name="httpResponse">The HTTP response</param>
            <param name="userName">The user name to include in the SAML assertion.</param>
            <param name="attributes">The attributes to include in the SAML assertion or <c>null</c> if none.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the single sign-on fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.SAMLIdentityProvider.SendSSO(System.Web.HttpResponseBase,System.String,ComponentSpace.SAML2.Assertions.SAMLAttribute[])">
            <summary>
            Sends a single sign-on response as part of SP-initiated SSO.
            <para>
            A SAML response containing a SAML assertion is sent to the service provider.
            </para>
            </summary>
            <param name="httpResponse">The HTTP response</param>
            <param name="userName">The user name to include in the SAML assertion.</param>
            <param name="attributes">The attributes to include in the SAML assertion or <c>null</c> if none.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the single sign-on fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.SAMLIdentityProvider.SendSSO(System.Web.HttpResponseBase,System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String)">
            <summary>
            Sends a single sign-on response as part of SP-initiated SSO.
            <para>
            A SAML response containing a SAML assertion is sent to the service provider.
            </para>
            </summary>
            <param name="httpResponse">The HTTP response</param>
            <param name="userName">The user name to include in the SAML assertion.</param>
            <param name="attributes">The attributes to include in the SAML assertion or <c>null</c> if none.</param>
            <param name="authnContext">The authentication context identifying how the user was authenticated or <c>null</c> if the configured value is to be used.</param>
            <param name="assertionConsumerServiceUrl">The assertion consumer service URL or <c>null</c> if the configured URL is to be used.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the single sign-on fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.SAMLIdentityProvider.SendSSO(System.Web.HttpResponseBase,System.String,ComponentSpace.SAML2.Assertions.SAMLAttribute[],System.String,System.String)">
            <summary>
            Sends a single sign-on response as part of SP-initiated SSO.
            <para>
            A SAML response containing a SAML assertion is sent to the service provider.
            </para>
            </summary>
            <param name="httpResponse">The HTTP response</param>
            <param name="userName">The user name to include in the SAML assertion.</param>
            <param name="attributes">The attributes to include in the SAML assertion or <c>null</c> if none.</param>
            <param name="authnContext">The authentication context identifying how the user was authenticated or <c>null</c> if the configured value is to be used.</param>
            <param name="assertionConsumerServiceUrl">The assertion consumer service URL or <c>null</c> if the configured URL is to be used.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the single sign-on fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.SAMLIdentityProvider.SendSSO(System.Web.HttpResponseBase,System.String,System.String)">
            <summary>
            Sends a single sign-on error response as part of SP-initiated SSO.
            <para>
            A SAML error response is sent to the service provider.
            </para>
            </summary>
            <param name="httpResponse">The HTTP response</param>
            <param name="statusCode">The error status code.</param>
            <param name="statusMessage">The status message or <c>null</c> if none.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the single sign-on fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.SAMLIdentityProvider.SendSSO(System.Web.HttpResponseBase,ComponentSpace.SAML2.Protocols.Status)">
            <summary>
            Sends a single sign-on error response as part of SP-initiated SSO.
            <para>
            A SAML error response is sent to the service provider.
            </para>
            </summary>
            <param name="httpResponse">The HTTP response</param>
            <param name="status">The error status.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the single sign-on fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.SAMLIdentityProvider.SendSSO(System.Web.HttpResponseBase,System.String,System.String,System.String)">
            <summary>
            Sends a single sign-on error response as part of SP-initiated SSO.
            <para>
            A SAML error response is sent to the service provider.
            </para>
            </summary>
            <param name="httpResponse">The HTTP response</param>
            <param name="statusCode">The error status code.</param>
            <param name="statusMessage">The status message or <c>null</c> if none.</param>
            <param name="assertionConsumerServiceUrl">The assertion consumer service URL or <c>null</c> if the configured URL is to be used.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the single sign-on fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.SAMLIdentityProvider.SendSSO(System.Web.HttpResponseBase,ComponentSpace.SAML2.Protocols.Status,System.String)">
            <summary>
            Sends a single sign-on error response as part of SP-initiated SSO.
            <para>
            A SAML error response is sent to the service provider.
            </para>
            </summary>
            <param name="httpResponse">The HTTP response</param>
            <param name="status">The error status.</param>
            <param name="assertionConsumerServiceUrl">The assertion consumer service URL or <c>null</c> if the configured URL is to be used.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the single sign-on fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.SAMLIdentityProvider.InitiateSLO(System.Web.HttpResponseBase,System.String,System.String)">
            <summary>
            Initiates single logout from the identity provider to the service providers (ie. IdP-initiated SLO).
            <para>
            A logout request is sent to the service providers that are signed in.
            </para>
            </summary>
            <param name="httpResponse">The HTTP response.</param>
            <param name="logoutReason">The logout reason or <c>null</c> if none.</param>
            <param name="relayState">The relay state or <c>null</c> if none.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the single logout fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.SAMLIdentityProvider.ReceiveSLO(System.Web.HttpRequestBase,System.Web.HttpResponseBase,System.Boolean@,System.Boolean@,System.String@,System.String@,System.String@)">
            <summary>
            Receives a single logout request (ie. SP-initiated SLO) or single logout response  (ie. IdP-initiated SLO) from a service provider.
            </summary>
            <param name="httpRequest">The HTTP request.</param>
            <param name="httpResponse">The HTTP response.</param>
            <param name="isRequest"><c>true</c> if a logout request has been received; otherwise <c>false</c> if a logout response has been received.</param>
            <param name="hasCompleted"><c>true</c> if IdP-initiated SLO has completed; otherwise <c>false</c>.</param>
            <param name="logoutReason">The reason associated with the logout request or <c>null</c> if none.</param>
            <param name="partnerSP">The partner service provider name.</param>
            <param name="relayState">The relay state or <c>null</c> if none.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the single logout fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.SAMLIdentityProvider.SendSLO(System.Web.HttpResponseBase,System.String)">
            <summary>
            Sends a single logout message to a service provider (ie. SP-initiated SLO).
            </summary>
            <param name="httpResponse">The HTTP response.</param>
            <param name="errorMessage">The error message or <c>null</c> if logout was successful.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.SAMLIdentityProvider.InitiateSSO(System.Web.HttpResponse,System.String,System.String)">
            <summary>
            Initiates single sign-on from the identity provider to the service provider (ie. IdP-initiated SSO).
            <para>
            A SAML response containing a SAML assertion is sent to the service provider.
            </para>
            </summary>
            <param name="httpResponse">The HTTP response.</param>
            <param name="userName">The user name to include in the SAML assertion.</param>
            <param name="relayState">The relay state (eg target URL) or <c>null</c> if none.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the single sign-on fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.SAMLIdentityProvider.InitiateSSO(System.Web.HttpResponse,System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String)">
            <summary>
            Initiates single sign-on from the identity provider to the service provider (ie. IdP-initiated SSO).
            <para>
            A SAML response containing a SAML assertion is sent to the service provider.
            </para>
            </summary>
            <param name="httpResponse">The HTTP response.</param>
            <param name="userName">The user name to include in the SAML assertion.</param>
            <param name="attributes">The attributes to include in the SAML assertion or <c>null</c> if none.</param>
            <param name="relayState">The relay state (eg target URL) or <c>null</c> if none.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the single sign-on fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.SAMLIdentityProvider.InitiateSSO(System.Web.HttpResponse,System.String,ComponentSpace.SAML2.Assertions.SAMLAttribute[],System.String)">
            <summary>
            Initiates single sign-on from the identity provider to the service provider (ie. IdP-initiated SSO).
            <para>
            A SAML response containing a SAML assertion is sent to the service provider.
            </para>
            </summary>
            <param name="httpResponse">The HTTP response.</param>
            <param name="userName">The user name to include in the SAML assertion.</param>
            <param name="attributes">The attributes to include in the SAML assertion or <c>null</c> if none.</param>
            <param name="relayState">The relay state (eg target URL) or <c>null</c> if none.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the single sign-on fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.SAMLIdentityProvider.InitiateSSO(System.Web.HttpResponse,System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String)">
            <summary>
            Initiates single sign-on from the identity provider to the specified service provider (ie. IdP-initiated SSO).
            <para>
            A SAML response containing a SAML assertion is sent to the service provider.
            </para>
            </summary>
            <param name="httpResponse">The HTTP response.</param>
            <param name="userName">The user name to include in the SAML assertion.</param>
            <param name="attributes">The attributes to include in the SAML assertion or <c>null</c> if none.</param>
            <param name="relayState">The relay state (eg target URL) or <c>null</c> if none.</param>
            <param name="partnerSP">The partner service provider name or <c>null</c>.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the single sign-on fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.SAMLIdentityProvider.InitiateSSO(System.Web.HttpResponse,System.String,ComponentSpace.SAML2.Assertions.SAMLAttribute[],System.String,System.String)">
            <summary>
            Initiates single sign-on from the identity provider to the specified service provider (ie. IdP-initiated SSO).
            <para>
            A SAML response containing a SAML assertion is sent to the service provider.
            </para>
            </summary>
            <param name="httpResponse">The HTTP response.</param>
            <param name="userName">The user name to include in the SAML assertion.</param>
            <param name="attributes">The attributes to include in the SAML assertion or <c>null</c> if none.</param>
            <param name="relayState">The relay state (eg target URL) or <c>null</c> if none.</param>
            <param name="partnerSP">The partner service provider name or <c>null</c>.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the single sign-on fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.SAMLIdentityProvider.InitiateSSO(System.Web.HttpResponse,System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,System.String,System.String)">
            <summary>
            Initiates single sign-on from the identity provider to the specified service provider (ie. IdP-initiated SSO).
            <para>
            A SAML response containing a SAML assertion is sent to the service provider.
            </para>
            </summary>
            <param name="httpResponse">The HTTP response.</param>
            <param name="userName">The user name to include in the SAML assertion.</param>
            <param name="attributes">The attributes to include in the SAML assertion or <c>null</c> if none.</param>
            <param name="authnContext">The authentication context identifying how the user was authenticated or <c>null</c> if the configured value is to be used.</param>
            <param name="relayState">The relay state (eg target URL) or <c>null</c> if none.</param>
            <param name="partnerSP">The partner service provider name or <c>null</c>.</param>
            <param name="assertionConsumerServiceUrl">The assertion consumer service URL or <c>null</c> if the configured URL is to be used.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the single sign-on fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.SAMLIdentityProvider.InitiateSSO(System.Web.HttpResponse,System.String,ComponentSpace.SAML2.Assertions.SAMLAttribute[],System.String,System.String,System.String,System.String)">
            <summary>
            Initiates single sign-on from the identity provider to the specified service provider (ie. IdP-initiated SSO).
            <para>
            A SAML response containing a SAML assertion is sent to the service provider.
            </para>
            </summary>
            <param name="httpResponse">The HTTP response.</param>
            <param name="userName">The user name to include in the SAML assertion.</param>
            <param name="attributes">The attributes to include in the SAML assertion or <c>null</c> if none.</param>
            <param name="authnContext">The authentication context identifying how the user was authenticated or <c>null</c> if the configured value is to be used.</param>
            <param name="relayState">The relay state (eg target URL) or <c>null</c> if none.</param>
            <param name="partnerSP">The partner service provider name or <c>null</c>.</param>
            <param name="assertionConsumerServiceUrl">The assertion consumer service URL or <c>null</c> if the configured URL is to be used.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the single sign-on fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.SAMLIdentityProvider.ReceiveSSO(System.Web.HttpRequest,System.String@)">
            <summary>
            Receives a single sign-on request from a service provider (ie. SP-initiated SSO).
            <para>
            An authn request is received from the service provider.
            </para>
            </summary>
            <param name="httpRequest">The HTTP request.</param>
            <param name="partnerSP">The partner service provider name.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the single sign-on fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.SAMLIdentityProvider.ReceiveSSO(System.Web.HttpRequest,System.String@,ComponentSpace.SAML2.SSOOptions@)">
            <summary>
            Receives a single sign-on request from a service provider (ie. SP-initiated SSO).
            <para>
            An authn request is received from the service provider.
            </para>
            </summary>
            <param name="httpRequest">The HTTP request.</param>
            <param name="partnerSP">The partner service provider name.</param>
            <param name="ssoOptions">The SSO options.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the single sign-on fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.SAMLIdentityProvider.SendSSO(System.Web.HttpResponse,System.String)">
            <summary>
            Sends a single sign-on response as part of SP-initiated SSO.
            <para>
            A SAML response containing a SAML assertion is sent to the service provider.
            </para>
            </summary>
            <param name="httpResponse">The HTTP response</param>
            <param name="userName">The user name to include in the SAML assertion.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the single sign-on fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.SAMLIdentityProvider.SendSSO(System.Web.HttpResponse,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Sends a single sign-on response as part of SP-initiated SSO.
            <para>
            A SAML response containing a SAML assertion is sent to the service provider.
            </para>
            </summary>
            <param name="httpResponse">The HTTP response</param>
            <param name="userName">The user name to include in the SAML assertion.</param>
            <param name="attributes">The attributes to include in the SAML assertion or <c>null</c> if none.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the single sign-on fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.SAMLIdentityProvider.SendSSO(System.Web.HttpResponse,System.String,ComponentSpace.SAML2.Assertions.SAMLAttribute[])">
            <summary>
            Sends a single sign-on response as part of SP-initiated SSO.
            <para>
            A SAML response containing a SAML assertion is sent to the service provider.
            </para>
            </summary>
            <param name="httpResponse">The HTTP response</param>
            <param name="userName">The user name to include in the SAML assertion.</param>
            <param name="attributes">The attributes to include in the SAML assertion or <c>null</c> if none.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the single sign-on fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.SAMLIdentityProvider.SendSSO(System.Web.HttpResponse,System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String)">
            <summary>
            Sends a single sign-on response as part of SP-initiated SSO.
            <para>
            A SAML response containing a SAML assertion is sent to the service provider.
            </para>
            </summary>
            <param name="httpResponse">The HTTP response</param>
            <param name="userName">The user name to include in the SAML assertion.</param>
            <param name="attributes">The attributes to include in the SAML assertion or <c>null</c> if none.</param>
            <param name="authnContext">The authentication context identifying how the user was authenticated or <c>null</c> if the configured value is to be used.</param>
            <param name="assertionConsumerServiceUrl">The assertion consumer service URL or <c>null</c> if the configured URL is to be used.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the single sign-on fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.SAMLIdentityProvider.SendSSO(System.Web.HttpResponse,System.String,ComponentSpace.SAML2.Assertions.SAMLAttribute[],System.String,System.String)">
            <summary>
            Sends a single sign-on response as part of SP-initiated SSO.
            <para>
            A SAML response containing a SAML assertion is sent to the service provider.
            </para>
            </summary>
            <param name="httpResponse">The HTTP response</param>
            <param name="userName">The user name to include in the SAML assertion.</param>
            <param name="attributes">The attributes to include in the SAML assertion or <c>null</c> if none.</param>
            <param name="authnContext">The authentication context identifying how the user was authenticated or <c>null</c> if the configured value is to be used.</param>
            <param name="assertionConsumerServiceUrl">The assertion consumer service URL or <c>null</c> if the configured URL is to be used.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the single sign-on fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.SAMLIdentityProvider.SendSSO(System.Web.HttpResponse,System.String,System.String)">
            <summary>
            Sends a single sign-on error response as part of SP-initiated SSO.
            <para>
            A SAML error response is sent to the service provider.
            </para>
            </summary>
            <param name="httpResponse">The HTTP response</param>
            <param name="statusCode">The error status code.</param>
            <param name="statusMessage">The status message or <c>null</c> if none.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the single sign-on fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.SAMLIdentityProvider.SendSSO(System.Web.HttpResponse,ComponentSpace.SAML2.Protocols.Status)">
            <summary>
            Sends a single sign-on error response as part of SP-initiated SSO.
            <para>
            A SAML error response is sent to the service provider.
            </para>
            </summary>
            <param name="httpResponse">The HTTP response</param>
            <param name="status">The error status.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the single sign-on fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.SAMLIdentityProvider.SendSSO(System.Web.HttpResponse,System.String,System.String,System.String)">
            <summary>
            Sends a single sign-on error response as part of SP-initiated SSO.
            <para>
            A SAML error response is sent to the service provider.
            </para>
            </summary>
            <param name="httpResponse">The HTTP response</param>
            <param name="statusCode">The error status code.</param>
            <param name="statusMessage">The status message or <c>null</c> if none.</param>
            <param name="assertionConsumerServiceUrl">The assertion consumer service URL or <c>null</c> if the configured URL is to be used.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the single sign-on fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.SAMLIdentityProvider.SendSSO(System.Web.HttpResponse,ComponentSpace.SAML2.Protocols.Status,System.String)">
            <summary>
            Sends a single sign-on error response as part of SP-initiated SSO.
            <para>
            A SAML error response is sent to the service provider.
            </para>
            </summary>
            <param name="httpResponse">The HTTP response</param>
            <param name="status">The error status.</param>
            <param name="assertionConsumerServiceUrl">The assertion consumer service URL or <c>null</c> if the configured URL is to be used.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the single sign-on fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.SAMLIdentityProvider.InitiateSLO(System.Web.HttpResponse,System.String,System.String)">
            <summary>
            Initiates single logout from the identity provider to the service providers (ie. IdP-initiated SLO).
            <para>
            A logout request is sent to the service providers that are signed in.
            </para>
            </summary>
            <param name="httpResponse">The HTTP response.</param>
            <param name="logoutReason">The logout reason or <c>null</c> if none.</param>
            <param name="relayState">The relay state or <c>null</c> if none.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the single logout fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.SAMLIdentityProvider.ReceiveSLO(System.Web.HttpRequest,System.Web.HttpResponse,System.Boolean@,System.Boolean@,System.String@,System.String@,System.String@)">
            <summary>
            Receives a single logout request (ie. SP-initiated SLO) or single logout response  (ie. IdP-initiated SLO) from a service provider.
            </summary>
            <param name="httpRequest">The HTTP request.</param>
            <param name="httpResponse">The HTTP response.</param>
            <param name="isRequest"><c>true</c> if a logout request has been received; otherwise <c>false</c> if a logout response has been received.</param>
            <param name="hasCompleted"><c>true</c> if IdP-initiated SLO has completed; otherwise <c>false</c>.</param>
            <param name="logoutReason">The reason associated with the logout request or <c>null</c> if none.</param>
            <param name="partnerSP">The partner service provider name.</param>
            <param name="relayState">The relay state or <c>null</c> if none.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the single logout fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.SAMLIdentityProvider.SendSLO(System.Web.HttpResponse,System.String)">
            <summary>
            Sends a single logout message to a service provider (ie. SP-initiated SLO).
            </summary>
            <param name="httpResponse">The HTTP response.</param>
            <param name="errorMessage">The error message or <c>null</c> if logout was successful.</param>
        </member>
        <member name="T:ComponentSpace.SAML2.SAMLServiceProvider">
            <summary>
            Provides Service Provider (SP) support for web browser single sign-on.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.SAMLServiceProvider.IsSSO">
            <summary>
            Indicates whether the service provider is currently single signed-on to an identity provider.
            </summary>
            <returns><c>true</c> if currently single signed-on; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.SAMLServiceProvider.IsSSO(System.String)">
            <summary>
            Indicates whether the service provider is currently single signed-on to an identity provider.
            </summary>
            <param name="partnerIdP">The partner identity provider name.</param>
            <returns><c>true</c> if currently single signed-on; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.SAMLServiceProvider.IsSSOCompletionPending">
            <summary>
            Indicates whether single sign-on to an identity provider is pending.
            <para>
            Single sign-on is pending if an authn request has been sent to an identity provider and a SAML response is pending.
            </para>
            </summary>
            <returns><c>true</c> if single sign-on is pending; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.SAMLServiceProvider.IsSSOCompletionPending(System.String)">
            <summary>
            Indicates whether single sign-on to an identity provider is pending.
            <para>
            Single sign-on is pending if an authn request has been sent to an identity provider and a SAML response is pending.
            </para>
            </summary>
            <param name="partnerIdP">The partner identity provider name.</param>
            <returns><c>true</c> if single sign-on is pending; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.SAMLServiceProvider.CanSLO">
            <summary>
            Indicates whether the service provider can single logout to one or more identity providers.
            <para>
            To single logout, one or more identity providers must have successfully completed SSO and also support SLO.
            </para>
            </summary>
            <returns><c>true</c> if single logout can occur; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.SAMLServiceProvider.CanSLO(System.String)">
            <summary>
            Indicates whether the service provider can single logout to an indentity provider.
            <para>
            To single logout, the indentity provider must have successfully completed SSO and also support SLO.
            </para>
            </summary>
            <param name="partnerIdP">The partner indentity provider name.</param>
            <returns><c>true</c> if single logout can occur; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.SAMLServiceProvider.IsSLOCompletionPending">
            <summary>
            Indicates whether a single logout response to an identity provider is pending.
            <para>
            Single logout is pending if a logout request has been received from an identity provider and a logout response is pending
            or a logout request has been sent to an identity provider and a logout response is pending.
            </para>
            </summary>
            <returns><c>true</c> if single logout is pending; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.SAMLServiceProvider.IsSLOCompletionPending(System.String)">
            <summary>
            Indicates whether a single logout response to an identity provider is pending.
            <para>
            Single logout is pending if a logout request has been received from an identity provider and a logout response is pending
            a logout request has been sent to an identity provider and a logout response is pending.
            </para>
            </summary>
            <param name="partnerIdP">The partner identity provider name.</param>
            <returns><c>true</c> if single logout is pending; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.SAMLServiceProvider.GetPartnerPendingResponse">
            <summary>
            Gets the name of the partner identity provider to which a logout response is pending.
            </summary>
            <returns>The name of the partner identity provider or <c>null</c> if none.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.SAMLServiceProvider.InitiateSSO(System.Web.HttpResponseBase)">
            <summary>
            Initiates single sign-on from the service provider to the identity provider (ie. SP-initiated SSO).
            <para>
            An authn request is sent to the identity provider.
            </para>
            </summary>
            <param name="httpResponse">The HTTP response.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the single sign-on fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.SAMLServiceProvider.InitiateSSO(System.Web.HttpResponseBase,System.String,System.String)">
            <summary>
            Initiates single sign-on from the service provider to the identity provider (ie. SP-initiated SSO).
            <para>
            An authn request is sent to the identity provider.
            </para>
            </summary>
            <param name="httpResponse">The HTTP response.</param>
            <param name="relayState">The relay state or <c>null</c> if none.</param>
            <param name="partnerIdP">The partner identity provider name or <c>null</c>.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the single sign-on fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.SAMLServiceProvider.InitiateSSO(System.Web.HttpResponseBase,System.String,System.String,ComponentSpace.SAML2.SSOOptions)">
            <summary>
            Initiates single sign-on from the service provider to the identity provider (ie. SP-initiated SSO).
            <para>
            An authn request is sent to the identity provider.
            </para>
            </summary>
            <param name="httpResponse">The HTTP response.</param>
            <param name="relayState">The relay state or <c>null</c> if none.</param>
            <param name="partnerIdP">The partner identity provider name or <c>null</c>.</param>
            <param name="ssoOptions">The SSO options or <c>null</c>.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the single sign-on fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.SAMLServiceProvider.InitiateSSO(System.Web.HttpResponseBase,System.String,System.String,ComponentSpace.SAML2.SSOOptions,System.String,System.String)">
            <summary>
            Initiates single sign-on from the service provider to the identity provider (ie. SP-initiated SSO).
            <para>
            An authn request is sent to the identity provider.
            </para>
            </summary>
            <param name="httpResponse">The HTTP response.</param>
            <param name="relayState">The relay state or <c>null</c> if none.</param>
            <param name="partnerIdP">The partner identity provider name or <c>null</c>.</param>
            <param name="ssoOptions">The SSO options or <c>null</c>.</param>
            <param name="assertionConsumerServiceUrl">The assertion consumer service URL or <c>null</c> if the configured URL is to be used.</param>
            <param name="singleSignOnServiceUrl">The single sign-on service URL or <c>null</c> if the configured URL is to be used.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the single sign-on fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.SAMLServiceProvider.ReceiveSSO(System.Web.HttpRequestBase,System.Boolean@,System.String@,System.String@,System.String@,System.Collections.Generic.IDictionary{System.String,System.String}@,System.String@)">
            <summary>
            Receives a single sign-on response from the identity provider (ie. IdP-initiated or SP-initiated SSO).
            </summary>
            <para>
            A SAML response is received from the identity provider.
            </para>
            <param name="httpRequest">The HTTP request.</param>
            <param name="isInResponseTo"><c>true</c> if the SAML response is in response to an authn request; otherwise <c>false</c>.</param>
            <param name="partnerIdP">The partner identity provider name.</param>
            <param name="authnContext">The authentication context identifying how the user was authenticated.</param>
            <param name="userName">The user name in the SAML assertion.</param>
            <param name="attributes">The attributes in the SAML assertion or <c>null</c> if none.</param>
            <param name="relayState">The relay state or <c>null</c> if none.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the single sign-on fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.SAMLServiceProvider.ReceiveSSO(System.Web.HttpRequestBase,System.Boolean@,System.String@,System.String@,System.String@,ComponentSpace.SAML2.Assertions.SAMLAttribute[]@,System.String@)">
            <summary>
            Receives a single sign-on response from the identity provider (ie. IdP-initiated or SP-initiated SSO).
            </summary>
            <para>
            A SAML response is received from the identity provider.
            </para>
            <param name="httpRequest">The HTTP request.</param>
            <param name="isInResponseTo"><c>true</c> if the SAML response is in response to an authn request; otherwise <c>false</c>.</param>
            <param name="partnerIdP">The partner identity provider name.</param>
            <param name="authnContext">The authentication context identifying how the user was authenticated.</param>
            <param name="userName">The user name in the SAML assertion.</param>
            <param name="attributes">The attributes in the SAML assertion or <c>null</c> if none.</param>
            <param name="relayState">The relay state or <c>null</c> if none.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the single sign-on fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.SAMLServiceProvider.InitiateSLO(System.Web.HttpResponseBase,System.String,System.String)">
            <summary>
            Initiates single logout from the service provider to the identity provider (ie. SP-initiated SLO).
            <para>
            A logout request is sent to the identity provider.
            </para>
            </summary>
            <param name="httpResponse">The HTTP response.</param>
            <param name="logoutReason">The logout reason or <c>null</c> if none.</param>
            <param name="relayState">The relay state or <c>null</c> if none.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the single logout fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.SAMLServiceProvider.InitiateSLO(System.Web.HttpResponseBase,System.String,System.String,System.String)">
            <summary>
            Initiates single logout from the service provider to the identity provider (ie. SP-initiated SLO).
            <para>
            An logout request is sent to the identity provider.
            </para>
            </summary>
            <param name="httpResponse">The HTTP response.</param>
            <param name="logoutReason">The logout reason or <c>null</c> if none.</param>
            <param name="relayState">The relay state or <c>null</c> if none.</param>
            <param name="partnerIdP">The partner identity provider name or <c>null</c>.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the single logout fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.SAMLServiceProvider.ReceiveSLO(System.Web.HttpRequestBase,System.Boolean@,System.String@,System.String@,System.String@)">
            <summary>
            Receives a single logout request (ie. IdP-initiated SLO) or single logout response (ie. SP-initiated SLO) from an identity provider.
            </summary>
            <param name="httpRequest">The HTTP request.</param>
            <param name="isRequest"><c>true</c> if a logout request has been received; otherwise <c>false</c> if a logout response has been received.</param>
            <param name="logoutReason">The reason associated with the logout request or <c>null</c> if none.</param>
            <param name="partnerIdP">The partner identity provider name.</param>
            <param name="relayState">The relay state or <c>null</c> if none.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the single logout fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.SAMLServiceProvider.SendSLO(System.Web.HttpResponseBase,System.String)">
            <summary>
            Sends a single logout response to the identity provider (ie IdP-initiated SLO).
            </summary>
            <param name="httpResponse">The HTTP response.</param>
            <param name="errorMessage">The error message or <c>null</c> if logout was successful.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.SAMLServiceProvider.InitiateSSO(System.Web.HttpResponse)">
            <summary>
            Initiates single sign-on from the service provider to the identity provider (ie. SP-initiated SSO).
            <para>
            An authn request is sent to the identity provider.
            </para>
            </summary>
            <param name="httpResponse">The HTTP response.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the single sign-on fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.SAMLServiceProvider.InitiateSSO(System.Web.HttpResponse,System.String,System.String)">
            <summary>
            Initiates single sign-on from the service provider to the identity provider (ie. SP-initiated SSO).
            <para>
            An authn request is sent to the identity provider.
            </para>
            </summary>
            <param name="httpResponse">The HTTP response.</param>
            <param name="relayState">The relay state or <c>null</c> if none.</param>
            <param name="partnerIdP">The partner identity provider name or <c>null</c>.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the single sign-on fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.SAMLServiceProvider.InitiateSSO(System.Web.HttpResponse,System.String,System.String,ComponentSpace.SAML2.SSOOptions)">
            <summary>
            Initiates single sign-on from the service provider to the identity provider (ie. SP-initiated SSO).
            <para>
            An authn request is sent to the identity provider.
            </para>
            </summary>
            <param name="httpResponse">The HTTP response.</param>
            <param name="relayState">The relay state or <c>null</c> if none.</param>
            <param name="partnerIdP">The partner identity provider name or <c>null</c>.</param>
            <param name="ssoOptions">The SSO options or <c>null</c>.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the single sign-on fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.SAMLServiceProvider.InitiateSSO(System.Web.HttpResponse,System.String,System.String,ComponentSpace.SAML2.SSOOptions,System.String,System.String)">
            <summary>
            Initiates single sign-on from the service provider to the identity provider (ie. SP-initiated SSO).
            <para>
            An authn request is sent to the identity provider.
            </para>
            </summary>
            <param name="httpResponse">The HTTP response.</param>
            <param name="relayState">The relay state or <c>null</c> if none.</param>
            <param name="partnerIdP">The partner identity provider name or <c>null</c>.</param>
            <param name="ssoOptions">The SSO options or <c>null</c>.</param>
            <param name="assertionConsumerServiceUrl">The assertion consumer service URL or <c>null</c> if the configured URL is to be used.</param>
            <param name="singleSignOnServiceUrl">The single sign-on service URL or <c>null</c> if the configured URL is to be used.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the single sign-on fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.SAMLServiceProvider.ReceiveSSO(System.Web.HttpRequest,System.Boolean@,System.String@,System.String@,System.String@,System.Collections.Generic.IDictionary{System.String,System.String}@,System.String@)">
            <summary>
            Receives a single sign-on response from the identity provider (ie. IdP-initiated or SP-initiated SSO).
            </summary>
            <para>
            A SAML response is received from the identity provider.
            </para>
            <param name="httpRequest">The HTTP request.</param>
            <param name="isInResponseTo"><c>true</c> if the SAML response is in response to an authn request; otherwise <c>false</c>.</param>
            <param name="partnerIdP">The partner identity provider name.</param>
            <param name="authnContext">The authentication context identifying how the user was authenticated.</param>
            <param name="userName">The user name in the SAML assertion.</param>
            <param name="attributes">The attributes in the SAML assertion or <c>null</c> if none.</param>
            <param name="relayState">The relay state or <c>null</c> if none.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the single sign-on fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.SAMLServiceProvider.ReceiveSSO(System.Web.HttpRequest,System.Boolean@,System.String@,System.String@,System.String@,ComponentSpace.SAML2.Assertions.SAMLAttribute[]@,System.String@)">
            <summary>
            Receives a single sign-on response from the identity provider (ie. IdP-initiated or SP-initiated SSO).
            </summary>
            <para>
            A SAML response is received from the identity provider.
            </para>
            <param name="httpRequest">The HTTP request.</param>
            <param name="isInResponseTo"><c>true</c> if the SAML response is in response to an authn request; otherwise <c>false</c>.</param>
            <param name="partnerIdP">The partner identity provider name.</param>
            <param name="authnContext">The authentication context identifying how the user was authenticated.</param>
            <param name="userName">The user name in the SAML assertion.</param>
            <param name="attributes">The attributes in the SAML assertion or <c>null</c> if none.</param>
            <param name="relayState">The relay state or <c>null</c> if none.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the single sign-on fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.SAMLServiceProvider.InitiateSLO(System.Web.HttpResponse,System.String,System.String)">
            <summary>
            Initiates single logout from the service provider to the identity provider (ie. SP-initiated SLO).
            <para>
            A logout request is sent to the identity provider.
            </para>
            </summary>
            <param name="httpResponse">The HTTP response.</param>
            <param name="logoutReason">The logout reason or <c>null</c> if none.</param>
            <param name="relayState">The relay state or <c>null</c> if none.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the single logout fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.SAMLServiceProvider.InitiateSLO(System.Web.HttpResponse,System.String,System.String,System.String)">
            <summary>
            Initiates single logout from the service provider to the identity provider (ie. SP-initiated SLO).
            <para>
            An logout request is sent to the identity provider.
            </para>
            </summary>
            <param name="httpResponse">The HTTP response.</param>
            <param name="logoutReason">The logout reason or <c>null</c> if none.</param>
            <param name="relayState">The relay state or <c>null</c> if none.</param>
            <param name="partnerIdP">The partner identity provider name or <c>null</c>.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the single logout fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.SAMLServiceProvider.ReceiveSLO(System.Web.HttpRequest,System.Boolean@,System.String@,System.String@,System.String@)">
            <summary>
            Receives a single logout request (ie. IdP-initiated SLO) or single logout response (ie. SP-initiated SLO) from an identity provider.
            </summary>
            <param name="httpRequest">The HTTP request.</param>
            <param name="isRequest"><c>true</c> if a logout request has been received; otherwise <c>false</c> if a logout response has been received.</param>
            <param name="logoutReason">The reason associated with the logout request or <c>null</c> if none.</param>
            <param name="partnerIdP">The partner identity provider name.</param>
            <param name="relayState">The relay state or <c>null</c> if none.</param>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the single logout fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.SAMLServiceProvider.SendSLO(System.Web.HttpResponse,System.String)">
            <summary>
            Sends a single logout response to the identity provider (ie IdP-initiated SLO).
            </summary>
            <param name="httpResponse">The HTTP response.</param>
            <param name="errorMessage">The error message or <c>null</c> if logout was successful.</param>
        </member>
        <member name="T:ComponentSpace.SAML2.Schemas.SAMLValidator">
            <summary>
            Provides methods for validating SAML assertion, protocol and metadata XML 
            against the SAML, XML signature and XML encryption schemas.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Schemas.SAMLValidator.CreateResourceName(System.String)">
            <summary>
            Creates an absolute resource name.
            </summary>
            <param name="name">The relative resource name.</param>
            <returns>The absolute resource name.</returns>
        </member>
        <member name="P:ComponentSpace.SAML2.Schemas.SAMLValidator.ExtensionSchemaFileNames">
            <summary>
            Gets the list of extension XML schema file names.
            </summary>
            <value>
            The list of extension XML schema file names.
            </value>
        </member>
        <member name="M:ComponentSpace.SAML2.Schemas.SAMLValidator.ValidationEventHandler(System.Object,System.Xml.Schema.ValidationEventArgs)">
            <summary>
            Handles schema validation events.
            Events are accumulated for later reporting.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="P:ComponentSpace.SAML2.Schemas.SAMLValidator.Warnings">
            <summary>
            Gets the warnings associated with the last validation.
            </summary>
            <value>
            The warnings.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Schemas.SAMLValidator.Errors">
            <summary>
            Gets the errors associated with the last validation.
            </summary>
            <value>
            The errors.
            </value>
        </member>
        <member name="M:ComponentSpace.SAML2.Schemas.SAMLValidator.Validate(System.Xml.XmlDocument)">
            <summary>
            Validates the SAML assertion, protocol or metadata XML 
            against the SAML, XML signature and XML encryption schemas.
            </summary>
            <param name="xmlDocument">The XML to validate</param>
            <returns><c>true</c> if the XML validates against the SAML schemas; otherwise <c>false</c>.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the validation fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Schemas.SAMLValidator.Validate(System.Xml.XmlElement)">
            <summary>
            Validates the SAML assertion, protocol or metadata XML 
            against the SAML, XML signature and XML encryption schemas.
            </summary>
            <param name="xmlElement">The XML to validate</param>
            <returns><c>true</c> if the XML validates against the SAML schemas; otherwise <c>false</c>.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLException">
            Thrown when the validation fails.
            </exception>
        </member>
        <member name="T:ComponentSpace.SAML2.SSOOptions">
            <summary>
            Specifies single sign-on options.
            </summary>
        </member>
        <member name="T:ComponentSpace.SAML2.SSOOptions.TrustedIdentityProvider">
            <summary>
            Specifies a trusted identity provider.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.SSOOptions.TrustedIdentityProvider.#ctor">
            <summary>
            Initializes a new instance of the <c>TrustedIdentityProvider</c> class.
            </summary>
        </member>
        <member name="P:ComponentSpace.SAML2.SSOOptions.TrustedIdentityProvider.ProviderID">
            <summary>
            Gets or sets the provider ID.
            </summary>
            <value>
            The provider ID.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.SSOOptions.TrustedIdentityProvider.Name">
            <summary>
            Gets or sets the optional name.
            </summary>
            <value>
            The optional name.
            </value>
        </member>
        <member name="M:ComponentSpace.SAML2.SSOOptions.#ctor">
            <summary>
            Initializes a new instance of the <c>SSOOptions</c> class.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.SSOOptions.#ctor(System.String,System.Boolean,System.Boolean,System.Boolean,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <c>SSOOptions</c> class.
            </summary>
            <param name="requestedUserName">The requested user name.</param>
            <param name="forceAuthn">The force authentication flag.</param>
            <param name="isPassive">The is passive flag.</param>
            <param name="allowCreate">The allow create flag.</param>
            <param name="providerName">The provider name.</param>
            <param name="spNameQualifier">The service provider name qualifier.</param>
            <param name="requestedAuthnContext">The requested authentication context.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.SSOOptions.#ctor(System.String,System.Boolean,System.Boolean,System.Boolean,System.String,System.String,System.Collections.Generic.IList{System.String})">
            <summary>
            Initializes a new instance of the <c>SSOOptions</c> class.
            </summary>
            <param name="requestedUserName">The requested user name.</param>
            <param name="forceAuthn">The force authentication flag.</param>
            <param name="isPassive">The is passive flag.</param>
            <param name="allowCreate">The allow create flag.</param>
            <param name="providerName">The provider name.</param>
            <param name="spNameQualifier">The service provider name qualifier.</param>
            <param name="requestedAuthnContexts">The requested authentication contexts.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.SSOOptions.#ctor(System.String,System.Boolean,System.Boolean,System.Boolean,System.String,System.String,System.Collections.Generic.IList{System.String},System.String)">
            <summary>
            Initializes a new instance of the <c>SSOOptions</c> class.
            </summary>
            <param name="requestedUserName">The requested user name.</param>
            <param name="forceAuthn">The force authentication flag.</param>
            <param name="isPassive">The is passive flag.</param>
            <param name="allowCreate">The allow create flag.</param>
            <param name="providerName">The provider name.</param>
            <param name="spNameQualifier">The service provider name qualifier.</param>
            <param name="requestedAuthnContexts">The requested authentication contexts.</param>
            <param name="requestedAuthnContextComparison">The requested authentication context comparison.</param>
        </member>
        <member name="P:ComponentSpace.SAML2.SSOOptions.Subject">
            <summary>
            Gets or sets the optional subject.
            </summary>
            <value>
            The subject.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.SSOOptions.Conditions">
            <summary>
            Gets or sets the optional conditions.
            </summary>
            <value>
            The conditions.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.SSOOptions.RequestedUserName">
            <summary>
            Gets or sets the optional requested user name.
            </summary>
            <value>
            The requested user name.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.SSOOptions.ForceAuthn">
            <summary>
            Gets or sets the optional force authentication flag.
            If <c>true</c> the identity provider should discard any existing user authentication session 
            and establish a new user authentication session.
            </summary>
            <value>
            The force authentication flag.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.SSOOptions.IsPassive">
            <summary>
            Gets or sets the optional is passive flag.
            If <c>true</c> the identity provider must not visibly take control of the user interface.
            </summary>
            <value>
            The is passive flag.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.SSOOptions.AllowCreate">
            <summary>
            Gets or sets the optional allow create flag.
            If <c>true</c> the identity provider is allowed to create a new identifier for the user. 
            </summary>
            <value>
            The allow create flag.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.SSOOptions.ProviderName">
            <summary>
            Gets or sets the optional provider name.
            </summary>
            <value>
            The provider name.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.SSOOptions.SPNameQualifier">
            <summary>
            Gets or sets the optional service provider name qualifier. 
            </summary>
            <value>
            The service provider name qualifier.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.SSOOptions.RequestedAuthnContexts">
            <summary>
            Gets or sets the optional requested authentication contexts. 
            </summary>
            <value>
            The requested authentication contexts.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.SSOOptions.RequestedAuthnContextComparison">
            <summary>
            Gets or sets the optional requested authentication context comparison. 
            </summary>
            <value>
            The requested authentication context comparison.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.SSOOptions.TrustedIdentityProviders">
            <summary>
            Gets or sets the optional trusted identity providers to include as scoping. 
            </summary>
            <value>
            The trusted identity providers to include as scoping.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.SSOOptions.AssertionConsumerServiceIndex">
            <summary>
            Gets or sets the assertion consumer service index. 
            </summary>
            <value>
            The assertion consumer service index or negative if none.
            </value>
        </member>
        <member name="T:ComponentSpace.SAML2.Utility.CertificateHelper">
            <summary>
            Provides helper methods for X.509 certificates.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Utility.CertificateHelper.UseMicrosoftEnhancedRSAandAESCryptographicProvider(System.Security.Cryptography.RSACryptoServiceProvider)">
            <summary>
            Use the Microsoft Enhanced RSA and AES Cryptographic Provider (ie CSP type 24) to support SHA-256 XML signature generation.
            </summary>
            <param name="key">The private key.</param>
            <returns>The private key with the preferred CSP specified.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Utility.CertificateHelper.GetPrivateKey(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Gets the private key from the certificate using the most appropriate method.
            </summary>
            <param name="x509Certificate">The certificate.</param>
            <returns>The private key.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Utility.CertificateHelper.GetPublicKey(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Gets the public key from the certificate using the most appropriate method.
            </summary>
            <param name="x509Certificate">The certificate.</param>
            <returns>The public key.</returns>
        </member>
        <member name="T:ComponentSpace.SAML2.Utility.ContentSecurityPolicy">
            <summary>
            Provides helper methods for content security policy.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Utility.ContentSecurityPolicy.GetScript(System.String)">
            <summary>
            Gets the JavaScript contained within HTML.
            </summary>
            <param name="html">The HTML.</param>
            <returns>The JavaScript contained within the script tags.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Utility.ContentSecurityPolicy.HashScript(System.String)">
            <summary>
            Returns the SHA-256 hash of the JavaScript.
            </summary>
            <param name="script">The script.</param>
            <returns>The hash of the script.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Utility.ContentSecurityPolicy.CreateHashedScriptSource(System.String)">
            <summary>
            Creates a SHA-256 hashed script source for inclusion in a Content-Security-Policy header.
            </summary>
            <param name="script">The script</param>
            <returns>The hashed script source.</returns>
        </member>
        <member name="T:ComponentSpace.SAML2.Utility.CyclicTraceListener">
            <summary>
            Provides a simple daily cyclic trace listener.
            <para>
            The trace listener is configured in web.config as follows.
            </para>
            <para>
            add name="CyclicTextWriter" type="ComponentSpace.SAML2.Utility.CyclicTraceListener,ComponentSpace.SAML2" initializeData="logs"/>
            </para>
            <para>
            The initializeData is the relative or absolute path to the log folder.
            </para>
            <para>
            For example:
            </para>
            <para>
            initializeData="logs/saml"
            </para>
            <para>
            initializeData="logs\\saml"
            </para>
            <para>
            initializeData="c:/logs/saml"
            </para>
            <para>
            initializeData="c:\\logs\\saml"
            </para>
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Utility.CyclicTraceListener.#ctor(System.String)">
            <summary>
            Initializes an instance of the <c>CyclicTraceListener</c>.
            </summary>
            <param name="directoryName">The directory into which log files will be written.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Utility.CyclicTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32)">
            <summary>
            Traces an event.
            </summary>
            <param name="eventCache">The trace event cache.</param>
            <param name="source">The trace source.</param>
            <param name="eventType">The trace event type.</param>
            <param name="id">The event ID.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Utility.CyclicTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)">
            <summary>
            Traces an event.
            </summary>
            <param name="eventCache">The trace event cache.</param>
            <param name="source">The trace source.</param>
            <param name="eventType">The trace event type.</param>
            <param name="id">The event ID.</param>
            <param name="message">The event message.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Utility.CyclicTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])">
            <summary>
            Traces an event.
            </summary>
            <param name="eventCache">The trace event cache.</param>
            <param name="source">The trace source.</param>
            <param name="eventType">The trace event type.</param>
            <param name="id">The event ID.</param>
            <param name="format">The format string.</param>
            <param name="args">The format string arguments.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Utility.CyclicTraceListener.Write(System.String)">
            <summary>
            Writes an event message.
            </summary>
            <param name="message">The event message.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Utility.CyclicTraceListener.WriteLine(System.String)">
            <summary>
            Writes an event message.
            </summary>
            <param name="message">The event message.</param>
        </member>
        <member name="T:ComponentSpace.SAML2.Utility.Diagnostics">
            <summary>
            Provides trace diagnostics.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Utility.Diagnostics.ToString(System.Web.HttpRequestBase)">
            <summary>
            Converts the HTTP request to a string.
            </summary>
            <param name="httpRequest">The HTTP request.</param>
            <returns>The HTTP request as a string.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Utility.Diagnostics.ToString(System.Web.HttpRequest)">
            <summary>
            Converts the HTTP request to a string.
            </summary>
            <param name="httpRequest">The HTTP request.</param>
            <returns>The HTTP request as a string.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Utility.Diagnostics.RedactPasswords(System.String)">
            <summary>
            Redacts passwords from the text.
            </summary>
            <param name="text">The text.</param>
            <returns>The text with passwords removed.</returns>
        </member>
        <member name="P:ComponentSpace.SAML2.Utility.Diagnostics.VerboseEnabled">
            <summary>
            Gets the trace verbose flag.
            Trace is enabled through the application's configuration file.
            </summary>
            <value>
            <c>true</c> if verbose trace is enabled; otherwise <c>false</c>.
            </value>
        </member>
        <member name="M:ComponentSpace.SAML2.Utility.Diagnostics.Verbose(System.String)">
            <summary>
            Writes the verbose text to the trace.
            </summary>
            <param name="text">The text to trace.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Utility.Diagnostics.Verbose(System.String,System.Object[])">
            <summary>
            Writes the verbose text to the trace.
            </summary>
            <param name="format">The format string.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Utility.Diagnostics.Verbose(System.String,System.Byte[],System.Int32)">
            <summary>
            Writes the verbose text and bytes to the trace.
            </summary>
            <param name="text">The text.</param>
            <param name="bytes">The bytes.</param>
            <param name="length">The number of bytes.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Utility.Diagnostics.Verbose(System.String,System.Byte[])">
            <summary>
            Writes the verbose text and bytes to the trace.
            </summary>
            <param name="text">The text.</param>
            <param name="bytes">The bytes.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Utility.Diagnostics.Verbose(System.Exception)">
            <summary>
            Writes the exception to the verbose trace.
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Utility.Diagnostics.Verbose(System.Web.HttpRequestBase)">
            <summary>
            Writes the HTTP request to the verbose trace.
            </summary>
            <param name="httpRequest">The HTTP request.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Utility.Diagnostics.Verbose(System.Web.HttpRequest)">
            <summary>
            Writes the HTTP request to the verbose trace.
            </summary>
            <param name="httpRequest">The HTTP request.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Utility.Diagnostics.Verbose(System.Web.HttpCookie)">
            <summary>
            Writes the HTTP cookie to the verbose trace.
            </summary>
            <param name="httpCookie">The HTTP cookie.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Utility.Diagnostics.Verbose(ComponentSpace.SAML2.Configuration.SAMLConfigurations)">
            <summary>
            Writes the SAML configurations to the verbose trace.
            </summary>
            <param name="samlConfigurations">The SAML configurations.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Utility.Diagnostics.Verbose(ComponentSpace.SAML2.Configuration.SAMLConfiguration)">
            <summary>
            Writes the SAML configuration to the verbose trace.
            </summary>
            <param name="samlConfiguration">The SAML configuration.</param>
        </member>
        <member name="T:ComponentSpace.SAML2.Utility.DiagnosticsConfiguration">
            <summary>
            The diagnostics configuration.
            </summary>
        </member>
        <member name="P:ComponentSpace.SAML2.Utility.DiagnosticsConfiguration.TraceSource">
            <summary>
            Gets or sets the SAML trace source.
            </summary>
            <value>
            The SAML trace source.
            </value>
        </member>
        <member name="T:ComponentSpace.SAML2.Utility.License">
            <summary>
            Provides licensing information.
            </summary>
        </member>
        <member name="P:ComponentSpace.SAML2.Utility.License.Name">
            <summary>
            Gets the product name.
            </summary>
            <value>
            The product name.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Utility.License.Version">
            <summary>
            Gets the product version.
            </summary>
            <value>
            The product version.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Utility.License.IsLicensed">
            <summary>
            Indicates whether the product is licensed.
            </summary>
            <value>
            <c>true</c> if the product is licensed; otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Utility.License.Expires">
            <summary>
            Gets the date the evaluation license expires.
            </summary>
            <value>
            The date the evaluation license expires.
            </value>
        </member>
        <member name="T:ComponentSpace.SAML2.Utility.SAML">
            <summary>
            Provides common SAML definitions and helper methods.
            </summary>
            <remarks>
            Refer to the Assertions and Protocol for the OASIS Security Assertion Markup Language
            (SAML) V2.0 specification for further details.
            </remarks>
        </member>
        <member name="F:ComponentSpace.SAML2.Utility.SAML.Version">
            <summary>
            The SAML version.
            </summary>
        </member>
        <member name="T:ComponentSpace.SAML2.Utility.SAML.Prefixes">
            <summary>
            The XML prefixes.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.Utility.SAML.Prefixes.SAML">
            <summary>
            The SAML prefix.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.Utility.SAML.Prefixes.SAMLP">
            <summary>
            The SAML protocol prefix.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.Utility.SAML.Prefixes.MD">
            <summary>
            The SAML metadata prefix.
            </summary>
        </member>
        <member name="T:ComponentSpace.SAML2.Utility.SAML.NamespaceURIs">
            <summary>
            The XML namespace URIs.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.Utility.SAML.NamespaceURIs.Assertion">
            <summary>
            The SAML assertion namespace URI.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.Utility.SAML.NamespaceURIs.Protocol">
            <summary>
            The SAML protocol namespace URI.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.Utility.SAML.NamespaceURIs.Metadata">
            <summary>
            The SAML metadata namespace URI.
            </summary>
        </member>
        <member name="T:ComponentSpace.SAML2.Utility.SAML.ElementNames">
            <summary>
            The XML element names.
            </summary>
        </member>
        <member name="T:ComponentSpace.SAML2.Utility.SAML.AttributeNames">
            <summary>
            The XML attribute names.
            </summary>
        </member>
        <member name="P:ComponentSpace.SAML2.Utility.SAML.HttpContext">
            <summary>
            Gets or sets the HTTP context. 
            </summary>
            <value>
            The HTTP context.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Utility.SAML.HttpSessionState">
            <summary>
            Gets or sets the HTTP session state.
            </summary>
            <value>
            The HTTP session state.
            </value>
        </member>
        <member name="M:ComponentSpace.SAML2.Utility.SAML.CreateID">
            <summary>
            Creates an identifier by prefixing a generated GUID with an underscore.
            </summary>
            <returns>The identifier.</returns>
        </member>
        <member name="P:ComponentSpace.SAML2.Utility.SAML.MillisecondPrecision">
            <summary>
            Gets or sets the flag indicating whether or not times should have millisecond precision when being serialized to XML.
            <para>
            For example, a time with millisecond precision is 06:33:14.729 whereas a time without millisecond precision is 06:33:14.
            </para>
            <para>
            The default is <c>true</c>.
            </para>
            </summary>
            <value>
            The flag indicating whether or not times should have millisecond precision. 
            </value>
        </member>
        <member name="M:ComponentSpace.SAML2.Utility.SAML.ToBase64String(System.Xml.XmlElement)">
            <summary>
            Converts the XML into a base-64 encoded string.
            </summary>
            <param name="xmlElement">The XML.</param>
            <returns>The base-64 encoded string.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Utility.SAML.FromBase64String(System.String)">
            <summary>
            Converts the base-64 encoded string into XML.
            </summary>
            <param name="text">The base-64 encoded string.</param>
            <returns>The XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the conversion fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Utility.SAML.ToDateTime(System.String)">
            <summary>
            Returns the <c>DateTime</c> represented by the formatted date/time string.
            </summary>
            <remarks>
            The date/time string should be formatted as: yyyy-mm-ddThh:mm:ssZ.
            <para>
            As per the SAML specification, all date/time values should be 
            coordinated universal time (UTC).
            </para>
            </remarks>
            <param name="dateTimeString">The date/time string.</param>
            <returns>The <c>DateTime</c>.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the conversion fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Utility.SAML.ToDateTimeString(System.DateTime)">
            <summary>
            Returns a date/time string formatted as: yyyy-mm-ddThh:mm:ss.sssZ.
            </summary>
            <remarks>
            As per the SAML specification, all date/time values should be 
            coordinated universal time (UTC).
            </remarks>
            <param name="dateTime">The date/time.</param>
            <returns>The formatted string.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Utility.SAML.ToDateTimeString">
            <summary>
            Returns the current UTC date/time formatted as: yyyy-mm-ddThh:mm:ssZ.
            </summary>
            <returns>The formatted string.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Utility.SAML.ToBoolean(System.String)">
            <summary>
            Returns the boolean value represented by a string.
            </summary>
            <remarks>
            Valid values, as defined by the XML schema specification, are "true", "false", "1", "0".
            </remarks>
            <param name="booleanString">The boolean string.</param>
            <returns>The boolean.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the boolean string value is illegal.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Utility.SAML.ToXmlElement(System.String)">
            <summary>
            Loads an XML element from an XML string.
            </summary>
            <param name="xmlString">The XML string</param>
            <returns>The XML element.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSerializationException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.Utility.SAML.ToAbsoluteURL(System.String,System.Boolean)">
            <summary>
            Converts a rooted URL to an absolute URL.
            <para>
            A rooted URL starts with the tilde (~) character.
            </para>
            <para>
            The call must be made in the context of processing an HTTP request.
            </para>
            </summary>
            <param name="url">The rooted URL.</param>
            <param name="resolveToHttps">The flag indicating whether the URL should always resolve to HTTPS.</param>
            <returns>The absolute URL.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Utility.SAML.RemoveUnicodeMarkerCharacters(System.String)">
            <summary>
            Removes unicode marker characters from the string.
            <para>
            0x200E is the left-to-right marker.
            </para>
            <para>
            0x200F is the right-to-left marker.
            </para>
            </summary>
            <param name="text">The string.</param>
            <returns>The string with unicode marker characters stripped.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Utility.SAML.GetSAMLMessageType(System.Xml.XmlElement)">
            <summary>
            Returns the SAML message type.
            </summary>
            <param name="xmlElement">The SAML message XML.</param>
            <returns>The SAML message type.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Utility.SAML.IsSAMLRequest(System.Xml.XmlElement)">
            <summary>
            Indicates whether the SAML message is a request or response.
            </summary>
            <param name="xmlElement">The SAML message XML.</param>
            <returns><c>true</c> if the SAML message is a request; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Utility.SAML.IsSAMLRequest(ComponentSpace.SAML2.SAMLIdentifiers.MessageType)">
            <summary>
            Indicates whether the SAML message is a request or response.
            </summary>
            <param name="messageType">The SAML message type.</param>
            <returns><c>true</c> if the SAML message is a request; otherwise <c>false</c>.</returns>
        </member>
        <member name="T:ComponentSpace.SAML2.Utility.SAMLHttpContext">
            <summary>
            Supports sending and receiving SAML protocol messages through non-standard HTTP requests and responses.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Utility.SAMLHttpContext.#ctor">
            <summary>
            Initializes a new instance of the <c>SAMLHttpContext</c> class.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Utility.SAMLHttpContext.#ctor(System.Web.HttpRequestBase,System.Web.HttpResponseBase)">
            <summary>
            Initializes a new instance of the <c>SAMLHttpContext</c> class.
            </summary>
            <param name="request">The HTTP request.</param>
            <param name="response">The HTTP response.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Utility.SAMLHttpContext.#ctor(System.Web.HttpSessionStateBase,System.Web.HttpRequestBase,System.Web.HttpResponseBase)">
            <summary>
            Initializes a new instance of the <c>SAMLHttpContext</c> class.
            </summary>
            <param name="sessionState">The HTTP session.</param>
            <param name="request">The HTTP request.</param>
            <param name="response">The HTTP response.</param>
        </member>
        <member name="P:ComponentSpace.SAML2.Utility.SAMLHttpContext.Session">
            <summary>
            Gets the HTTP session. 
            </summary>
            <value>
            The HTTP session.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Utility.SAMLHttpContext.Request">
            <summary>
            Gets the HTTP request. 
            </summary>
            <value>
            The HTTP request.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Utility.SAMLHttpContext.Response">
            <summary>
            Gets the HTTP response. 
            </summary>
            <value>
            The HTTP response.
            </value>
        </member>
        <member name="T:ComponentSpace.SAML2.Utility.SAMLHttpRequest">
            <summary>
            Provides a mechanism for receiving a SAML protocol message through a non-standard HTTP request.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Utility.SAMLHttpRequest.Dispose(System.Boolean)">
            <summary>
            Dispose of any unmanaged resources.
            </summary>
            <param name="disposing"><c>true</c> if called by user code; <c>false</c> if called by the runtime from within the finalizer</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Utility.SAMLHttpRequest.#ctor">
            <summary>
            Initializes a new instance of the <c>SAMLHttpRequest</c> class.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Utility.SAMLHttpRequest.#ctor(System.Xml.XmlElement,System.String,System.Uri,System.Web.HttpCookieCollection)">
            <summary>
            Initializes a new instance of the <c>SAMLHttpRequest</c> class.
            <para>
            The SAML message is received using the HTTP-Post binding.
            </para>
            </summary>
            <param name="samlMessage">The SAML message XML.</param>
            <param name="relayState">The relay state or <c>null</c> if none</param>
            <param name="url">The URL</param>
            <param name="cookies">The HTTP cookies or <c>null</c> if none</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Utility.SAMLHttpRequest.#ctor(System.Xml.XmlElement,System.String,System.Boolean,System.Uri,System.Web.HttpCookieCollection)">
            <summary>
            Initializes a new instance of the <c>SAMLHttpRequest</c> class.
            <para>
            The SAML message is received using the HTTP-Post binding.
            </para>
            </summary>
            <param name="samlMessage">The SAML message XML.</param>
            <param name="relayState">The relay state or <c>null</c> if none</param>
            <param name="isSAMLRequest">The flag indicating whether this is a SAML request or response.</param>
            <param name="url">The URL</param>
            <param name="cookies">The HTTP cookies or <c>null</c> if none</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Utility.SAMLHttpRequest.#ctor(System.String,System.String,System.Uri,System.Web.HttpCookieCollection)">
            <summary>
            Initializes a new instance of the <c>SAMLHttpRequest</c> class.
            <para>
            The SAML message is received using the HTTP-Post binding.
            </para>
            </summary>
            <param name="samlMessage">The SAML message base-64 encoded string.</param>
            <param name="relayState">The relay state or <c>null</c> if none</param>
            <param name="url">The URL</param>
            <param name="cookies">The HTTP cookies or <c>null</c> if none</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Utility.SAMLHttpRequest.#ctor(System.String,System.String,System.Boolean,System.Uri,System.Web.HttpCookieCollection)">
            <summary>
            Initializes a new instance of the <c>SAMLHttpRequest</c> class.
            <para>
            The SAML message is received using the HTTP-Post binding.
            </para>
            </summary>
            <param name="samlMessage">The SAML message base-64 encoded string.</param>
            <param name="relayState">The relay state or <c>null</c> if none</param>
            <param name="isSAMLRequest">The flag indicating whether this is a SAML request or response.</param>
            <param name="url">The URL</param>
            <param name="cookies">The HTTP cookies or <c>null</c> if none</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Utility.SAMLHttpRequest.#ctor(System.Xml.XmlElement,System.String,System.Security.Cryptography.AsymmetricAlgorithm,System.String,System.Uri,System.Web.HttpCookieCollection)">
            <summary>
            Initializes a new instance of the <c>SAMLHttpRequest</c> class.
            <para>
            The SAML message is received using the HTTP-Redirect binding.
            </para>
            </summary>
            <param name="samlMessage">The SAML message XML.</param>
            <param name="relayState">The relay state or <c>null</c> if none</param>
            <param name="key">The key to generate the signature or <c>null</c> if no signature is to be generated.</param>
            <param name="signatureAlgorithm">The signature algorithm or <c>null</c> to default to http://www.w3.org/2001/04/xmldsig-more#rsa-sha256. </param>
            <param name="url">The URL</param>
            <param name="cookies">The HTTP cookies or <c>null</c> if none</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Utility.SAMLHttpRequest.#ctor(System.Xml.XmlElement,System.String,System.Boolean,System.Security.Cryptography.AsymmetricAlgorithm,System.String,System.Uri,System.Web.HttpCookieCollection)">
            <summary>
            Initializes a new instance of the <c>SAMLHttpRequest</c> class.
            <para>
            The SAML message is received using the HTTP-Redirect binding.
            </para>
            </summary>
            <param name="samlMessage">The SAML message XML.</param>
            <param name="relayState">The relay state or <c>null</c> if none</param>
            <param name="isSAMLRequest">The flag indicating whether this is a SAML request or response.</param>
            <param name="key">The key to generate the signature or <c>null</c> if no signature is to be generated.</param>
            <param name="signatureAlgorithm">The signature algorithm or <c>null</c> to default to http://www.w3.org/2001/04/xmldsig-more#rsa-sha256. </param>
            <param name="url">The URL</param>
            <param name="cookies">The HTTP cookies or <c>null</c> if none</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Utility.SAMLHttpRequest.#ctor(System.Uri,System.Web.HttpCookieCollection)">
            <summary>
            Initializes a new instance of the <c>SAMLHttpRequest</c> class.
            <para>
            The SAML message is received using the HTTP-Redirect binding.
            </para>
            </summary>
            <param name="url">The URL including the SAML query string parameters.</param>
            <param name="cookies">The HTTP cookies or <c>null</c> if none</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Utility.SAMLHttpRequest.Dispose">
            <summary>
            Dispose of any unmanaged resources.
            </summary>
        </member>
        <member name="P:ComponentSpace.SAML2.Utility.SAMLHttpRequest.IsSecureConnection">
            <summary>
            Gets the flag indicating whether the connection is secure (ie HTTPS). 
            </summary>
            <value>
            The the flag indicating whether the connection is secure (ie HTTPS).
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Utility.SAMLHttpRequest.Url">
            <summary>
            Gets the URL used to receive the SAML message. 
            </summary>
            <value>
            The URL used to receive the SAML message.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Utility.SAMLHttpRequest.HttpMethod">
            <summary>
            Gets the HTTP method (Get or Post) used to receive the SAML message. 
            </summary>
            <value>
            The HTTP method used to receive the SAML message.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Utility.SAMLHttpRequest.RequestType">
            <summary>
            Gets the request type (Get or Post) used to receive the SAML message. 
            </summary>
            <value>
            The request type used to receive the SAML message.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Utility.SAMLHttpRequest.Path">
            <summary>
            Gets the path used to receive the SAML message. 
            </summary>
            <value>
            The path used to receive the SAML message.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Utility.SAMLHttpRequest.ContentLength">
            <summary>
            Gets the content length of the HTTP request used to receive the SAML message. 
            </summary>
            <value>
            The content length of the HTTP request used to receive the SAML message.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Utility.SAMLHttpRequest.InputStream">
            <summary>
            Gets the input stream used to receive the SAML message. 
            </summary>
            <value>
            The input stream used to receive the SAML message.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Utility.SAMLHttpRequest.ServerVariables">
            <summary>
            Gets the server variables used to receive the SAML message. 
            </summary>
            <value>
            The server variables used to receive the SAML message.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Utility.SAMLHttpRequest.Headers">
            <summary>
            Gets the headers used to receive the SAML message. 
            </summary>
            <value>
            The headers used to receive the SAML message.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Utility.SAMLHttpRequest.Form">
            <summary>
            Gets the form variables used to receive the SAML message. 
            </summary>
            <value>
            The form variables used to receive the SAML message.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Utility.SAMLHttpRequest.QueryString">
            <summary>
            Gets the query string variables used to receive the SAML message. 
            </summary>
            <value>
            The query string variables used to receive the SAML message.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Utility.SAMLHttpRequest.RawUrl">
            <summary>
            Gets the raw URL used to receive the SAML message. 
            </summary>
            <value>
            The raw URL used to receive the SAML message.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Utility.SAMLHttpRequest.Cookies">
            <summary>
            Gets the collection of cookies. 
            </summary>
            <value>
            The collection of cookies.
            </value>
        </member>
        <member name="T:ComponentSpace.SAML2.Utility.SAMLHttpResponse">
            <summary>
            Provides a mechanism for sending a SAML protocol message through a non-standard HTTP response.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Utility.SAMLHttpResponse.Dispose(System.Boolean)">
            <summary>
            Dispose of any unmanaged resources.
            </summary>
            <param name="disposing"><c>true</c> if called by user code; <c>false</c> if called by the runtime from within the finalizer</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Utility.SAMLHttpResponse.#ctor">
            <summary>
            Initializes a new instance of the <c>SAMLHttpResponse</c> class.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Utility.SAMLHttpResponse.#ctor(System.Web.HttpCookieCollection)">
            <summary>
            Initializes a new instance of the <c>SAMLHttpResponse</c> class.
            </summary>
            <param name="cookies">The HTTP cookies or <c>null</c> if none</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Utility.SAMLHttpResponse.#ctor(System.IO.Stream,System.Web.HttpCookieCollection)">
            <summary>
            Initializes a new instance of the <c>SAMLHttpResponse</c> class.
            </summary>
            <param name="outputStream">The stream used to output the SAML message.</param>
            <param name="cookies">The HTTP cookies or <c>null</c> if none</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Utility.SAMLHttpResponse.#ctor(System.IO.Stream,System.Collections.Specialized.NameValueCollection,System.Web.HttpCookieCollection)">
            <summary>
            Initializes a new instance of the <c>SAMLHttpResponse</c> class.
            </summary>
            <param name="outputStream">The stream used to output the SAML message.</param>
            <param name="headers">The HTTP headers or <c>null</c> if none</param>
            <param name="cookies">The HTTP cookies or <c>null</c> if none</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Utility.SAMLHttpResponse.Dispose">
            <summary>
            Dispose of any unmanaged resources.
            </summary>
        </member>
        <member name="P:ComponentSpace.SAML2.Utility.SAMLHttpResponse.OutputStream">
            <summary>
            Gets the output stream used to send the SAML message.
            <para>
            For the SAML HTTP-Post binding, the output stream contains the encoded SAML message wrapped in an HTML form.
            </para>
            </summary>
            <value>
            The output stream used to send the SAML message.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Utility.SAMLHttpResponse.URL">
            <summary>
            Gets the redirect URL.
            <para>
            For the SAML HTTP-Redirect binding, the URL includes the encoded SAML message.
            </para>
            </summary>
            <value>
            The redirect URL.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Utility.SAMLHttpResponse.Headers">
            <summary>
            Gets the collection of headers. 
            </summary>
            <value>
            The collection of headers.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.Utility.SAMLHttpResponse.Cookies">
            <summary>
            Gets the collection of cookies. 
            </summary>
            <value>
            The collection of cookies.
            </value>
        </member>
        <member name="M:ComponentSpace.SAML2.Utility.SAMLHttpResponse.AddHeader(System.String,System.String)">
            <summary>
            Adds an HTTP header.
            </summary>
            <param name="name">The header name.</param>
            <param name="value">The header value.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Utility.SAMLHttpResponse.Redirect(System.String,System.Boolean)">
            <summary>
            Redirects to the specified URL.
            </summary>
            <param name="url">The target location.</param>
            <param name="endResponse">The flag indicating whether to terminate the current process.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.Utility.SAMLHttpResponse.GetOutputAsString">
            <summary>
            Reads the output stream as a string.
            </summary>
            <returns>The output as a string.</returns>
        </member>
        <member name="T:ComponentSpace.SAML2.Utility.SAMLHttpSessionState">
            <summary>
            Supports sending and receiving SAML protocol messages through non-standard HTTP requests and responses.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Utility.SAMLHttpSessionState.#ctor">
            <summary>
            Initializes a new instance of the <c>SAMLHttpSessionState</c> class.
            </summary>
        </member>
        <member name="P:ComponentSpace.SAML2.Utility.SAMLHttpSessionState.Item(System.String)">
            <summary>
            Gets or sets the session value using the specified name.
            </summary>
            <param name="name">The session item name.</param>
            <returns>The session value or <c>null</c> if none.</returns>
        </member>
        <member name="P:ComponentSpace.SAML2.Utility.SAMLHttpSessionState.SessionID">
            <summary>
            Gets the session ID. 
            </summary>
            <value>
            The session ID.
            </value>
        </member>
        <member name="T:ComponentSpace.SAML2.Utility.XmlSchema">
            <summary>
            Provides common XML schema definitions and helper methods.
            </summary>
            <remarks>
            Refer to the W3C XML Schema specification for further details.
            </remarks>
        </member>
        <member name="T:ComponentSpace.SAML2.Utility.XmlSchema.Prefixes">
            <summary>
            The XML prefixes.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.Utility.XmlSchema.Prefixes.XS">
            <summary>
            The XML schema prefix.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.Utility.XmlSchema.Prefixes.XSI">
            <summary>
            The XML schema instance prefix.
            </summary>
        </member>
        <member name="T:ComponentSpace.SAML2.Utility.XmlSchema.NamespaceURIs">
            <summary>
            The XML namespace URIs.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.Utility.XmlSchema.NamespaceURIs.XMLSchema">
            <summary>
            The XML schema namespace URI.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.Utility.XmlSchema.NamespaceURIs.XMLSchemaInstance">
            <summary>
            The XML schema instance namespace URI.
            </summary>
        </member>
        <member name="T:ComponentSpace.SAML2.Utility.XmlSchema.SimpleTypes">
            <summary>
            Simple types built into XML schema.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.Utility.XmlSchema.SimpleTypes.String">
            <summary>
            String.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.Utility.XmlSchema.SimpleTypes.NormalizedString">
            <summary>
            Normalized string.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.Utility.XmlSchema.SimpleTypes.Token">
            <summary>
            Token.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.Utility.XmlSchema.SimpleTypes.Base64Binary">
            <summary>
            Base 64 binary.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.Utility.XmlSchema.SimpleTypes.HexBinary">
            <summary>
            Hex binary.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.Utility.XmlSchema.SimpleTypes.Integer">
            <summary>
            Integer.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.Utility.XmlSchema.SimpleTypes.PositiveInteger">
            <summary>
            Positive integer.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.Utility.XmlSchema.SimpleTypes.NegativeInteger">
            <summary>
            Negative integer.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.Utility.XmlSchema.SimpleTypes.NonNegativeInteger">
            <summary>
            Non-negative integer.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.Utility.XmlSchema.SimpleTypes.NonPostiveInteger">
            <summary>
            Non-positive integer.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.Utility.XmlSchema.SimpleTypes.Long">
            <summary>
            Long.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.Utility.XmlSchema.SimpleTypes.UnsignedLong">
            <summary>
            Unsigned long.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.Utility.XmlSchema.SimpleTypes.Int">
            <summary>
            Int.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.Utility.XmlSchema.SimpleTypes.UnsignedInt">
            <summary>
            Unsigned int.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.Utility.XmlSchema.SimpleTypes.Short">
            <summary>
            Short.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.Utility.XmlSchema.SimpleTypes.UnsignedShort">
            <summary>
            Unsigned short.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.Utility.XmlSchema.SimpleTypes.Byte">
            <summary>
            Byte.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.Utility.XmlSchema.SimpleTypes.UnsignedByte">
            <summary>
            Unsigned byte.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.Utility.XmlSchema.SimpleTypes.Decimal">
            <summary>
            Decimal.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.Utility.XmlSchema.SimpleTypes.Float">
            <summary>
            Float.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.Utility.XmlSchema.SimpleTypes.Double">
            <summary>
            Double.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.Utility.XmlSchema.SimpleTypes.Boolean">
            <summary>
            Boolean.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.Utility.XmlSchema.SimpleTypes.Duration">
            <summary>
            Duration.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.Utility.XmlSchema.SimpleTypes.DateTime">
            <summary>
            Date/time.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.Utility.XmlSchema.SimpleTypes.Date">
            <summary>
            Date.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.Utility.XmlSchema.SimpleTypes.Time">
            <summary>
            Time.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.Utility.XmlSchema.SimpleTypes.GregorianYear">
            <summary>
            Gregorian year.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.Utility.XmlSchema.SimpleTypes.GregorianYearMonth">
            <summary>
            Gregorian year/month.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.Utility.XmlSchema.SimpleTypes.GregorianMonth">
            <summary>
            Gregorian month.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.Utility.XmlSchema.SimpleTypes.GregorianMonthDay">
            <summary>
            Gregorian month/day.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.Utility.XmlSchema.SimpleTypes.GregorianDay">
            <summary>
            Gregorian day.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.Utility.XmlSchema.SimpleTypes.Name">
            <summary>
            Name.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.Utility.XmlSchema.SimpleTypes.QualifiedName">
            <summary>
            Qualified name.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.Utility.XmlSchema.SimpleTypes.NCName">
            <summary>
            Non-colonized name.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.Utility.XmlSchema.SimpleTypes.AnyURI">
            <summary>
            Any URI.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.Utility.XmlSchema.SimpleTypes.Language">
            <summary>
            Language.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.Utility.XmlSchema.SimpleTypes.ID">
            <summary>
            ID.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.Utility.XmlSchema.SimpleTypes.IDREF">
            <summary>
            IDREF.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.Utility.XmlSchema.SimpleTypes.IDREFS">
            <summary>
            IDREFS.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.Utility.XmlSchema.SimpleTypes.ENTITY">
            <summary>
            ENTITY.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.Utility.XmlSchema.SimpleTypes.ENTITIES">
            <summary>
            ENTITIES.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.Utility.XmlSchema.SimpleTypes.NOTATION">
            <summary>
            NOTATION.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.Utility.XmlSchema.SimpleTypes.NMTOKEN">
            <summary>
            NMTOKEN.
            </summary>
        </member>
        <member name="F:ComponentSpace.SAML2.Utility.XmlSchema.SimpleTypes.NMTOKENS">
            <summary>
            NMTOKENS.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.Utility.XmlSchema.GetQualifiedSimpleType(System.String)">
            <summary>
            Gets the qualified simple type by prefixing it with the XML schema prefix.
            For example, the qualified simple type for "string" is "xs:string".
            </summary>
            <param name="simpleType">The simple type to be qualified.</param>
            <returns>The qualified simple type.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.Utility.XmlSchema.GetSimpleType(System.String)">
            <summary>
            Gets the simple type by removing the XML schema prefix from the qualified name.
            For example, the simple type for "xs:string" is "string".
            </summary>
            <param name="qualifiedSimpleType">The qualfied simple type.</param>
            <returns>The simple type.</returns>
        </member>
        <member name="T:ComponentSpace.SAML2.XmlSecurity.Encryption.IXmlDataEncryptionExtension">
            <summary>
            Supports the implementation of an additional XML data encryption algorithm.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.XmlSecurity.Encryption.IXmlDataEncryptionExtension.CreateSymmetricKey(System.String)">
            <summary>
            Creates a random symmetric key.
            </summary>
            <param name="dataEncryptionMethod">The data encryption method.</param>
            <returns>The symmetric key.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.XmlSecurity.Encryption.IXmlDataEncryptionExtension.EncryptData(System.Byte[],System.Byte[])">
            <summary>
            Encrypts the data.
            </summary>
            <param name="key">The encryption key.</param>
            <param name="data">The data.</param>
            <returns>The encrypted data.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.XmlSecurity.Encryption.IXmlDataEncryptionExtension.DecryptData(System.Byte[],System.Security.Cryptography.Xml.EncryptedData)">
            <summary>
            Decrypts the data.
            </summary>
            <param name="key">The decryption key.</param>
            <param name="encryptedData">The encrypted data.</param>
            <returns>The decrypted data.</returns>
        </member>
        <member name="T:ComponentSpace.SAML2.XmlSecurity.Encryption.IXmlEncryptionExtension">
            <summary>
            Supports the implementation of an additional XML encryption algorithm.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.XmlSecurity.Encryption.IXmlEncryptionExtension.Update(System.Xml.XmlElement)">
            <summary>
            Updates the encrypted data XML.
            </summary>
            <param name="encryptedDataElement">The encrypted data XML.</param>
            <returns>The updated encrypted data XML.</returns>
        </member>
        <member name="T:ComponentSpace.SAML2.XmlSecurity.Encryption.IXmlKeyEncryptionExtension">
            <summary>
            Supports the implementation of an additional XML key encryption algorithm.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.XmlSecurity.Encryption.IXmlKeyEncryptionExtension.EncryptKey(System.Security.Cryptography.AsymmetricAlgorithm,System.Byte[])">
            <summary>
            Encrypts the key using the key encrypting key.
            </summary>
            <param name="keyEncryptingKey">The key encrypting key.</param>
            <param name="key">The key.</param>
            <returns>The encrypted key.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.XmlSecurity.Encryption.IXmlKeyEncryptionExtension.DecryptKey(System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.Xml.EncryptedKey)">
            <summary>
            Decrypts the encrypted key using the key decrypting key.
            </summary>
            <param name="keyDecryptingKey">The key decrypting key.</param>
            <param name="encryptedKey">The encrypted key.</param>
            <returns>The decrypted key.</returns>
        </member>
        <member name="T:ComponentSpace.SAML2.XmlSecurity.Encryption.XmlEncryption">
            <summary>
            Supports XML encryption and decryption.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.XmlSecurity.Encryption.XmlEncryption.CreateSymmetricKey(System.Security.Cryptography.Xml.EncryptionMethod,System.Byte[])">
            <summary>
            Creates a symmetric key given the encryption method and raw key data.
            </summary>
            <param name="encryptionMethod">The encryption method.</param>
            <param name="key">The raw key data.</param>
            <returns>The symmetric key.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLEncryptionException">
            Thrown if the symmetric key cannot be created.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.XmlSecurity.Encryption.XmlEncryption.GetEncryptedKey(System.Security.Cryptography.Xml.EncryptedData,System.Xml.XmlNodeList)">
            <summary>
            Gets the encrypted key associated with the encrypted data.
            </summary>
            <param name="encryptedData">The encrypted data or key.</param>
            <param name="encryptedKeysNodeList">The encrypted keys or <c>null</c> if included in the encrypted data.</param>
            <returns></returns>
        </member>
        <member name="M:ComponentSpace.SAML2.XmlSecurity.Encryption.XmlEncryption.GetKeyInfoElement(System.Xml.XmlElement)">
            <summary>
            Gets the key info element from the XML.
            </summary>
            <param name="xmlElement">The XML containing the key info element.</param>
            <returns>The key info element or <c>null</c> if none.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.XmlSecurity.Encryption.XmlEncryption.GetCertificateElement(System.Xml.XmlElement)">
            <summary>
            Gets the X.509 certificate element from the XML.
            </summary>
            <param name="xmlElement">The XML containing the X.509 certificate element.</param>
            <returns>The X.509 certificate element or <c>null</c> if none.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.XmlSecurity.Encryption.XmlEncryption.Encrypt(System.Xml.XmlElement,System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.KeyInfo)">
            <summary>
            Encrypts the XML.
            </summary>
            <param name="plainTextElement">The plaintext XML.</param>
            <param name="keyEncryptingKey">The asymmetric key encrypting key.</param>
            <param name="keyEncryptionMethod">The method for encrypting the symmetric key.</param>
            <param name="dataEncryptionMethod">The method for encrypting the data.</param>
            <param name="keyInfo">The key info to include with the encrypted data.</param>
            <returns>The encrypted XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLEncryptionException">
            Thrown when the encryption fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.XmlSecurity.Encryption.XmlEncryption.Encrypt(System.Xml.XmlElement,System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.EncryptionMethod)">
            <summary>
            Encrypts the XML.
            </summary>
            <param name="plainTextElement">The plaintext XML.</param>
            <param name="x509Certificate">The X.509 certificate used when encrypting the data.</param>
            <param name="keyEncryptionMethod">The method for encrypting the symmetric key.</param>
            <param name="dataEncryptionMethod">The method for encrypting the data.</param>
            <returns>The encrypted XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLEncryptionException">
            Thrown when the encryption fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.XmlSecurity.Encryption.XmlEncryption.Decrypt(System.Xml.XmlElement,System.Xml.XmlNodeList,System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.EncryptionMethod)">
            <summary>
            Decrypts the XML.
            </summary>
            <param name="encryptedElement">The encrypted XML.</param>
            <param name="encryptedKeysNodeList">The encrypted keys or <c>null</c> if included in the encrypted data.</param>
            <param name="keyDecryptingKey">The asymmetric key decrypting key.</param>
            <param name="keyEncryptionMethod">The method for decrypting the symmetric key or <c>null</c> if specified in the encrypted key.</param>
            <param name="dataEncryptionMethod">The method for decrypting the data or <c>null</c> if specified in the encrypted data.</param>
            <returns>The plaintext XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLEncryptionException">
            Thrown when the decryption fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.XmlSecurity.Encryption.XmlEncryption.Decrypt(System.Xml.XmlElement,System.Xml.XmlNodeList,System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.EncryptionMethod)">
            <summary>
            Decrypts the XML.
            </summary>
            <param name="encryptedElement">The encrypted XML.</param>
            <param name="encryptedKeysNodeList">The encrypted keys or <c>null</c> if included in the encrypted data.</param>
            <param name="x509Certificate">The X.509 certificate containing a private key.</param>
            <param name="keyEncryptionMethod">The method for decrypting the symmetric key or <c>null</c> if specified in the encrypted key.</param>
            <param name="dataEncryptionMethod">The method for decrypting the data or <c>null</c> if specified in the encrypted data.</param>
            <returns>The plaintext XML.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLEncryptionException">
            Thrown when the decryption fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.XmlSecurity.Encryption.XmlEncryption.GetKeyInfo(System.Xml.XmlElement)">
            <summary>
            Gets the key info embedded in the encrypted XML or <c>null</c> if none.
            </summary>
            <param name="xmlElement">The encrypted XML.</param>
            <returns>The key info embedded in the encrypted XML or <c>null</c> if none.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLEncryptionException">
            Thrown when the key info retrieval fails.
            </exception>
            <seealso cref="M:ComponentSpace.SAML2.XmlSecurity.Encryption.XmlEncryption.GetCertificate(System.Xml.XmlElement)"/>
        </member>
        <member name="M:ComponentSpace.SAML2.XmlSecurity.Encryption.XmlEncryption.GetCertificate(System.Xml.XmlElement)">
            <summary>
            Gets the X.509 certificate embedded in the encrypted XML or <c>null</c> if none.
            </summary>
            <param name="xmlElement">The encrypted XML.</param>
            <returns>The X.509 certificate embedded in the encrypted XML or <c>null</c> if none.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLEncryptionException">
            Thrown when the X.509 certificate retrieval fails.
            </exception>
            <seealso cref="M:ComponentSpace.SAML2.XmlSecurity.Encryption.XmlEncryption.GetKeyInfo(System.Xml.XmlElement)"/>
        </member>
        <member name="T:ComponentSpace.SAML2.XmlSecurity.Encryption.XmlEncryptionExtensions">
            <summary>
            Supports the implementation of additional XML encryption algorithms.
            </summary>
        </member>
        <member name="P:ComponentSpace.SAML2.XmlSecurity.Encryption.XmlEncryptionExtensions.KeyEncryptionExtensions">
            <summary>
            Gets or sets the dictionary of key encryption extensions.
            </summary>
            <value>
            The dictionary of key encryption extensions.
            </value>
        </member>
        <member name="P:ComponentSpace.SAML2.XmlSecurity.Encryption.XmlEncryptionExtensions.DataEncryptionExtensions">
            <summary>
            Gets or sets the dictionary of data encryption extensions.
            </summary>
            <value>
            The dictionary of data encryption extensions.
            </value>
        </member>
        <member name="T:ComponentSpace.SAML2.XmlSecurity.Signature.EcDsaSignatureDescriptions">
            <summary>
            Included are XML signature descriptions for the EC DSA SHA-256, SHA-384 and SHA-512 algorithms.
            </summary>
        </member>
        <member name="T:ComponentSpace.SAML2.XmlSecurity.Signature.EcDsaSignatureDescriptions.EcDsaSignatureFormatter">
            <summary>
            Formats EC DSA signatures.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.XmlSecurity.Signature.EcDsaSignatureDescriptions.EcDsaSignatureFormatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>
            Sets the key used to create the signature.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.XmlSecurity.Signature.EcDsaSignatureDescriptions.EcDsaSignatureFormatter.SetHashAlgorithm(System.String)">
            <summary>
            Sets the name of the hash algorithm used to create the signature.
            </summary>
            <param name="algorithmName">The hash algorithm name.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.XmlSecurity.Signature.EcDsaSignatureDescriptions.EcDsaSignatureFormatter.CreateSignature(System.Byte[])">
            <summary>
            Creates the signature from the specified hash value.
            </summary>
            <param name="hash"></param>
            <returns></returns>
        </member>
        <member name="T:ComponentSpace.SAML2.XmlSecurity.Signature.EcDsaSignatureDescriptions.EcDsaSignatureDeformatter">
            <summary>
            Deformats EC DSA signatures.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.XmlSecurity.Signature.EcDsaSignatureDescriptions.EcDsaSignatureDeformatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>
            Sets the key used to verify the signature.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.XmlSecurity.Signature.EcDsaSignatureDescriptions.EcDsaSignatureDeformatter.SetHashAlgorithm(System.String)">
            <summary>
            Sets the name of the hash algorithm used to verify the signature.
            </summary>
            <param name="algorithmName">The hash algorithm name.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.XmlSecurity.Signature.EcDsaSignatureDescriptions.EcDsaSignatureDeformatter.VerifySignature(System.Byte[],System.Byte[])">
            <summary>
            Verifies the signature from the specified hash value.
            </summary>
            <param name="hash">The hash.</param>
            <param name="signature">The signature.</param>
            <returns><c>true</c> if the signature verifies; otherwise <c>false</c>.</returns>
        </member>
        <member name="T:ComponentSpace.SAML2.XmlSecurity.Signature.EcDsaSignatureDescriptions.EcDsaSha2SignatureDescription">
            <summary>
            Describes a SHA-2 XML signature algorithm.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.XmlSecurity.Signature.EcDsaSignatureDescriptions.EcDsaSha2SignatureDescription.#ctor(System.String)">
            <summary>
            Constructs a SHA-2 XML signature algorithm description.
            </summary>
            <param name="digestAlgorithm">The digest algorithm.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.XmlSecurity.Signature.EcDsaSignatureDescriptions.EcDsaSha2SignatureDescription.CreateFormatter(System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>
            Creates an <c>AsymmetricSignatureFormatter</c> with the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns>The <c>AsymmetricSignatureFormatter</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.XmlSecurity.Signature.EcDsaSignatureDescriptions.EcDsaSha2SignatureDescription.CreateDeformatter(System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>
            Creates an <c>AsymmetricSignatureDeformatter</c> with the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns>The <c>AsymmetricSignatureDeformatter</c>.</returns>
        </member>
        <member name="T:ComponentSpace.SAML2.XmlSecurity.Signature.EcDsaSignatureDescriptions.EcDsaSha256SignatureDescription">
            <summary>
            Describes the SHA-256 XML signature algorithm.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.XmlSecurity.Signature.EcDsaSignatureDescriptions.EcDsaSha256SignatureDescription.#ctor">
            <summary>
            Constructs the SHA-256 XML signature algorithm description.
            </summary>
        </member>
        <member name="T:ComponentSpace.SAML2.XmlSecurity.Signature.EcDsaSignatureDescriptions.EcDsaSha384SignatureDescription">
            <summary>
            Describes the SHA-384 XML signature algorithm.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.XmlSecurity.Signature.EcDsaSignatureDescriptions.EcDsaSha384SignatureDescription.#ctor">
            <summary>
            Constructs the SHA-384 XML signature algorithm description.
            </summary>
        </member>
        <member name="T:ComponentSpace.SAML2.XmlSecurity.Signature.EcDsaSignatureDescriptions.EcDsaSha512SignatureDescription">
            <summary>
            Describes the SHA-512 XML signature algorithm.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.XmlSecurity.Signature.EcDsaSignatureDescriptions.EcDsaSha512SignatureDescription.#ctor">
            <summary>
            Constructs the SHA-512 XML signature algorithm description.
            </summary>
        </member>
        <member name="P:ComponentSpace.SAML2.XmlSecurity.Signature.EcDsaSignatureDescriptions.Enabled">
            <summary>
            Gets or sets the flag indicating whether signature support is enabled.
            <para>
            The default is <c>true</c>.
            </para>
            </summary>
            <value>
            The flag indicating whether signature support is enabled.
            </value>
        </member>
        <member name="M:ComponentSpace.SAML2.XmlSecurity.Signature.EcDsaSignatureDescriptions.AddAlgorithms">
            <summary>
            Adds the signature algorithms to the system so they're available for subsequent use.
            </summary>
        </member>
        <member name="T:ComponentSpace.SAML2.XmlSecurity.Signature.RsaPkcs1SignatureDescriptions">
            <summary>
            Included are XML signature descriptions for the RSA PKCS1 SHA-256, SHA-384 and SHA-512 algorithms.
            </summary>
        </member>
        <member name="T:ComponentSpace.SAML2.XmlSecurity.Signature.RsaPkcs1SignatureDescriptions.RsaPkcs1SignatureDescription">
            <summary>
            Describes an RSA-PKCS1 XML signature algorithm.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.XmlSecurity.Signature.RsaPkcs1SignatureDescriptions.RsaPkcs1SignatureDescription.#ctor(System.String)">
            <summary>
            Constructs the RSA-PKCS1 XML signature algorithm description.
            </summary>
            <param name="digestAlgorithm">The digest algorithm.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.XmlSecurity.Signature.RsaPkcs1SignatureDescriptions.RsaPkcs1SignatureDescription.CreateDeformatter(System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>
            Creates the deformatter.
            </summary>
            <param name="key">The key.</param>
            <returns>The deformatter.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.XmlSecurity.Signature.RsaPkcs1SignatureDescriptions.RsaPkcs1SignatureDescription.CreateFormatter(System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>
            Creates the formatter.
            </summary>
            <param name="key">The key.</param>
            <returns>The formatter.</returns>
        </member>
        <member name="T:ComponentSpace.SAML2.XmlSecurity.Signature.RsaPkcs1SignatureDescriptions.RsaPkcs1Sha256SignatureDescription">
            <summary>
            Describes the SHA-256 XML signature algorithm.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.XmlSecurity.Signature.RsaPkcs1SignatureDescriptions.RsaPkcs1Sha256SignatureDescription.#ctor">
            <summary>
            Constructs the SHA-256 XML signature algorithm description.
            </summary>
        </member>
        <member name="T:ComponentSpace.SAML2.XmlSecurity.Signature.RsaPkcs1SignatureDescriptions.RsaPkcs1Sha384SignatureDescription">
            <summary>
            Describes the SHA-384 XML signature algorithm.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.XmlSecurity.Signature.RsaPkcs1SignatureDescriptions.RsaPkcs1Sha384SignatureDescription.#ctor">
            <summary>
            Constructs the SHA-384 XML signature algorithm description.
            </summary>
        </member>
        <member name="T:ComponentSpace.SAML2.XmlSecurity.Signature.RsaPkcs1SignatureDescriptions.RsaPkcs1Sha512SignatureDescription">
            <summary>
            Describes the SHA-512 XML signature algorithm.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.XmlSecurity.Signature.RsaPkcs1SignatureDescriptions.RsaPkcs1Sha512SignatureDescription.#ctor">
            <summary>
            Constructs the SHA-512 XML signature algorithm description.
            </summary>
        </member>
        <member name="P:ComponentSpace.SAML2.XmlSecurity.Signature.RsaPkcs1SignatureDescriptions.Enabled">
            <summary>
            Gets or sets the flag indicating whether signature support is enabled.
            <para>
            The default is <c>true</c>.
            </para>
            </summary>
            <value>
            The flag indicating whether signature support is enabled.
            </value>
        </member>
        <member name="M:ComponentSpace.SAML2.XmlSecurity.Signature.RsaPkcs1SignatureDescriptions.AddAlgorithms">
            <summary>
            Adds the signature algorithms to the system so they're available for subsequent use.
            </summary>
        </member>
        <member name="T:ComponentSpace.SAML2.XmlSecurity.Signature.RsaPssSignatureDescriptions">
            <summary>
            Included are XML signature descriptions for the RSA PSS SHA-256, SHA-384 and SHA-512 algorithms.
            </summary>
        </member>
        <member name="T:ComponentSpace.SAML2.XmlSecurity.Signature.RsaPssSignatureDescriptions.RsaPssSignatureFormatter">
            <summary>
            Formats RSA PSS signatures.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.XmlSecurity.Signature.RsaPssSignatureDescriptions.RsaPssSignatureFormatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>
            Sets the key used to create the signature.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.XmlSecurity.Signature.RsaPssSignatureDescriptions.RsaPssSignatureFormatter.SetHashAlgorithm(System.String)">
            <summary>
            Sets the name of the hash algorithm used to create the signature.
            </summary>
            <param name="algorithmName">The hash algorithm name.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.XmlSecurity.Signature.RsaPssSignatureDescriptions.RsaPssSignatureFormatter.CreateSignature(System.Byte[])">
            <summary>
            Creates the signature from the specified hash value.
            </summary>
            <param name="hash"></param>
            <returns></returns>
        </member>
        <member name="T:ComponentSpace.SAML2.XmlSecurity.Signature.RsaPssSignatureDescriptions.RsaPssSignatureDeformatter">
            <summary>
            Deformats RSA PSS signatures.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.XmlSecurity.Signature.RsaPssSignatureDescriptions.RsaPssSignatureDeformatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>
            Sets the key used to verify the signature.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.XmlSecurity.Signature.RsaPssSignatureDescriptions.RsaPssSignatureDeformatter.SetHashAlgorithm(System.String)">
            <summary>
            Sets the name of the hash algorithm used to verify the signature.
            </summary>
            <param name="algorithmName">The hash algorithm name.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.XmlSecurity.Signature.RsaPssSignatureDescriptions.RsaPssSignatureDeformatter.VerifySignature(System.Byte[],System.Byte[])">
            <summary>
            Verifies the signature from the specified hash value.
            </summary>
            <param name="hash">The hash.</param>
            <param name="signature">The signature.</param>
            <returns><c>true</c> if the signature verifies; otherwise <c>false</c>.</returns>
        </member>
        <member name="T:ComponentSpace.SAML2.XmlSecurity.Signature.RsaPssSignatureDescriptions.RsaPssSignatureDescription">
            <summary>
            Describes an RSA-PSS XML signature algorithm.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.XmlSecurity.Signature.RsaPssSignatureDescriptions.RsaPssSignatureDescription.#ctor(System.String)">
            <summary>
            Constructs the RSA-PSS XML signature algorithm description.
            </summary>
            <param name="digestAlgorithm">The digest algorithm.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.XmlSecurity.Signature.RsaPssSignatureDescriptions.RsaPssSignatureDescription.CreateFormatter(System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>
            Creates an <c>AsymmetricSignatureFormatter</c> with the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns>The <c>AsymmetricSignatureFormatter</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.XmlSecurity.Signature.RsaPssSignatureDescriptions.RsaPssSignatureDescription.CreateDeformatter(System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>
            Creates an <c>AsymmetricSignatureDeformatter</c> with the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns>The <c>AsymmetricSignatureDeformatter</c>.</returns>
        </member>
        <member name="T:ComponentSpace.SAML2.XmlSecurity.Signature.RsaPssSignatureDescriptions.RsaPssSha256SignatureDescription">
            <summary>
            Describes the SHA-256 XML signature algorithm.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.XmlSecurity.Signature.RsaPssSignatureDescriptions.RsaPssSha256SignatureDescription.#ctor">
            <summary>
            Constructs the SHA-256 XML signature algorithm description.
            </summary>
        </member>
        <member name="T:ComponentSpace.SAML2.XmlSecurity.Signature.RsaPssSignatureDescriptions.RsaPssSha384SignatureDescription">
            <summary>
            Describes the SHA-384 XML signature algorithm.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.XmlSecurity.Signature.RsaPssSignatureDescriptions.RsaPssSha384SignatureDescription.#ctor">
            <summary>
            Constructs the SHA-384 XML signature algorithm description.
            </summary>
        </member>
        <member name="T:ComponentSpace.SAML2.XmlSecurity.Signature.RsaPssSignatureDescriptions.RsaPssSha512SignatureDescription">
            <summary>
            Describes the SHA-512 XML signature algorithm.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.XmlSecurity.Signature.RsaPssSignatureDescriptions.RsaPssSha512SignatureDescription.#ctor">
            <summary>
            Constructs the SHA-512 XML signature algorithm description.
            </summary>
        </member>
        <member name="P:ComponentSpace.SAML2.XmlSecurity.Signature.RsaPssSignatureDescriptions.Enabled">
            <summary>
            Gets or sets the flag indicating whether signature support is enabled.
            <para>
            The default is <c>true</c>.
            </para>
            </summary>
            <value>
            The flag indicating whether signature support is enabled.
            </value>
        </member>
        <member name="M:ComponentSpace.SAML2.XmlSecurity.Signature.RsaPssSignatureDescriptions.AddAlgorithms">
            <summary>
            Adds the signature algorithms to the system so they're available for subsequent use.
            </summary>
        </member>
        <member name="T:ComponentSpace.SAML2.XmlSecurity.Signature.SignatureDescriptions">
            <summary>
            Included are XML signature descriptions for the SHA-256, SHA-384 and SHA-512 algorithms.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.XmlSecurity.Signature.SignatureDescriptions.AddAlgorithms">
            <summary>
            Adds XML signature algorithms to the system so they're available for subsequent use.
            </summary>
        </member>
        <member name="T:ComponentSpace.SAML2.XmlSecurity.Signature.XmlSignature">
            <summary>
            Supports XML signature generation and verification.
            </summary>
        </member>
        <member name="M:ComponentSpace.SAML2.XmlSecurity.Signature.XmlSignature.GetSigningKeyFromKeyInfo(System.Security.Cryptography.Xml.KeyInfo)">
            <summary>
            Gets the signing key from the key info.
            </summary>
            <param name="keyInfo">The key info.</param>
            <returns>The signing key or <c>null</c> if none.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.XmlSecurity.Signature.XmlSignature.LogSignatureGeneration(System.Xml.XmlElement,System.String,System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.Xml.KeyInfo,System.String,System.String,System.String)">
            <summary>
            Logs information about the XML signature generation.
            </summary>
            <param name="xmlElement">The XML to sign.</param>
            <param name="elementId">The ID of the signed XML.</param>
            <param name="signingKey">The signing key.</param>
            <param name="keyInfo">The key info to include in the signature.</param>
            <param name="inclusiveNamespacesPrefixList">The XML signature inclusive namespace prefix list or <c>null</c>.</param>
            <param name="digestMethod">The digest method or <c>null</c> to default to http://www.w3.org/2001/04/xmlenc#sha256. </param>
            <param name="signatureMethod">The signature method or <c>null</c> to default to http://www.w3.org/2001/04/xmldsig-more#rsa-sha256. </param>
        </member>
        <member name="M:ComponentSpace.SAML2.XmlSecurity.Signature.XmlSignature.LogSignatureVerification(System.Xml.XmlElement,System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>
            Logs information about the XML signature verification.
            </summary>
            <remarks>
            The supplied public key is used to perform the verification.
            </remarks>
            <param name="xmlElement">The XML containing the signature to verify.</param>
            <param name="signingKey">The public key used to perform the verification or <c>null</c> if none.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.XmlSecurity.Signature.XmlSignature.PrepareForSignatureVerification(System.Xml.XmlElement,System.Boolean)">
            <summary>
            If the signed element isn't the document element then signature verification can fail.
            This appears to be an issue with namespace management and canonicalization but it's unclear precisely 
            what the problem is. It's most likely an issue with the .NET framework's SignedXml class.
            As a workaround, optionally all namespaces used within the XML are declared on the document element,
            and the element is cloned to a new document.
            </summary>
            <param name="xmlElement">The XML containing the signature.</param>
            <param name="declareAllNamespaces"><c>true</c> if all namespaces used within the XML are to be declared on the document element; otherwise <c>false</c>.</param>
            <returns>The XML prepared for signature verification.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.XmlSecurity.Signature.XmlSignature.Verify(System.Xml.XmlElement,System.Security.Cryptography.AsymmetricAlgorithm,ComponentSpace.SAML2.XmlSecurity.Signature.ISignedXmlFactory,System.Boolean,System.Boolean)">
            <summary>
            Verifies the XML signature.
            </summary>
            <remarks>
            The supplied public key is used to perform the verification.
            </remarks>
            <param name="xmlElement">The XML containing the signature to verify.</param>
            <param name="signingKey">The public key used to perform the verification or <c>null</c> if none.</param>
            <param name="signedXmlFactory">The signed XML factory.</param>
            <param name="clone"><c>true</c> if the XML element is to be cloned to a new document; otherwise <c>false</c>.</param>
            <param name="declareAllNamespaces"><c>true</c> if all namespaces used within the XML are to be declared on the document element; otherwise <c>false</c>.</param>
            <returns><c>true</c> if the XML signature is correct; otherwise <c>false</c>.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSignatureException">
            Thrown when the signature verification fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.XmlSecurity.Signature.XmlSignature.GetSignatureElement(System.Xml.XmlElement)">
            <summary>
            Gets the signature element from the XML.
            </summary>
            <param name="xmlElement">The XML containing the signature element.</param>
            <returns>The signature element or <c>null</c> if none.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.XmlSecurity.Signature.XmlSignature.GetKeyInfoElement(System.Xml.XmlElement)">
            <summary>
            Gets the key info element from the XML.
            </summary>
            <param name="xmlElement">The XML containing the key info element.</param>
            <returns>The key info element or <c>null</c> if none.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.XmlSecurity.Signature.XmlSignature.GetCertificateElement(System.Xml.XmlElement)">
            <summary>
            Gets the X.509 certificate element from the XML.
            </summary>
            <param name="xmlElement">The XML containing the X.509 certificate element.</param>
            <returns>The X.509 certificate element or <c>null</c> if none.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.XmlSecurity.Signature.XmlSignature.GetDigestMethodElement(System.Xml.XmlElement)">
            <summary>
            Gets the digest method element from the XML.
            </summary>
            <param name="xmlElement">The XML containing the digest method element.</param>
            <returns>The digest method element or <c>null</c> if none.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.XmlSecurity.Signature.XmlSignature.GetSignatureMethodElement(System.Xml.XmlElement)">
            <summary>
            Gets the signature method element from the XML.
            </summary>
            <param name="xmlElement">The XML containing the signature method element.</param>
            <returns>The signature method element or <c>null</c> if none.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.XmlSecurity.Signature.XmlSignature.IsSigned(System.Xml.XmlElement)">
            <summary>
            Indicates whether the XML includes a signature element.
            </summary>
            <param name="xmlElement">The XML to test.</param>
            <returns><c>true</c> if the XML includes a signature element; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentSpace.SAML2.XmlSecurity.Signature.XmlSignature.RemoveSignature(System.Xml.XmlElement)">
            <summary>
            Removes the signature element from the XML.
            </summary>
            <param name="xmlElement">The XML containing the signature element.</param>
        </member>
        <member name="M:ComponentSpace.SAML2.XmlSecurity.Signature.XmlSignature.Generate(System.Xml.XmlElement,System.String,System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.Xml.KeyInfo,System.Security.Cryptography.Xml.SignedXml,System.String,System.String,System.String)">
            <summary>
            Generates an XML signature.
            </summary>
            <remarks>
            An XML signature with the constraints specified in the SAML specification is generated
            and added to the XML. The signature is created using the supplied signing key.
            The key info will be included in the signature.
            </remarks>
            <param name="xmlElement">The XML to sign.</param>
            <param name="elementId">The ID of the signed XML.</param>
            <param name="signingKey">The signing key.</param>
            <param name="keyInfo">The key info to include in the signature.</param>
            <param name="signedXml">The XML signature support class.</param>
            <param name="inclusiveNamespacesPrefixList">The XML signature inclusive namespace prefix list or <c>null</c>.</param>
            <param name="digestMethod">The digest method or <c>null</c> to default to http://www.w3.org/2001/04/xmlenc#sha256. </param>
            <param name="signatureMethod">The signature method or <c>null</c> to default to http://www.w3.org/2001/04/xmldsig-more#rsa-sha256. </param>
            <returns>The XML signature.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSignatureException">
            Thrown when the signature generation fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.XmlSecurity.Signature.XmlSignature.Generate(System.Xml.XmlElement,System.String,System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.Xml.KeyInfoX509Data,System.Security.Cryptography.Xml.SignedXml,System.String,System.String,System.String)">
            <summary>
            Generates an XML signature.
            </summary>
            <remarks>
            An XML signature with the constraints specified in the SAML specification is generated
            and added to the XML. The signature is created using the supplied signing key.
            Key info, using the supplied X.509 data, is included in the signature.
            </remarks>
            <param name="xmlElement">The XML to sign.</param>
            <param name="elementId">The ID of the signed XML.</param>
            <param name="signingKey">The signing key.</param>
            <param name="keyInfoX509Data">The X.509 data to include in the signature.</param>
            <param name="signedXml">The XML signature support class.</param>
            <param name="inclusiveNamespacesPrefixList">The XML signature inclusive namespace prefix list.</param>
            <param name="digestMethod">The digest method or <c>null</c> to default to http://www.w3.org/2001/04/xmlenc#sha256. </param>
            <param name="signatureMethod">The signature method or <c>null</c> to default to http://www.w3.org/2001/04/xmldsig-more#rsa-sha256. </param>
            <returns>The XML signature.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSignatureException">
            Thrown when the signature generation fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.XmlSecurity.Signature.XmlSignature.Generate(System.Xml.XmlElement,System.String,System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.X509Certificates.X509Certificate2Collection,System.Security.Cryptography.Xml.SignedXml,System.String,System.String,System.String)">
            <summary>
            Generates an XML signature.
            </summary>
            <remarks>
            An XML signature with the constraints specified in the SAML specification is generated
            and added to the XML. The signature is created using the supplied signing key.
            Key info, using the supplied X.509 certificates, is included in the signature.
            </remarks>
            <param name="xmlElement">The XML to sign.</param>
            <param name="elementId">The ID of the signed XML.</param>
            <param name="signingKey">The signing key.</param>
            <param name="x509Certificates">The list of X.509 certificate to include in the key info.</param>
            <param name="signedXml">The XML signature support class.</param>
            <param name="inclusiveNamespacesPrefixList">The XML signature inclusive namespace prefix list.</param>
            <param name="digestMethod">The digest method or <c>null</c> to default to http://www.w3.org/2001/04/xmlenc#sha256. </param>
            <param name="signatureMethod">The signature method or <c>null</c> to default to http://www.w3.org/2001/04/xmldsig-more#rsa-sha256. </param>
            <returns>The XML signature.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSignatureException">
            Thrown when the signature generation fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.XmlSecurity.Signature.XmlSignature.Generate(System.Xml.XmlElement,System.String,System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.Xml.SignedXml,System.String,System.String,System.String)">
            <summary>
            Generates an XML signature.
            </summary>
            <remarks>
            An XML signature with the constraints specified in the SAML specification is generated
            and added to the XML. The signature is created using the supplied signing key.
            Key info, using the supplied X.509 certificate, is included in the signature.
            </remarks>
            <param name="xmlElement">The XML to sign.</param>
            <param name="elementId">The ID of the signed XML.</param>
            <param name="signingKey">The signing key.</param>
            <param name="x509Certificate">The X.509 certificate to include in the key info.</param>
            <param name="signedXml">The XML signature support class.</param>
            <param name="inclusiveNamespacesPrefixList">The XML signature inclusive namespace prefix list.</param>
            <param name="digestMethod">The digest method or <c>null</c> to default to http://www.w3.org/2001/04/xmlenc#sha256. </param>
            <param name="signatureMethod">The signature method or <c>null</c> to default to http://www.w3.org/2001/04/xmldsig-more#rsa-sha256. </param>
            <returns>The XML signature.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSignatureException">
            Thrown when the signature generation fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.XmlSecurity.Signature.XmlSignature.Generate(System.Xml.XmlElement,System.String,System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.Xml.SignedXml,System.String,System.String,System.String)">
            <summary>
            Generates an XML signature.
            </summary>
            <remarks>
            An XML signature with the constraints specified in the SAML specification is generated
            and added to the XML. The signature is created using the supplied signing key.
            </remarks>
            <param name="xmlElement">The XML to sign.</param>
            <param name="elementId">The ID of the signed XML.</param>
            <param name="signingKey">The signing key.</param>
            <param name="signedXml">The XML signature support class.</param>
            <param name="inclusiveNamespacesPrefixList">The XML signature inclusive namespace prefix list.</param>
            <param name="digestMethod">The digest method or <c>null</c> to default to http://www.w3.org/2001/04/xmlenc#sha256. </param>
            <param name="signatureMethod">The signature method or <c>null</c> to default to http://www.w3.org/2001/04/xmldsig-more#rsa-sha256. </param>
            <returns>The XML signature.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSignatureException">
            Thrown when the signature generation fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.XmlSecurity.Signature.XmlSignature.Verify(System.Xml.XmlElement,System.Security.Cryptography.Xml.KeyInfo,ComponentSpace.SAML2.XmlSecurity.Signature.ISignedXmlFactory)">
            <summary>
            Verifies the XML signature.
            </summary>
            <remarks>
            The supplied key info is used to perform the verification.
            </remarks>
            <param name="xmlElement">The XML containing the signature to verify.</param>
            <param name="keyInfo">The key info used to perform the verification or <c>null</c> if none.</param>
            <param name="signedXmlFactory">The signed XML factory.</param>
            <returns><c>true</c> if the XML signature is correct; otherwise <c>false</c>.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSignatureException">
            Thrown when the signature verification fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.XmlSecurity.Signature.XmlSignature.Verify(System.Xml.XmlElement,System.Security.Cryptography.Xml.KeyInfoX509Data,ComponentSpace.SAML2.XmlSecurity.Signature.ISignedXmlFactory)">
            <summary>
            Verifies the XML signature.
            </summary>
            <remarks>
            The supplied X.509 data is used to perform the verification.
            </remarks>
            <param name="xmlElement">The XML containing the signature to verify.</param>
            <param name="keyInfoX509Data">The X.509 data used to perform the verification or <c>null</c> if none.</param>
            <param name="signedXmlFactory">The signed XML factory.</param>
            <returns><c>true</c> if the XML signature is correct; otherwise <c>false</c>.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSignatureException">
            Thrown when the signature verification fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.XmlSecurity.Signature.XmlSignature.Verify(System.Xml.XmlElement,System.Security.Cryptography.X509Certificates.X509Certificate2,ComponentSpace.SAML2.XmlSecurity.Signature.ISignedXmlFactory)">
            <summary>
            Verifies the XML signature.
            </summary>
            <remarks>
            The supplied X.509 certificate is used to perform the verification.
            </remarks>
            <param name="xmlElement">The XML containing the signature to verify.</param>
            <param name="x509Certificate">The X.509 certificate used to perform the verification.</param>
            <param name="signedXmlFactory">The signed XML factory.</param>
            <returns><c>true</c> if the XML signature is correct; otherwise <c>false</c>.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSignatureException">
            Thrown when the signature verification fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.XmlSecurity.Signature.XmlSignature.Verify(System.Xml.XmlElement,System.Security.Cryptography.AsymmetricAlgorithm,ComponentSpace.SAML2.XmlSecurity.Signature.ISignedXmlFactory)">
            <summary>
            Verifies the XML signature.
            </summary>
            <remarks>
            The supplied public key is used to perform the verification.
            </remarks>
            <param name="xmlElement">The XML containing the signature to verify.</param>
            <param name="signingKey">The public key used to perform the verification or <c>null</c> if none.</param>
            <param name="signedXmlFactory">The signed XML factory.</param>
            <returns><c>true</c> if the XML signature is correct; otherwise <c>false</c>.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSignatureException">
            Thrown when the signature verification fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.XmlSecurity.Signature.XmlSignature.Verify(System.Xml.XmlElement,ComponentSpace.SAML2.XmlSecurity.Signature.ISignedXmlFactory)">
            <summary>
            Verifies the XML signature.
            </summary>
            <remarks>
            The key info included with the signature is used to perform the verification.
            </remarks>
            <param name="xmlElement">The XML containing the signature to verify.</param>
            <param name="signedXmlFactory">The signed XML factory.</param>
            <returns><c>true</c> if the XML signature is correct; otherwise <c>false</c>.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSignatureException">
            Thrown when the signature verification fails.
            </exception>
        </member>
        <member name="M:ComponentSpace.SAML2.XmlSecurity.Signature.XmlSignature.GetKeyInfo(System.Xml.XmlElement)">
            <summary>
            Gets the key info embedded in the XML signature or <c>null</c> if none.
            </summary>
            <param name="xmlElement">The XML containing the signature with key info.</param>
            <returns>The key info embedded in the XML signature or <c>null</c> if none.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSignatureException">
            Thrown when the key info retrieval fails.
            </exception>
            <seealso cref="M:ComponentSpace.SAML2.XmlSecurity.Signature.XmlSignature.GetCertificate(System.Xml.XmlElement)"/>
        </member>
        <member name="M:ComponentSpace.SAML2.XmlSecurity.Signature.XmlSignature.GetCertificate(System.Xml.XmlElement)">
            <summary>
            Gets the X.509 certificate embedded in the XML signature or <c>null</c> if none.
            </summary>
            <param name="xmlElement">The XML containing the signature with X.509 certificate.</param>
            <returns>The X.509 certificate embedded in the XML signature or <c>null</c> if none.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSignatureException">
            Thrown when the X.509 certificate retrieval fails.
            </exception>
            <seealso cref="M:ComponentSpace.SAML2.XmlSecurity.Signature.XmlSignature.GetKeyInfo(System.Xml.XmlElement)"/>
        </member>
        <member name="M:ComponentSpace.SAML2.XmlSecurity.Signature.XmlSignature.GetDigestMethod(System.Xml.XmlElement)">
            <summary>
            Gets the digest method specified in the XML signature or <c>null</c> if none.
            </summary>
            <param name="xmlElement">The XML containing the signature with digest method.</param>
            <returns>The digest method or <c>null</c> if none.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSignatureException">
            Thrown when the digest method retrieval fails.
            </exception>
            <seealso cref="M:ComponentSpace.SAML2.XmlSecurity.Signature.XmlSignature.GetSignatureMethod(System.Xml.XmlElement)"/>
        </member>
        <member name="M:ComponentSpace.SAML2.XmlSecurity.Signature.XmlSignature.GetSignatureMethod(System.Xml.XmlElement)">
            <summary>
            Gets the signature method specified in the XML signature or <c>null</c> if none.
            </summary>
            <param name="xmlElement">The XML containing the signature with signature method.</param>
            <returns>The signature method or <c>null</c> if none.</returns>
            <exception cref="T:ComponentSpace.SAML2.Exceptions.SAMLSignatureException">
            Thrown when the signature method retrieval fails.
            </exception>
            <seealso cref="M:ComponentSpace.SAML2.XmlSecurity.Signature.XmlSignature.GetDigestMethod(System.Xml.XmlElement)"/>
        </member>
    </members>
</doc>
